% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preprocess_species.R
\name{preprocess_species}
\alias{preprocess_species}
\title{prepare eBird Status and Trends data for BirdFlow model fitting}
\usage{
preprocess_species(
  species = NULL,
  out_dir = NULL,
  res = NULL,
  hdf5 = TRUE,
  tiff = FALSE,
  overwrite = TRUE,
  crs = NULL,
  clip = NULL,
  max_params = NULL,
  gpu_ram = 12,
  skip_quality_checks = FALSE,
  dummy_dynamic_mask = FALSE,
  treat_na_as_zero = TRUE
)
}
\arguments{
\item{species}{a species in any format accepted by \code{\link[ebirdst:get_species]{ebirdst::get_species()}}}

\item{out_dir}{output directory, files will be written here. Required unless
both \code{tiff} and \code{hdf5} are TRUE.  File names created here will incorporate
the species code, resolution, and eBird version year.}

\item{res}{the target resolution of the BirdFlow model in kilometers. If
\code{res} is NULL (default) then a resolution that results in less than \code{max_params}
parameters will be used, while also minimizing the resolution and limiting
the number of significant digits.}

\item{hdf5}{if TRUE (default) an hdf5 file will be exported.}

\item{tiff}{set to TRUE to export geoTIFF files. They are not needed to fit
the BirdFlow model.}

\item{overwrite}{if TRUE (default) any pre-existing output files will be
overwritten. If FALSE pre-existing files will result in an error.}

\item{crs}{coordinate reference system (CRS) to use.  Defaults to the custom
projection eBird has assigned to this species - see
\code{\link[ebirdst:load_fac_map_parameters]{ebirdst::load_fac_map_parameters()}}). It will be interpreted by
\code{\link[terra:crs]{terra::crs()}} to generate a well known text representation of the CRS.}

\item{clip}{a polygon or the path to a file containing a polygon. It must
have a CRS and should either be a \link[terra:SpatVector-class]{SpatVector()} object
or or produce one when called with \link[terra:vect]{vect(clip)}}

\item{max_params}{the maximum number of fitted parameters that the BirdFlow
model should contain. Ignored if \code{res} is not NULL.  Otherwise a resolution
will be chosen that yields this many fitted parameters. See \code{gpu_ram} for
the default way of setting \code{max_params} and \code{res}.}

\item{gpu_ram}{Gigabytes of ram on GPU machine that will fit the models.
If \code{res} is NULL and \code{max_params} is NULL this is used to estimate
\code{max_params}which is, in turn, used to determine the resolution. Ignored
if either\code{ res} or \code{max_params} is set.}

\item{skip_quality_checks}{If \code{TRUE} than preprocess the species even if
not all of four ranges are modeled (based on
\link[ebirdst:ebirdst_runs]{ebirdst_runs()}).}

\item{dummy_dynamic_mask}{set to TRUE to force all cells in the dynamic mask
to TRUE. This creates a BirdFlow object with a dynamic mask component
that is compatible with the current BirdFlowR package but that mimics the
older  pre-dynamic mask BirdFlow models.  If fit the resulting object will
have transitions at every timestep among all active cells.  The only
reason to set this to TRUE is for comparsion testing and quality control
during the transition, and this parameter may eventually be dropped.}

\item{treat_na_as_zero}{If TRUE than NA in eBird status and trends data is
converted to zero and bilinear interpolation is used during transformation.
Otherwise NA is kept as NA and nearest neighbor is used during
interpolation and NA's are ignored when calculating the average value for
a coarse cell from constituent finer cells. This argument was added
June 2023 to address
\href{https://github.com/birdflow-science/BirdFlowR/issues/12}{Issue #12}; it
allows comparison between the new default (TRUE) and the old behavior
which is reproduced with \code{FALSE}.  We switched to treating NA as zero
because NA frequently represents very dissimilar habitat to
nearby non-NA values, but in the calculations using NA assumest that the NA
cells are similar to nearby values.
\code{dummy_dynamic_mask} this is here primarily for testing during the
transition and may also eventually be dropped.}
}
\value{
returns a BirdFlow model object that lacks marginals, but is
otherwise complete.
}
\description{
Write a template BirdFlow object to an hdf5 file based on distribution data
downloaded with \pkg{ebirdst}. The object is complete except for marginals
and transitions.
}
\section{{Maximum number of parameters}}{


The maximum number of parameters that can be fit is machine dependent.
2023-02-10 we tested under different resolutions with "amewoo" and
identified bounds on the maximum.\tabular{lllll}{
   Machine \tab GPU Ram (GB) \tab Lower Bound (worked) \tab Upper Bound (failed) \tab Params / GB \cr
   titanx gpu \tab 12GB \tab 306804561 \tab 334693725 \tab 25567047 \cr
   m40 gpu \tab 24GB \tab 557395226 \tab 610352178 \tab 23224801 \cr
}


The number of parameters is the number of unmasked cells for the first
timestep + the total number of cells in the marginals which is calculated
from the dynamic mask.

If \code{gpu_ram} is used (and not \code{res} or \code{max_parameters} ) than
\code{max_parameters} is set to \verb{23,224,801 * gpu_ram} (lower of two values in
table above).

The heuristic to determine resolution given a maximum number of parameters
must estimate the number of cells covered by the data
at a different resolution, a noisy process, so it iteratively tries to find
the smallest resolution that doesn't exceed \code{max_params} and then rounds to
a slightly larger resolution (fewer parameters).
}

\examples{
\dontrun{

 bf <- preprocess_species("amewoo", tiff = FALSE, hdf5 = FALSE )
 plot(rasterize_distr(get_distr( bf, c(1, 26)), bf))

# Create clip polgyon as an sf object
# Use the extent rectangle but with western edge moved in
# The clip can be anything that terra::vect will process into a polygon
e <- ext(bf)
e[1] <- -1500000
coords <- matrix(c(e[1], e[3],
                   e[1], e[4],
                   e[2], e[4],
                   e[2], e[3],
                   e[1], e[3]), ncol = 2, byrow = TRUE)
sfc <- st_sfc(st_polygon(list(coords)), crs = crs(bf))
clip <- st_sf(data.frame(id = 1, geom = sfc))

bfc <- preprocess_species("amewoo", tiff = FALSE,
                         hdf5 = FALSE, clip = clip ) # clipped bird flow

 plot(rasterize_distr(get_distr(bfc, 1), bfc))


}
}
