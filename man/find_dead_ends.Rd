% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_dead_ends.R
\name{find_dead_ends}
\alias{find_dead_ends}
\title{function to identify inconsistencies in sparse BirdFlow models}
\usage{
find_dead_ends(x)
}
\arguments{
\item{x}{\code{BirdFlow} model}
}
\value{
a data.frame with columns:\tabular{ll}{
   \code{timestep} \tab the timestep associated with the dead end \cr
   \code{direction} \tab either \code{"forward"} or \code{"backward"} indicating which direction the dead end is encountered in \cr
   \code{i} \tab the index of the model state that has a dead end \cr
   \code{mar} \tab the marginal which leads into the dead end (this marginal has non-zero value in the i'th column if direction is forward and i'th row if direction is backward) \cr
   \code{x}, and \code{y} \tab the x and y coordinates corresponding with state \code{i} \cr
}


There will be a row for each dead end state, if no dead ends are found an
empty (zero row) data.frame is returned.
}
\description{
With sparsification (\code{\link[=sparsify]{sparsify()}}) it's possible to create marginals that
have dead end states which can be entered but not left.  This occurs when
one marginal has transitions into a state for which the next marginal
has no transitions out.
}
\details{
Consider two adjacent marginals the rows of the second and the columns of
the first both correspond with the species distribution for the timestep
between them. For every location in the model at that timestep
there are three possibilities (1) the first marginal's column doesn't sum
to zero and the second marginal's row does then there is a forward
transition into that state but no forward transition out and it's a
forward dead end.  If the situation is reversed and first marginals column
sums to zero and the second marginal's corresponding row does not than
there is a backward dead end -a dead end when projecting backwards in time.
If they both sum to zero the model is fine but that state is dropped.  \
If they both have non-zero sums than the corresponding state is a valid
model state that can be reached and exited in both directions (in time).

Dead ends result in lost density with \code{\link[=forecast]{forecast()}} and errors when
they are entered with \code{\link[=route]{route()}}. Based on initial testing the transitions
into the dead end are often low probability so routing may work most of the
time but occasionally fail when sampling results in the dead end state being
chosen. The error will occur with the subsequent iteration when attempting to
sample when all of thes states have zero probability.
}
\examples{
library(BirdFlowModels)
bf <- amewoo
head(find_dead_ends(amewoo))

}
