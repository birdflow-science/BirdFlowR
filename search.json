[{"path":"https://birdflow-science.github.io/BirdFlowR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to BirdFlowR","title":"Contributing to BirdFlowR","text":"welcome contributions suggestions!","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/CONTRIBUTING.html","id":"proposing-changes","dir":"","previous_headings":"","what":"Proposing changes","title":"Contributing to BirdFlowR","text":"Feel free propose changes submitting issues regardless whether intend submit pull request. intend submit pull request submitting issue good way get early feedback ideas write code.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to BirdFlowR","text":"’ve documented complete process given small size paucity pull requests aren’t sticklers consider pull request useful code even include everything . Fork clone package onto computer. haven’t done can use usethis::create_from_github(\"birdflow-science/BirdFlowR\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). can use: usethis::pr_init(\"brief-description--change\") preferred git tools. Edit code. See also Code style section . Create update documentation. BirdFlowR uses roxygen2 document functions structured comments function code. adding new function start documenting (RStudio) positioning cursor function body selecting “Insert Roxygen Skeleton” “Code” menu. functions except trivial helper functions documented Roxygen comments. function meant public delete “@export” Roxygen comment block add “@keywords internal”. Add tests. Tests use testthat package stored “/tests/testthat/” file starts “test-” code’s file name (usually function name). easiest way (RStudio) new file open active Source Editor Pane console run usethis::usetest(). create appropriate file open example test can edit (open file already exists). pull request addresses bug issue may want create failing test demonstrates issue make changes package. can run tests package devtools::test() (RStudio) test currently open file “Run Tests” button upper right source editor. Tests also run checking package. Rebuild documentation either using “Document” item “” menu within “Build” tab RStudio; Ctr+Shift+D; devtools::document(). convert Roxygen comments \".Rd\" files within \"man/\". \".Rd\" files never edited directly. Increment version DESCRIPTION file. Add news bullets top NEWS.md new heading current version. ’s good idea use “preview” button top code verify rendered correctly. Lint function , example, lintr::lint(\"R/function_name.R\"). Please lint unrelated code make harder see pull request . Spell Check Use devtools::spell_check() check package spelling errors. correct errors unrelated pull request. valid words flagged errors may add ./inst/WORDLIST. Check package devtools::check(). Commit git, create pull request. One way running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Optionally check code coverage. 10 minutes submitting pull request branch appear near top “Branch Context” drop coverage page. new code covered tests consider adding additional tests pushing new commit pull request branch - update pull request rerun coverage.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code style","title":"Contributing to BirdFlowR","text":"Code follow tidyverse style guide. use lintr::lint() lint files new code. lint otherwise unchanged code. general function stored file matches name. rule can broken closely related sets exported functions helper functions. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/CONTRIBUTING.html","id":"markdown-style","dir":"","previous_headings":"","what":"Markdown style","title":"Contributing to BirdFlowR","text":"Semantic line breaks preferred. first draft document created usethis::use_tidy_contributing(). heavily edited text still direct copy resulting tidyverse contributing guidelines. usethis BirdFlowR released MIT license.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 BirdFlowR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"BirdFlow Model Overview, Uses, and Limitations","text":"BirdFlow infers species migrate weekly distribution estimates produced eBird Status Trends project. ’s example input data BirdFlow, Status Trends animation weekly relative abundance American Woodcock: can clearly see “movement” population week week, explicit information individual birds moved. BirdFlow uses weekly relative abundance information Status Trends create model species migrates. model can generate synthetic routes predict individual birds likely move. example, synthetic routes American Woodcock:  example forecasts future locations bird particular location week January 4: plot shows forecasted distribution future locations given week bird starts green square week January 4. Scientists can use BirdFlowR package generate routes, make forecasts, using models provided BirdFlow team.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How it Works","title":"BirdFlow Model Overview, Uses, and Limitations","text":"understand appropriate uses limitations BirdFlow, ’s helpful understand little works. (Much information paper.) Formally, BirdFlow model probability distribution routes. image , saw 10 routes generated sampling probability distribution BirdFlow model. reasonable way think probability distribution, hence BirdFlow model, routes generates. example, sampled million routes learn nearly statistical properties distribution, routes start, end, much zig-zag, . properties want distribution—routes—? BirdFlow model learned fit adjusting probability distribution balance several criteria encoded loss function: locations birds week match Status Trends distribution week. example one million routes, take location along route week June 28, million locations match Status Trends relative abundance map week June 28. routes biologically realistic, example, zig-zag map move unrealistically far one week. achieved component loss function based distance migratory transitions. routes appropriately “dispersed”. Birds one location shouldn’t go exactly next location, fly completely random directions. BirdFlow uses entropy term loss function encourage enough dispersion.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"memorylessness","dir":"Articles","previous_headings":"","what":"“Memorylessness”","title":"BirdFlow Model Overview, Uses, and Limitations","text":"important property BirdFlow models “memoryless”: generating route, bird’s next location depends current location, full sequence past locations. words, “state” “memory” bird ’s current location. example, model track bird’s energetic reserves intended destination. Mathematically, model Markov chain. good computational statistical reasons choice, limits use ways describe . future, intend try different types models, always tension model complexity available data—fine-grained behavior hard learn Status Trends data. fact, memoryless model optimal BirdFlow loss function captures criteria described .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"interpretation-and-uses","dir":"Articles","previous_headings":"","what":"Interpretation and Uses","title":"BirdFlow Model Overview, Uses, and Limitations","text":"BirdFlow’s routes forecasts interpreted? ’s important remember synthetic routes routes real tracked birds. guarantee put together many synthetic routes, match population-level properties Status Trends data. , tune model routes biologically plausible: don’t travel farther needed, don’t zig-zag much, etc. BirdFlow models also tuned tracking data dispersion movements roughly matches tracked birds species—example, take real tracked bird forecast distribution next location, 90% time actual next location fall within 90% probability region forecasted distribution. BirdFlow exciting can synthesize forecast migration routes many species across entire range without needing extensive tracking data. general, expect BirdFlow capture coarse-scale properties species’ migration well, exciting potential uses: Provide synthetic migration routes match observed population-level properties Quantify broad-scale directionality movement Inform birds given location likely go next, came , example, help understand spread diseases like avian influenza Explore hypotheses migratory connectivity Compare statistics movement across species","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"BirdFlow Model Overview, Uses, and Limitations","text":"’s also important understand limitations BirdFlow. primary evidence used fit BirdFlow models Status Trends data. many different models (think: sets migration routes) match Status Trends data well. example, might choose one model birds migrate medium distance, another model birds migrate short distance others migrate long distance might match Status Trends equally well. BirdFlow fitting process parameters control types routes selected (e.g., many short hops vs. fewer longer hops, amount dispersion routes). paper tuned parameters match real routes tracked birds 11 species well possible, resulting models predicted movements tracked birds significantly better baseline model. However, expect BirdFlow’s synthetic routes forecasts match real movements every detail. specific limitations : Details individual routes number hops, length stopovers, lengths hops may may match real routes. Due memorylessness, BirdFlow routes don’t typically site fidelity (bird returns location year year). reason currently recommend using BirdFlow generate routes make forecasts period less one year, example, single migration season. Due memorylessness, BirdFlow distinguish subpopulations different migration strategies; instead mix two subpopulations. think major issue species subpopulations separated space time, BirdFlow users aware limitation consider light intended use. BirdFlow’s time step weekly model movements finer time scale, daily movements. BirdFlow uses grid represent locations model movements spatial scale finer grid resolution. BirdFlow uses Status Trends relative abundance data input requires adequate Status Trends coverage species’ range create model. models provide judged adequate coverage, can’t currently create models every species. Status Trends relative abundance estimates great, perfect. BirdFlow reproduce inaccuracies present Status Trends estimates.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"install-packages","dir":"Articles","previous_headings":"Setup","what":"Install packages","title":"BirdFlowR","text":"","code":"installed <- rownames(installed.packages()) if (!\"remotes\" %in% installed)   install.packages(\"remotes\") if (!\"rnaturalearthdata\" %in% installed)   install.packages(\"rnaturalearthdata\") remotes::install_github(\"birdflow-science/BirdFlowModels\") remotes::install_github(\"birdflow-science/BirdFlowR\", build_vignettes = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"load-libraries","dir":"Articles","previous_headings":"Setup","what":"Load libraries","title":"BirdFlowR","text":"","code":"library(BirdFlowModels) library(BirdFlowR) library(terra) #> terra 1.8.50 library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"load-model","dir":"Articles","previous_headings":"Setup","what":"Load model","title":"BirdFlowR","text":"BirdFlow Science team shared collection fitted models use BirdFlowR package. website includes reports species. can also access collection index package. can load model collection based model column index.Note: vignette block isn’t executed. loads smaller example model instead efficiency package building testing, use one science!","code":"# Load and print index index <- load_collection_index() #> Downloading collection index print(index[, c(\"model\", \"common_name\")]) #>                model        common_name #> 1 amewoo_prebreeding  American Woodcock #> 3 buwtea_prebreeding   Blue-winged Teal #> 4 lobcur_prebreeding Long-billed Curlew #> 5 swahaw_prebreeding    Swainson's Hawk # Load a specific model bf <- load_model(\"amewoo_prebreeding\") # caches locally and loads from cache bf <- BirdFlowModels::amewoo # example and test dataset"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"access-basic-information","dir":"Articles","previous_headings":"","what":"Access basic information","title":"BirdFlowR","text":"dim(), nrow(), ncol() report raster dimensions associated model. n_active total number cells BirdFlow model can route birds subset cells raster.n_transitions() n_distr() report temporal dimensions. model is_cyclical(), equal.","code":"# Methods for base R functions: dim(bf) #> [1] 22 31 c(nrow(bf), ncol(bf)) #> [1] 22 31 bf # same as print(bf) #> American Woodcock BirdFlow model #>   dimensions   : 22, 31, 52  (nrow, ncol, ntimesteps) #>   resolution   : 150000, 150000  (x, y) #>   active cells : 342 #>   size         : 12.5 Mb  # BirdFlowR functions n_active(bf) #> [1] 342 n_transitions(bf) #> [1] 52 n_timesteps(bf) #> [1] 52  # Contents has_marginals(bf) #> [1] TRUE has_distr(bf) #> [1] TRUE has_transitions(bf) #> [1] FALSE is_cyclical(bf) #> [1] TRUE"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"species-information-and-metadata","dir":"Articles","previous_headings":"","what":"Species information and metadata","title":"BirdFlowR","text":"species_info() get_metadata() take BirdFlow object first argument. optional second argument allows specifying specific item, omitted list returned available information. species(bf) shortcut species_info(bf, \"common_name\") Use ?species_info() see descriptions available information. Dates associated migration resident seasons likely useful.","code":"species(bf) #> [1] \"American Woodcock\" species(bf, \"scientific\") #> [1] \"Scolopax minor\" species_info(bf, \"prebreeding_migration_start\") #> [1] \"2021-01-18\" si <-  species_info(bf) # list with all species information md <- get_metadata(bf)  # list with all metadata get_metadata(bf, \"birdflow_model_date\") # date model was exported from python #> [1] \"2023-11-21 17:19:27.009766\"  validate_BirdFlow(bf)  # throws error if there are problems"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"spatial-aspects","dir":"Articles","previous_headings":"","what":"Spatial aspects","title":"BirdFlowR","text":"BirdFlow models based raster representation time series species distributions contain spatial information necessary recreate distributions define raster positioned space. BirdFlowR uses terra package import raster data provides BirdFlow methods functions defined terra package - can use functions BirdFlow objects. crs() returns coordinate reference system - useful need project data match BirdFlow object. res(), xres(), yres() describe dimensions individual cells model. ext() returns terra extent object.compare_geom() tests extent, resolution, CRS two objects . BirdFlowR includes methods compare BirdFlow models terra objects. BirdFlow objects also play nicely sf package.","code":"# Methods for terra functions: a <- crs(bf) # well known text (long) crs(bf, proj = TRUE)  # proj4 string #> [1] \"+proj=laea +lat_0=39.161 +lon_0=-85.094 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\" res(bf) #> [1] 150000 150000 c(xres(bf), yres(bf)) # same as res(bf) #> [1] 150000 150000 ext(bf) #> SpatExtent : -2550000, 2100000, -1650000, 1650000 (xmin, xmax, ymin, ymax) c(xmin(bf), xmax(bf), ymin(bf), ymax(bf)) # same as ext(bf) #> [1] -2550000  2100000 -1650000  1650000  # Compare geometries - do they have the same CRS, extent, and cell size compareGeom(bf, rast(bf)) #> [1] TRUE bb <- sf::st_bbox(bf) crs <- sf::st_crs(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"retrieve-and-plot-distributions","dir":"Articles","previous_headings":"","what":"Retrieve and plot distributions","title":"BirdFlowR","text":"distribution BirdFlow stored vector values correspond active cells (n_active()) model. Multiple distributions stored matrices n_active() rows column distribution. can retrieve distributions format get_distr(). Use timestep, character dates, date objects, “” specify distributions retrieve. Retrieve first distribution compare length number active cells. Get 5 distributions, result matrix column distribution row active cell. can also specify distributions dates, use “” retrieve distributions. Use rasterize_distr() convert distribution SpatRaster defined terra package. second argument, BirdFlow model, needed spatial information contains. Alternatively convert directly BirdFlow SpatRaster rast(). second (optional) argument accepts inputs get_distr().  BirdFlowR provides convenience wrappers functions rnaturalearth load vector data crop transform make suitable plotting BirdFlow output. Note: rnaturalearth fully transitioned away legacy packages may see warning , BirdFlowR use legacy packages data formats .","code":"d <- get_distr(bf, 1) # get first timestep distribution length(d)  # 1 distribution so d is a vector #> [1] 342 n_active(bf)  # its length is the the number of active cells in the model #> [1] 342 d <- get_distr(bf, 26:30) dim(d) #> [1] 342   5 head(d, 3) #>       time #> i      June 28       July 6      July 13 July 20      July 27 #>   [1,]       0 0.000000e+00 0.000000e+00       0 0.000000e+00 #>   [2,]       0 9.342922e-06 8.769396e-05       0 1.607396e-06 #>   [3,]       0 1.499294e-05 4.842432e-05       0 1.748452e-06 d <- get_distr(bf, \"2022-12-15\") # from character date d <- get_distr(bf, \"all\")  # all distributions d <- get_distr(bf, Sys.Date())  # Using a Date object d <- get_distr(bf, c(1, 26)) # winter and summer r <- rasterize_distr(d, bf) # convert to SpatRaster r <- rast(bf) # all distributions r <- rast(bf, c(1, 26))  # 1st, and 26th timesteps. plot(r) r <- rast(bf, species_info(bf, \"prebreeding_migration_start\")) plot(r) coast <- get_coastline(bf)  # lines plot(coast, add = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"forecasting","dir":"Articles","previous_headings":"","what":"Forecasting","title":"BirdFlowR","text":"section sample single starting location winter distribution project forward. generate distribution predicted breeding grounds birds wintered starting location. Set predict parameters.","code":"start <- 1     #  winter     end <-  26     # summer"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"sample-starting-distribution","dir":"Articles","previous_headings":"Forecasting","what":"Sample starting distribution","title":"BirdFlowR","text":"sample_distr() sample one input distribution select single location per distribution. result one distributions ones selected location(s) zero elsewhere.","code":"set.seed(0) d <- get_distr(bf, start) location <- sample_distr(d)  print(i_to_xy(which(as.logical(location)), bf))  # starting coordinates #>         x       y #> 1 -225000 -525000"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"project-forward-from-this-location-to-summer","dir":"Articles","previous_headings":"Forecasting","what":"Project forward from this location to summer","title":"BirdFlowR","text":"predict() returns distribution time matrix one column per timestep. plot shows birds winter particular location likely year progresses ultimately might spend summer. probability density spreads weeks progress.  Additionally, can calculate difference projected distribution distribution species whole timestep.","code":"f <- predict(bf, distr = location, start = start, end = end,              direction = \"forward\")  r <- rasterize_distr(f[, c(1, 7, 14, 19)], bf) plot(r) projected <- f[, ncol(f)]  # last projected distribution diff <-  projected - get_distr(bf, end) plot(rasterize_distr(diff, bf))"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"generate-synthetic-routes","dir":"Articles","previous_headings":"","what":"Generate synthetic routes","title":"BirdFlowR","text":"sample locations American Woodcock winter distribution generate routes summer grounds. Set route parameters.","code":"n_positions <-  15 # number of starting positions start <- 1         # starting timestep (winter) end <- 26          # ending timestep (summer)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"generate-starting-locations","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Generate starting locations","title":"BirdFlowR","text":"First extract winter distribution, use sample_locations() n = n_positions sample input distribution repeatedly. result matrix column single ‘1’ representing sampled location. Plot starting (winter) distribution sampled locations.","code":"d <- get_distr(bf, start) locations  <- sample_distr(d, n = n_positions, bf = bf, format = \"xy\") x <- locations$x y <- locations$y winter <- rasterize_distr(d, bf) plot(winter) points(x, y)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"generate-routes","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Generate routes","title":"BirdFlowR","text":"route() generate synthetic routes starting position. route() returns BirdFlowRoutes object $data element row timestep route, also includes additional spatial, temporal, species information BirdFlow object. route() function can sample starting locations distribution starting timestep following equivalent preceding two sections. can specify date range arguments supported lookup_timestep_sequence() alternative slightly different start end dates use season argument. route prebreeding migration.","code":"rts <- route(bf, x_coord = x, y_coord = y, start = start, end = end) head(rts$data, 4) #>   route_id      x       y   i      lon      lat timestep       date route_type #> 1        1 675000 -525000 271 -77.7671 34.19035        1 2021-01-04  synthetic #> 2        1 675000 -525000 271 -77.7671 34.19035        2 2021-01-11  synthetic #> 3        1 675000 -525000 271 -77.7671 34.19035        3 2021-01-18  synthetic #> 4        1 675000 -525000 271 -77.7671 34.19035        4 2021-01-25  synthetic #>   stay_id stay_len #> 1       1        3 #> 2       1        3 #> 3       1        3 #> 4       1        3 rts2 <- route(bf,  n = n_positions,  start = start, end = end) rts3 <- route(bf, n = n_positions, season = \"prebreeding\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"using-base-r-plotting-to-plot-routes","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Using base R plotting to plot routes","title":"BirdFlowR","text":"Plot route lines summer distribution along points starting ending positions.","code":"d <- get_distr(bf, end) summer <- rasterize_distr(d, bf)  line_col <- rgb(0, 0, 0, .2) pt_col <- rgb(0, 0, 0, .5)  plot(summer) points(x, y, cex = .4, col = pt_col, pch = 16) # starting points  rts_sf <- sf::st_as_sf(rts$data, coords = c(\"x\", \"y\"), crs = rts$geom$crs) lines_sf <- rts_sf |>   dplyr::group_by(route_id) |>   dplyr::summarize(geometry = st_combine(geometry)) |>   sf::st_cast(\"LINESTRING\")  plot(lines_sf, add = TRUE, col = line_col)  # routes  end_pts <- rts$data[rts$data$timestep == end, ]  # end points points(x = end_pts$x, y = end_pts$y,        cex = 0.4, pch = 12, col = pt_col)  title(main = species(bf))"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"or-use-the-plot-method","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Or use the plot() method","title":"BirdFlowR","text":"plot() visualize Routes BirdFlowRoutes objects time color gradient stop point dots indicate long bird location.","code":"plot(rts, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"standard-install","dir":"Articles","previous_headings":"","what":"Standard install","title":"Detailed installation instructions","text":"uses R RStudio installed directly system installed skip step 3. Install R CRAN - follow links system upper right. ’m currently using R version 4.5.0 (2025-04-11) think 4.2.x work. Install RStudio IDE isn’t strictly necessary, RStudio significant upgrade R’s standard GUI. Install required R packages. Open RStudio run following console. Package dependencies can pain. doesn’t work can also try alternative method , also executed RStudio console. neither methods work last option try specific troublesome packages use RStudio’s “Install Packages” top “Tools” menu.","code":"installed <- rownames(installed.packages()) if (!\"remotes\" %in% installed)   install.packages(\"remotes\") if (!\"rnaturalearthdata\" %in% installed)   install.packages(\"rnaturalearthdata\") remotes::install_github(\"birdflow-science/BirdFlowModels\") remotes::install_github(\"birdflow-science/BirdFlowR\", build_vignettes = TRUE) installed <- rownames(installed.packages()) if (!\"pak\" %in% installed)   install.packages(\"pak\")  pak::pkg_install(\"rnaturalearthdata\", ask = FALSE) pak::pkg_install(\"birdflow-science/BirdFlowModels\", ask = FALSE, ) pak::pkg_install(\"birdflow-science/BirdFlowR\", ask = FALSE,                  dependencies = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"docker","dir":"Articles","previous_headings":"","what":"Docker","title":"Detailed installation instructions","text":"Alternatively can install Dockerfile ’s one can use Dockerfile Linux/MacOS (Windows similar). Download install Docker Desktop. computer Apple Silicon chip (e.g., M1 M2), Docker Desktop go Settings > General ensure “Use Virtualization Framework” checked, go Features Development > check “Use Rosetta x86/amd64 emulation Apple Silicon”. Apply settings restart Docker Desktop needed. Ensure Docker Desktop running. Clone BirdFlowR package GitHub. Go top level BirdFlowR directory, build image Dockerfile, tag image ‘birdflow’. take long time first time need download rocker/geospatial: image Docker Hub, starting point install custom packages via Dockerfile. future builds machine, rocker/geospatial already cached Docker, needs re-install custom packages. build step really needs happen want use newer version BirdFlowR repo. See also Rocker RStudio images. Launch Docker container image, launch RStudio Server instance container. ’re locally computer, can use version skip password. Specifying IP address way make accessible computer, according Rocker page. ’re computers, make sure include ports, require authentication: see message saying services started, point web browser localhost:8787/ use RStudio image. ’re done, go back terminal window started docker services, hit Control-C. send kill signal container supporting RStudio server process. Rocker webpage shows ways persist directories settings container host well, don’t lose RStudio settings local work time launch/close container.","code":"cd ~/BirdFlowR docker build -t birdflow . --no-cache docker run --platform linux/amd64 --rm -ti -e DISABLE_AUTH=true -p 127.0.0.1:8787:8787 birdflow docker run --platform linux/amd64 --rm -ti -e PASSWORD=yourpassword -p 8787:8787 birdflow"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"ebirdst","dir":"Articles","previous_headings":"","what":"ebirdst","title":"Detailed installation instructions","text":"want preprocess species model fitting need ebirdst access code must request via online form. code run (R RStudio console): “XXXXX” access key. restart R.","code":"library(ebirdst) set_ebirdst_access_key(\"XXXXX\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"test","dir":"Articles","previous_headings":"","what":"Test","title":"Detailed installation instructions","text":"Run lines see see ’ve installed two BirdFlow packages dependencies.","code":"library(BirdFlowModels) library(BirdFlowR) library(terra) bf <- BirdFlowModels::amewoo print(bf) plot(rast(bf, 1)) #> American Woodcock BirdFlow model #>   dimensions   : 22, 31, 52  (nrow, ncol, ntimesteps) #>   resolution   : 150000, 150000  (x, y) #>   active cells : 342 #>   size         : 12.5 Mb"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Calculate movement among polygons","text":"goal estimate movement among polygons defined period time using BirdFlow model. result square movement matrix rows correspond starting polygons columns ending polygons. Values proportion total population making movement, can scaled represent numbers birds. Optionally value can adjusted area two associated polygons get mean movement per square km. initial use case create predictor model avian influenza spread. example polygons US States variable (polys) sole required column name (id) kept deliberately generic code make sense set polygons. likely turned function vignette remain useful demonstration work BirdFlow models.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"the-approach","dir":"Articles","previous_headings":"Overview","what":"The approach:","title":"Calculate movement among polygons","text":"Load model, set start end times connectivity window, set total population. Download prepare polygons Calculate overlap active cells BirdFlow model polygons. Generate starting distributions polygon represent portion species distribution polygon start movement. Run predict() using distributions start end time. Drop time dimension result preserving just end distributions. Convert ending distribution model cells polygons. Optionally, multiply species’ total population (within Americas) convert proportion population estimated number birds Optionally, divide area starting ending state make estimates per unit area - eliminating polygon size factor connectivity. step appropriate use cases.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"load-model-and-set-parameters","dir":"Articles","previous_headings":"","what":"Load model and set parameters","title":"Calculate movement among polygons","text":"example uses American Woodcock dataset BirdFlowModels small runs fast isn’t fully vetted scientific use. Use load_model() real work.","code":"bf <- BirdFlowModels::amewoo  # you will likely use load_model() instead start <- BirdFlowR::lookup_timestep(\"2024-01-15\", bf) end <- BirdFlowR::lookup_timestep(\"2024-03-20\", bf) population <- 3500000"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"visualize-the-starting-distribution-from-the-model","dir":"Articles","previous_headings":"Load model and set parameters","what":"Visualize the starting distribution from the model","title":"Calculate movement among polygons","text":"","code":"plot_distr(get_distr(bf, start), bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"load-polygons","dir":"Articles","previous_headings":"","what":"Load Polygons","title":"Calculate movement among polygons","text":"Use get_states() get state boundaries within BirdFlow object extent theNatural Earth data set. polygon shapefile already use polys <- sf::read_sf(shapefile_path) skip section.","code":"#  Note this code requires the rnaturalearthhighres package so is not # run when building the vignette.  polys <- get_states(bf, country = \"United States of America\",                     keep_buffer = TRUE,                     keep_attributes = TRUE)  polys <- dplyr::select(polys, NAME = gn_name)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"prepare-polygons-for-analysis","dir":"Articles","previous_headings":"","what":"Prepare polygons for analysis","title":"Calculate movement among polygons","text":"Add id field; example state names. Transform match BirdFlow Coordinate Reference System (CRS). Calculate area square kilometers polygon (sq_km). Add centroid coordinates (x, y) BirdFlow CRS.","code":"# Add generic \"id\" column (use state name) polys$id <- polys$NAME  # Order by id (optional) polys <- polys[order(polys$id), ]  # Transform to match the BirdFlow model CRS polys <- sf::st_transform(polys, crs(bf))  # add sq_km to polygons # This assumes the projection is in meters which is true for BirdFlow models polys$sq_km <- sf::st_area(polys)  / 1000^2  |> as.vector()  # Add centroids (only used for the plotting at end of document) centroids <- sf::st_centroid(polys[, \"geometry\"]) |> sf::st_coordinates() colnames(centroids) <- c(\"x\", \"y\") polys <- cbind(polys, centroids)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"calculate-overlap-between-active-birdflow-cells-and-polygons","dir":"Articles","previous_headings":"","what":"Calculate overlap between active BirdFlow cells and polygons","title":"Calculate movement among polygons","text":"Make overlap matrix. Rows correspond active cells, columns external polygons. values proportion cell overlaps polygon.","code":"# Convert active cells to polygons cell_polys <- rasterize_distr(seq_len(n_active(bf)), bf, format = \"terra\") |>  terra::as.polygons() |>   sf::st_as_sf() names(cell_polys)[1] <- \"i\" # BirdFlow location index \"i\"  # Intersect cells with polygons suppressWarnings( # Attribute values assumed to be spatially constant...   intersection_polys <- sf::st_intersection(cell_polys, polys) ) intersection_polys <- intersection_polys[, c(\"i\", \"id\")] intersection_polys$area <- sf::st_area(intersection_polys) sq_m_per_cell <- prod(res(bf)) intersection_polys$prop_of_cell <- intersection_polys$area / sq_m_per_cell  # Calculate the proportion of each cell that overlaps each polygon # Rows = active cells, columns = polygons overlap <- matrix(0, nrow = n_active(bf), ncol = nrow(polys),                   dimnames = list(i = seq_len(n_active(bf)),                                   id = polys$id)) intersection_polys$row <- match(intersection_polys$i, seq_len(n_active(bf))) intersection_polys$col <- match(intersection_polys$id, polys$id) row_col_index <- intersection_polys[, c(\"row\", \"col\")] |>   sf::st_drop_geometry() |>   as.matrix() overlap[row_col_index] <- intersection_polys$prop_of_cell |> as.vector()"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"build-initial-distributions","dir":"Articles","previous_headings":"","what":"Build initial distributions","title":"Calculate movement among polygons","text":"essentially clips initial distribution separately polygon assigning values boundary cells proportion overlap polygon. Note, single BirdFlowR distribution vector length n_active(bf) multiple can stored matrix n_active(bf) rows. matrix column (distribution) polygon polys.","code":"start_distr <- matrix(get_distr(bf, start),                               nrow = n_active(bf),                               ncol = nrow(polys),                               byrow = FALSE,                               dimnames = list(i = NULL,                              start_poly = polys$id))  start_distr <- start_distr * overlap"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"visualize-the-distribution-for-one-polygon","dir":"Articles","previous_headings":"Build initial distributions","what":"Visualize the distribution for one polygon","title":"Calculate movement among polygons","text":"Visualize initial distribution polygon highest initial abundance (North Carolina).","code":"sel <- which.max(apply(start_distr, 2, sum)) plot_distr(start_distr, bf, subset = sel) +   ggplot2::geom_sf(data = polys,                    inherit.aes = FALSE,                    linewidth = 0.2,                    color = \"black\",                    fill = NA)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"project-the-distributions-forward","dir":"Articles","previous_headings":"","what":"Project the distributions forward","title":"Calculate movement among polygons","text":"Use BirdFlowR::predict() project distributions forward. multiple input distributions output three dimensional array. Select last element third dimension get just ending distributions matrix. values distributions represent proportion population started corresponding polygon (columns) ended active cell (rows).","code":"# Project distributions forward to end date pred <- predict(bf, distr = start_distr, start = start, end = end)  # Just keep last distribution end_distr <- pred[, , dim(pred)[3]]  # Preserve dimension names dimnames(end_distr) <- dimnames(start_distr)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"visualize-the-ending-distribution","dir":"Articles","previous_headings":"Project the distributions forward","what":"Visualize the ending distribution","title":"Calculate movement among polygons","text":"shows ending distribution birds started North Carolina.","code":"plot_distr(end_distr, bf, sel) +   ggplot2::geom_sf(data = polys,                    inherit.aes = FALSE,                    linewidth = 0.2,                    color = \"black\",                    fill = NA)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"collapse-the-ending-cells-into-ending-polygons","dir":"Articles","previous_headings":"","what":"Collapse the ending cells into ending polygons","title":"Calculate movement among polygons","text":"Convert end_distr destination cells destination polygons based overlap proportions overlap. first “slow” way perhaps easier understand. faster way produces result matrix multiplication. Either way move matrix rows starting polygons, columns destination polygons, values proportion population making transition two.","code":"slow <- FALSE if (slow) {   # Here we loop through each cell of the movement matrix filling in values   # one by one.   n <- nrow(polys)   move <- matrix(NA, n, n, dimnames = list(from = polys$id, to = polys$id))   for (from_i in seq_len(n)) for (to_i in seq_len(n)) {     # Rows are source polygons, columns for destination polygons.     # Values are the proportion of the total population making the transition     # between the corresponding polygons.     move[from_i, to_i] <- sum(end_distr[, from_i] * overlap[, to_i])   } } else {   # Use matrix multiplication to do the same thing faster   move <- t(end_distr) %*% overlap   dimnames(move) <- list(from = polys$id, to = polys$id) }"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"visualize-the-polygonized-end-distribution","dir":"Articles","previous_headings":"Collapse the ending cells into ending polygons","what":"Visualize the polygonized end distribution","title":"Calculate movement among polygons","text":"Plot proportion total population moved North Carolina state.","code":"polys$Proportion  <- move[sel, ]  gradient_colors <-       c(\"#EDDEA5\", \"#FCCE25\", \"#FBA238\", \"#EE7B51\", \"#DA596A\", \"#BF3984\",         \"#9D189D\", \"#7401A8\", \"#48039F\", \"#0D0887\")  ggplot2::ggplot(data = polys) +   ggplot2::geom_sf(ggplot2::aes(fill = Proportion)) +   ggplot2::scale_fill_gradientn(colors = gradient_colors) +   ggplot2::ggtitle(paste0(species(bf), \" movement from \", polys$id[sel]),                    subtitle = paste0(lookup_date(start, bf), \" to \",                                      lookup_date(end, bf)))"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"adjust-for-population-optional","dir":"Articles","previous_headings":"","what":"Adjust for population (optional)","title":"Calculate movement among polygons","text":"can multiply movement total population species estimated number individuals making movement. likely necessary aggregate compare output across species.","code":"# Convert to absolute numbers of Birds expected to move between # each pair of polygons move_count  <- move * population"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"adjust-for-area-optional","dir":"Articles","previous_headings":"","what":"Adjust for area (optional)","title":"Calculate movement among polygons","text":"Adjusting area might appropriate depending application. goal capture total magnitude movement source destination polygon adjust area. However, initial use case points specified states represent entire state failing adjust state area introduce bias - essentially inflating movement points fell bigger states. Similarly want average per unit area movement states isn’t biased state area adjust area. adjustment done dividing number individuals moving two polygons area polygon sq km produce expecting number move per sq km end. Clearly, though capture fine scale variability within captured original BirdFlow cells.","code":"# Adjust for area if both the source and destination polgons n <- nrow(polys) from_area <- matrix(polys$sq_km, n, n, byrow = FALSE) to_area <- matrix(polys$sq_km, n, n, byrow = TRUE) move_area <- move_count / from_area / to_area"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Polygons.html","id":"visualize-movement","dir":"Articles","previous_headings":"","what":"Visualize movement","title":"Calculate movement among polygons","text":"Plot non-zero estimated counts birds moving polygons indicate magnitude line thickness. Lines shown movements least 1000 individuals.","code":"plot_count_threshold <- 1000 # only plot lines for big movements n <- nrow(polys) long <- data.frame(from =  rep(polys$id, times = n),                    to = rep(polys$id, each = n),                    count = as.vector(move_count))  # Add coordinates of centroids of to and from polygons f_mv <- match(long$from, polys$id) long$f_x <- polys$x[f_mv] long$f_y <- polys$y[f_mv] t_mv <- match(long$to, polys$id) long$t_x <- polys$x[t_mv] long$t_y <- polys$y[t_mv]  long <- long[long$count >= plot_count_threshold, ]  ggplot2::ggplot(long) +   ggplot2::geom_segment(ggplot2::aes(x = f_x, y = f_y,                                      xend = t_x, yend = t_y,                                      linewidth = count),                         color = rgb(0, 0, 0, .15)) +   ggplot2::scale_linewidth(range = c(0.2, 4)) +   ggplot2::theme(axis.title = ggplot2::element_blank(),                  strip.background = ggplot2::element_blank()) +   ggplot2::geom_sf(data = polys,                    inherit.aes = FALSE,                    linewidth = 0.2,                    color = \"black\",                    fill = NA)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"load-r-packages-and-set-species-","dir":"Articles","previous_headings":"","what":"Load R packages and set species.","title":"Preprocess and sparsify","text":"“example_data” allows processing ebirdst example data, doesn’t require access code. plan preprocessing species sure setup ebirdst access code. ’ll also setup destination folder purpose vignette ’m going use temporary folder. optionally set directory choice somewhere permanent accessible. code add BirdFlowModels directory home directory, use model output. block run building vignette.","code":"library(BirdFlowR) library(ebirdst) library(terra) species <- \"example_data\"  # optionally, set species here dir <- tempdir() dir <- \"~/BirdFlowModels\" dir.create(dir, showWarnings = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"preprocess","dir":"Articles","previous_headings":"","what":"Preprocess","title":"Preprocess and sparsify","text":"Now can preprocess species. gb parameter one way setting resolution; specifies amount ram available machine intend fit BirdFlow model - python Jax, probably cluster. , set gb small value keep file size memory requirements small.","code":"# Note: #   amewoo 100km resolution is equivalent to gpu_ram = 1 #   amewoo 75 km resolution is equivalent to gpu_ram = 2.9  bf <- preprocess_species(species, dir, gpu_ram = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"fit-models","dir":"Articles","previous_headings":"","what":"Fit models","title":"Preprocess and sparsify","text":"python. Come back ’re done.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"import","dir":"Articles","previous_headings":"","what":"Import","title":"Preprocess and sparsify","text":"rest vignette predicated .hdf5 file fitted model. Set path file import .","code":"model_file <- file.path(dir, \"fitted.hdf5\") bf <- import_birdflow(model_file)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"sparsify","dir":"Articles","previous_headings":"","what":"Sparsify","title":"Preprocess and sparsify","text":"’s good idea sparsify immediately importing reduce memory usage processing time models. state method eliminates transitions model states (locations space time) ebirdst distribution zero. states thus removed model. can read sparsification methods help sparasify().","code":"bf <- sparsify(bf, method = \"state\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"save-sparse-model","dir":"Articles","previous_headings":"","what":"Save sparse model","title":"Preprocess and sparsify","text":"Saving sparse model save time disk space want use later. write serialized R object fast efficient portable software. later session read . See vignette('BirdFlowR') examples routing forecasting BirdFlow objects.","code":"sparse_file <- file.path(dir, \"sparse.Rds\")  # change saveRDS(bf, file = sparse_file) bf <- readRDS(sparse_file)"},{"path":"https://birdflow-science.github.io/BirdFlowR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Plunkett. Author, maintainer. BirdFlow-Science. Copyright holder. National Science Foundation. Funder.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Plunkett E (2025). BirdFlowR: Predict Visualize Bird Movement. R package version 0.1.0.9073, https://birdflow-science.github.io/BirdFlowR/.","code":"@Manual{,   title = {BirdFlowR: Predict and Visualize Bird Movement},   author = {Ethan Plunkett},   year = {2025},   note = {R package version 0.1.0.9073},   url = {https://birdflow-science.github.io/BirdFlowR/}, }"},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"birdflowr-","dir":"","previous_headings":"","what":"Predict and Visualize Bird Movement","title":"Predict and Visualize Bird Movement","text":"R package predict changes bird distributions generate synthetic migration routes based BirdFlow models. package development yet formally released. Function names arguments may change.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Predict and Visualize Bird Movement","text":"Install just package: install example data vignette: See vignette(\"Installation\") troubleshooting installation options.","code":"if(!require(\"remotes\"))   install.packages(\"remotes\")  remotes::install_github(\"birdflow-science/BirdFlowR\") installed <- rownames(installed.packages()) if(!\"remotes\" %in% installed)   install.packages(\"remotes\") if(!\"rnaturalearthdata\" %in% installed)   install.packages(\"rnaturalearthdata\") remotes::install_github(\"birdflow-science/BirdFlowModels\") remotes::install_github(\"birdflow-science/BirdFlowR\", build_vignettes = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Predict and Visualize Bird Movement","text":"two primary functions predict() project distributions route() generate synthetic routes. route_migration() wrapper route() automates sampling locations distribution start migration setting start end dates route migration window. can use create synthetic routes species.  Visualize movement BirdFlow model timestep.","code":"library(BirdFlowR) library(BirdFlowModels)  bf <- amewoo   species(bf) #> [1] \"American Woodcock\"  # Generate routes for the prebreeding migration  rts <- route(bf, n = 10, season = \"prebreeding\")  # Plot routes plot_routes(rts, bf) plot_movement_vectors(bf, start = 12)"},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Predict and Visualize Bird Movement","text":"vignette(\"BirdFlowR\") longer introduction package, use predict() route() project bird distributions movement. vignette(\"Installation\") detailed installation instructions. vignette(\"Preprocess\") covers downloading formatting data model fitting preprocess_species(), importing fitted models import_birdflow(), reducing model size sparsify(). BirdFlow: Learning Seasonal Bird Movements Citizen Science Data Miguel Fuentes, Benjamin M. Van Doren, Daniel Fink, Daniel Sheldon bioRxiv 2022.04.12.488057; doi: https://doi.org/10.1101/2022.04.12.488057","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal (private) routes and intervals class creation functions — Routes-internal","title":"Internal (private) routes and intervals class creation functions — Routes-internal","text":"Internal (private) functions create validate Routes, BirdFlowRoutes, BirdFlowIntervals objects. functions ensure input data meets required structure standard use within BirdFlow models.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes-internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal (private) routes and intervals class creation functions — Routes-internal","text":"","code":"new_Routes(data, species, source)  BirdFlowRoutes(   data,   species,   metadata,   geom,   dates,   source = NULL,   sort_id_and_dates = TRUE,   reset_index = FALSE,   stay_calculate_col = \"date\" )  new_BirdFlowRoutes(   data,   species,   metadata,   geom,   dates,   source,   stay_calculate_col = \"date\",   sort_id_and_dates = FALSE )  BirdFlowIntervals(data, species, metadata, geom, dates, source = NULL)  new_BirdFlowIntervals(data, species, metadata, geom, dates, source)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes-internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal (private) routes and intervals class creation functions — Routes-internal","text":"data data frame containing route/interval data Routes, BirdFlowRoutes BirdFlowIntervals. species Either single character passed ebirdst::get_species() lookup species information list species metadata must include common_name can optionally also include scientific_name  species_code standard BirdFlow species metadata. See species_info() description full list. source character string indicating source data. metadata list additional metadata. geom list describing spatial geometry, nrow, ncol, crs, mask. dates data frame date-related information, including date, start, end, timestep. sort_id_and_dates Logical. data sorted route_id dates? reset_index Logical. index data frame reset sorting? stay_calculate_col column name calculating stay_id stay_len BirdFlowRoutes object. Defaults date.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes-internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal (private) routes and intervals class creation functions — Routes-internal","text":"function returns S3 object corresponding class (Routes, BirdFlowRoutes, BirdFlowIntervals).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes-internal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal (private) routes and intervals class creation functions — Routes-internal","text":"Routes(): Creates Routes object data frame. BirdFlowRoutes(): Creates BirdFlowRoutes object, extending Routes additional BirdFlow-specific spatial temporal information. BirdFlowIntervals(): Creates BirdFlowIntervals object, representing intervals timesteps BirdFlow data. objects internally validated creation, ensuring required columns, valid data types, proper formats. Non-exported new_* functions handle final assembly object validation.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes-internal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal (private) routes and intervals class creation functions — Routes-internal","text":"","code":"# Examples here use private functions so can't be run except after # devtools::load_all() during package development. if (FALSE) { # \\dontrun{  # Create a Routes object route_df <- data.frame(   route_id = c(\"001\", \"001\", \"001\", \"001\", \"001\",   \"003\", \"003\", \"003\", \"004\"),   date = as.Date(c(\"2025-01-01\", \"2025-01-08\", \"2025-01-15\", \"2025-01-21\",   \"2025-02-10\", \"2025-03-01\", \"2025-05-01\", \"2025-06-01\", \"2025-05-01\")),   lon = c(-75.0060, -75.0060, -74.0060, -87.6298, -87.6298, -87.6298,   -89.6298, -85.6298, -95.3698),   lat = c(39.7128, 39.7128, 40.7128, 41.8781, 41.8781, 41.8781,   42.8781, 40.8781, 29.7604),   route_type = c(\"tracking\", \"tracking\", \"tracking\", \"tracking\",   \"tracking\", \"motus\", \"motus\", \"motus\", \"motus\") ) species <- list(   species_code = \"amewoo\",   scientific_name = \"Scolopax minor\",   common_name = \"American Woodcock\" ) sources <- \"Unknown sources\" routes_obj <- Routes(route_df, species = species, source = sources)  # Create a BirdFlowRoutes object ## 1. convert from `Routes` bf <- BirdFlowModels::amewoo birdflow_route_df <- routes_obj |> as_BirdFlowRoutes(bf = bf) # the species, metadata, and sources will be inherited from the bf object.  ## 2. Directly from dataframe birdflow_route_df <- data.frame(   route_id = c(\"001\", \"001\", \"001\", \"001\", \"001\", \"003\", \"003\",   \"003\", \"004\"),   date = as.Date(c(     \"2025-01-01\", \"2025-01-08\", \"2025-01-15\", \"2025-01-21\", \"2025-02-10\",     \"2025-03-01\", \"2025-05-01\", \"2025-06-01\", \"2025-05-01\"   )),   lon = c(-75.0060, -75.0060, -74.0060, -87.6298, -87.6298, -87.6298,   -89.6298, -85.6298, -95.3698),   lat = c(39.7128, 39.7128, 40.7128, 41.8781, 41.8781, 41.8781, 42.8781,   40.8781, 29.7604),   x = c(1000, 2000, 1000, 2000, 1000, 2000, 1000, 2000, 1000),   y = c(1000, 2000, 1000, 2000, 1000, 2000, 1000, 2000, 1000),   i = as.integer(c(1, 2, 1, 2, 1, 2, 1, 2, 1)),   timestep = as.integer(c(1, 2, 3, 4, 5, 1, 2, 3, 1)),   route_type = c(     \"tracking\", \"tracking\", \"tracking\", \"tracking\",     \"tracking\", \"motus\", \"motus\", \"motus\", \"motus\"   ) ) geom <- list(   nrow = 100, ncol = 200, res = 1, ext = NULL, crs = NULL,   mask = NULL, dynamic_mask = NULL ) dates <- data.frame(   timestep = 1:2,   date = as.Date(c(\"2022-01-04\", \"2022-01-11\")),   label = c(\"January 4\", \"January 11\"),   julian = c(4, 11),   week = c(1, 2) ) birdflowroutes_object <- BirdFlowRoutes(   birdflow_route_df,   species = species,   metadata = metadata,   geom = geom,   dates = dates,   source = \"example_source\" ) # Create a BirdFlowIntervals object ## 1. convert from `BirdFlowRoutes` birdflow_intervals_obj <- birdflowroutes_object |> as_BirdFlowIntervals()  ## 2. Directly from dataframe birdflow_intervals <- data.frame(   interval_id = 1:3,   route_id = c(\"route1\", \"route1\", \"route2\"),   lon1 = c(-90, -89, -88),   lon2 = c(-89, -88, -87),   lat1 = c(40, 41, 42),   lat2 = c(41, 42, 43),   x1 = c(1000, 1100, 1200),   x2 = c(1100, 1200, 1300),   y1 = c(500, 600, 700),   y2 = c(600, 700, 800),   i1 = as.integer(c(1, 2, 3)),   i2 = as.integer(c(2, 3, 4)),   date1 = as.Date(c(\"2024-01-01\", \"2024-01-02\", \"2024-01-03\")),   date2 = as.Date(c(\"2024-01-02\", \"2024-01-03\", \"2024-01-04\")),   timestep1 = as.integer(c(1, 2, 3)),   timestep2 = as.integer(c(2, 3, 4)),   route_type = c(\"tracking\", \"tracking\", \"banding\") ) birdflow_intervals_obj <- BirdFlowIntervals(   birdflow_intervals,   species = species,   metadata = metadata,   geom = geom,   dates = dates,   source = \"example_source\" ) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Routes() is used to convert data frames containing bird movement data into a formal Routes object with the same data. — Routes","title":"Routes() is used to convert data frames containing bird movement data into a formal Routes object with the same data. — Routes","text":"Routes() used convert data frames containing bird movement data formal Routes object data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Routes() is used to convert data frames containing bird movement data into a formal Routes object with the same data. — Routes","text":"","code":"Routes(data, species = NULL, source = NULL)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Routes() is used to convert data frames containing bird movement data into a formal Routes object with the same data. — Routes","text":"data data frame data bird movement. Likely tracking, banding, Motus data real birds; possibly synthetic versions .must following columns: date Date Date Time object class Date, POSIXlt, POSIXct lat,lon latitude longitude location WGS84 (EPSG::4326) route_type type route - one \"tracking\", \"banding\", \"motus\", \"unknown\", \"synthetic\" Types can mixed column. columns permitted retained Routes object dropped converted BirdFlowRoutes. species Either: character scalar suitable use ebirdst::get_species(); list species metadata must include common_name can optionally also include scientific_name  species_code standard BirdFlow species metadata. See species_info() description full list. Note list input checked eBird species codes names. Scalar input preferred unless species conform eBird's taxonomy. source Optional text describing source data. source() must class character can one elements.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/Routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Routes() is used to convert data frames containing bird movement data into a formal Routes object with the same data. — Routes","text":"object class Routes following components data data frame input data species list , minimum items common_name,  scientific_name, species_code depending species argument potentially items returned lookup_species_metadata() source input source","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"dynamic mask logical matrix dimensions distr matrix bf holding TRUE cells corresponding location (row) time (column) included model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"","code":"add_dynamic_mask(bf, dummy_mask = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"bf BirdFlow object dummy_mask TRUE mask added object, mask TRUE every cell. yields BirdFlow object works current mask dependent version package mimics old BirdFlow model. Note old model included state based sparsification predictions identical even dummy_mask = FALSE (default).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"BirdFlow object dynamic_mask component marginals includes transitions cells dynamically masked.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"","code":"bf <- add_dynamic_mask(BirdFlowModels::amewoo)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Stay IDs — add_stay_id","title":"Add Stay IDs — add_stay_id","text":"Adds stay IDs data frame based changes spatial indices.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Stay IDs — add_stay_id","text":"","code":"add_stay_id(df)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Stay IDs — add_stay_id","text":"df data frame spatial indices.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Stay IDs — add_stay_id","text":"data frame stay_id stay_len columns added.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Stay IDs — add_stay_id","text":"","code":"routes <- data.frame(list(   route_id = c(1, 1, 1, 2, 2, 3, 3, 3),   i = c(1, 1, 2, 2, 3, 4, 4, 5),   date = as.Date(c(     \"2024-01-01\", \"2024-01-02\", \"2024-01-03\",     \"2024-01-04\", \"2024-01-05\", \"2024-01-06\",     \"2024-01-07\", \"2024-01-08\"   )) )) routes$i <- as.integer(routes$i) df_with_stay_ids <- add_stay_id(routes)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id_with_varied_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Stay IDs with Temporal Thresholds — add_stay_id_with_varied_intervals","title":"Add Stay IDs with Temporal Thresholds — add_stay_id_with_varied_intervals","text":"Adds stay IDs data frame, considering changes spatial indices. applied single route, multiple. Using add_stay_id_with_varied_intervals(), rather add_stay_id(): takes date input account varying intervals, data sampled frequency.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id_with_varied_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Stay IDs with Temporal Thresholds — add_stay_id_with_varied_intervals","text":"","code":"add_stay_id_with_varied_intervals(   df,   date_col = \"date\",   timediff_unit = \"days\" )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id_with_varied_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Stay IDs with Temporal Thresholds — add_stay_id_with_varied_intervals","text":"df data frame spatial temporal data. date_col name column containing date information. Defaults \"date\". timediff_unit unit stay_len.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id_with_varied_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Stay IDs with Temporal Thresholds — add_stay_id_with_varied_intervals","text":"data frame stay_id stay_len columns added.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_stay_id_with_varied_intervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Stay IDs with Temporal Thresholds — add_stay_id_with_varied_intervals","text":"","code":"routes <- data.frame(list(   route_id = c(1, 1, 1, 2, 2, 3, 3, 3),   i = as.integer(c(1, 1, 2, 2, 3, 4, 4, 5)), # Spatial index   date = as.Date(c(     \"2010-01-01\", \"2010-01-02\", \"2010-01-05\", \"2010-01-06\",     \"2010-01-10\", \"2010-01-15\", \"2010-01-16\", \"2010-01-20\"   )) # Time steps with varying intervals )) df_with_varied_stay_ids <-  add_stay_id_with_varied_intervals(routes, \"date\", \"days\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate distributions — animate_distr","title":"Animate distributions — animate_distr","text":"Animate distributions produced get_distr(), as_distr(), predict().  distributions displayed column order distr column labels used plot subtitle.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate distributions — animate_distr","text":"","code":"animate_distr(distr, bf, title = species(bf), ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate distributions — animate_distr","text":"distr set distributions matrix n_active(bf) rows column distribution. animation proceed column order column names used subtitles plot. bf BirdFlow object distr associated . title title use animation. default common name species. ... Arguments passed plot_distr subset Defines optional subset distr plotted. Use either column numbers, column names, logical vector. show_mask TRUE (default) static mask indicates cells active model timestep shown. show_dynamic_mask Defaults FALSE. Set TRUE visualize dynamic mask. achieved overwriting cells dynamically masked NA. show_dynamic_mask = TRUE work column names distr colnames(get_distr(bf)).  true distributions returned predict() get_distr(). limits range density values map gradient_colors . default range values distr applying subset. want standardize range across multiple models single species might want set c(0, max) max maximum observed value across models. Alternatively range highly variable among columns distr density spreads single point results predict(bf) may want set smaller full range case values truncated limits (see examples). dynamic_scale Set TRUE range data distribution mapped full color gradient. allows visualizing full range values within timestep optimally cost consistency color scale among facets - animation frames using animate_distr(). coast_linewidth line width use plotting coast. Default 0.25.  NULL coast plotted. coast_color color use plotting coastline. NULL coast plotted. gradient_colors color gradient used plot density values. Leave set NULL default ebirdst::abundance_palette(10, season = \"weekly\"). active_cell_color background color active cells landscape. used show_mask TRUE. cells visible NA values distr show_dynamic_mask TRUE. inactive_cell_color color use inactive cells landscape. cells always masked. relevant show_mask = TRUE. value_label label used values distribution. Defaults \"Density\" transform transformation apply color scaling. Recommended \"identity\", \"sqrt\".  \"log\" used zeros replaced 1/2 smallest non-zero value prior transforming. mapping color gradient. Legend still reflect original values. Passed ggplot2::scale_color_gradientn().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate distributions — animate_distr","text":"gganimate object can displayed print() gganimate::animate().  See example export file.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_distr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate distributions — animate_distr","text":"","code":"# Animate distributions from BirdFlow object - derived from # eBird Status and Trends:  bf <- BirdFlowModels::amewoo ts <- lookup_timestep_sequence(bf, season = \"prebreeding\") distr <- get_distr(bf, ts) anim <- animate_distr(distr, bf,  show_dynamic_mask = TRUE)  if (FALSE) { # \\dontrun{   # Display it   anim } # } ### Project a distribution  # Make starting distribution # Since we define the point in WGS84 (not crs(bf)) we also have to provide # the crs. point <- data.frame(x = -90, y = 35) d1 <- as_distr(point, bf, crs = \"EPSG:4326\" )  # Project - density will spread over type resulting in a vastly different # range of values density_spread <- predict(bf, d1, season = \"prebreeding\")  # Have the color gradient rescaled to the range of data in each # individual frame  - density scaling is dynamic. spread_anim <- animate_distr(density_spread, bf,   dynamic_scale= TRUE)  # Or put in values to use for the limits of the color scale - values outside # of the limits will be truncated spread_anim <- animate_distr(density_spread, bf,  limit = c(0, 0.05))   if (FALSE) { # \\dontrun{   # example render fo file   gif <- gganimate::animate(spread_anim,                             device = \"ragg_png\", # fast and pretty                             width = 7, height = 6,                             res = 150, units = \"in\")   # Display   print(gif)    # Save   gif_file <- tempfile(\"animation\", fileext = \".gif\")   gganimate::save_animation(gif, gif_file)   file.remove(gif_file) # cleanup } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_flux.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate flux — animate_flux","title":"Animate flux — animate_flux","text":"Animate net migration calc_flux().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_flux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate flux — animate_flux","text":"","code":"animate_flux(flux, bf, title = species(bf), ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_flux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate flux — animate_flux","text":"flux flux object created calc_flux(format = \"dataframe\") bf BirdFlow object title plot title ... Arguments passed plot_flux subset subset transitions flux plot, can logical vector length number transitions flux; numeric index transitions flux, subset transition names flux. limits Two numbers representing range flux values display. Values outside range truncated range. default NULL entire range plotted. dynamic_scale TRUE range data transition mapped color palette. makes easier see variation within single transition results inconsistent scale among transitions. coast_linewidth line width used plot coast. Set NULL skip plotting coastline. coast_color color used plot coastline, NULL skip plotting coastline. gradient_colors colors palette used represent flux intensity. value_label label flux values. transform transformation apply color scaling. \"identity\", \"sqrt\" recommended. \"log\" used zeros replaced 1/2 smallest non-zero value prior transforming. Legend still reflect original values. Passed ggplot2::scale_color_gradientn().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_flux.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate flux — animate_flux","text":"gganim object","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_flux.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate flux — animate_flux","text":"","code":"if (FALSE) { # \\dontrun{ bf <- BirdFlowModels::amewoo flux <- calc_flux(bf)  plot_flux(flux, bf)  animate_flux(flux, bf) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate movement vectors — animate_movement_vectors","title":"Animate movement vectors — animate_movement_vectors","text":"animate_movement_vectors() produces gganim object frame map vectors showing average modeled movement birds cell landscape given timestep. analogous series images created plot_movement_vectors().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate movement vectors — animate_movement_vectors","text":"","code":"animate_movement_vectors(bf, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate movement vectors — animate_movement_vectors","text":"bf BirdFlow object ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate movement vectors — animate_movement_vectors","text":"gganim object. print() plot default options, use gganimate::animate() set options. See example recommended settings.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Animate movement vectors — animate_movement_vectors","text":"arrow represents average transitions single cell. tail arrow center cell, head average location following timestep birds start cell. timestep /date label starting timestep transition displayed format depends birdflow_options(\"time_format\") Thicker lines less transparency (darker shading) indicate higher density eBird S&T distribution beginning timestep displayed transition. Use \"ragg_png\" device rendering animations example code.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate movement vectors — animate_movement_vectors","text":"","code":"bf <- BirdFlowModels::amewoo a <- animate_movement_vectors(bf) #> Creating vector fields #> \t....................................................  if (FALSE) { # \\dontrun{  # Animate, display, and save #   Note: \"ragg_png\" is considerably faster and produces cleaner output than #         the default device. gif <- gganimate::animate(a, fps = 1, device = \"ragg_png\",                           width = 6, height = 5,                           res = 150, units = \"in\") print(gif)  # Save gif_file <- tempfile(\"animation\", fileext = \".gif\") gganimate::save_animation(gif, gif_file) file.remove(gif_file) # cleanup } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate routes — animate_routes","title":"Animate routes — animate_routes","text":"Animate synthetic routes produced route() route_migration(), producing dynamic version plot_routes().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate routes — animate_routes","text":"","code":"animate_routes(routes, bf, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate routes — animate_routes","text":"routes object class Routes  BirdFlowRoutes.  Likely output  route(), as_BirdFlowRoutes, Routes(). bf BirdFlow object ... Arguments passed plot_routes facet TRUE use ggplot2::facet_wrap() show route separate subplot. max_stay_len Used scale stay length dots. NULL (default) set maximum \"stay_len\" value routes. Set manually keep dot scaling consistent across multiple plots. use_seasonal_colors TRUE color scale uses blues, greens, yellows, reds, winter, spring, summer, fall used consistent mapping dates colors regardless range dates plotted. FALSE data plotted using full color scale. pal color palette use plotting use_seasonal_cols FALSE. Defaults viridisLite::viridis(n = 5). barheight height color gradient legend bar. Passed ggplot2::guide_colorbar() barheight argument. Depending output resolution plot size may need adjusted. Can take number output ggplot2::unit(). route_linewidth Line width used routes. coast_linewidth Line width used coastlines. dot_sizes Two numbers indicating smallest largest dot sizes used represent stay length. stay_units unit plot stay length location. Default weeks. options include sec, mins, hours, days weeks. show_mask BirdFlow Model's (bf) static mask displayed. crs used bf missing.  crs sets Coordinate Reference system used plotting. See terra::crs(). static internal use. set FALSE plot_routes() called animate_routes().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate routes — animate_routes","text":"gganim object. print() plot default options, use gganimate::animate() set options. See example recommended settings.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Animate routes — animate_routes","text":"Note rendering early frames (minimum first) one point per route, resulting message: \"geom_path(): group consists one observation. ℹ need adjust group aesthetic?\" possibly repeated individuals remain one location. can safely ignored. error thrown rendering within animate_routes() suppressed code BirdFlowR.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate routes — animate_routes","text":"","code":"bf <- BirdFlowModels::amewoo rts <- route(bf, 10,  season = \"prebreeding\") anim <- animate_routes(rts, bf)  if (FALSE) { # \\dontrun{   # example render   timesteps <- unique(rts$data$timestep)   gif <- gganimate::animate(anim,                             device = \"ragg_png\", # is fast and pretty                             width = 7, height = 6,                             res = 150, units = \"in\",                             nframes = length(timesteps) * 4, fps = 8)    # Display   print(gif)    # Save   gif_file <- tempfile(\"animation\", fileext = \".gif\")   gganimate::save_animation(gif, gif_file)   file.remove(gif_file) # cleanup } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowIntervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert BirdFlowRoutes to BirdFlowIntervals — as_BirdFlowIntervals","title":"Convert BirdFlowRoutes to BirdFlowIntervals — as_BirdFlowIntervals","text":"Converts BirdFlowRoutes object BirdFlowIntervals object, sampling interval pairs time points. BirdFlowIntervals define specific movements states  BirdFlow model.  two points interval always differ time (week  / timestep). can occupy location (raster cell) model represent movement two locations. BirdFlowIntervals primarily used evaluate model performance calculate_interval_metrics().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowIntervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert BirdFlowRoutes to BirdFlowIntervals — as_BirdFlowIntervals","text":"","code":"as_BirdFlowIntervals(   birdflow_routes,   max_n = 1000,   min_day_interval = 7,   max_day_interval = 180,   min_km_interval = 200,   max_km_interval = 8000 )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowIntervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert BirdFlowRoutes to BirdFlowIntervals — as_BirdFlowIntervals","text":"birdflow_routes BirdFlowRoutes object. max_n maximum number intervals sample. Defaults 1000. min_day_interval minimum days required interval. Defaults 7. max_day_interval maximum days required interval. Defaults 180. min_km_interval minimum distance required interval. Defaults 200. max_km_interval maximum distance required interval. Defaults 2000.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowIntervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert BirdFlowRoutes to BirdFlowIntervals — as_BirdFlowIntervals","text":"BirdFlowIntervals object.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowIntervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert BirdFlowRoutes to BirdFlowIntervals — as_BirdFlowIntervals","text":"","code":"route_df <- data.frame(   route_id = c(\"001\", \"001\", \"001\", \"001\", \"001\", \"003\",   \"003\", \"003\", \"004\"),   date = as.Date(c(     \"2025-01-01\", \"2025-01-08\", \"2025-01-15\",     \"2025-01-21\", \"2025-02-10\", \"2025-03-01\", \"2025-05-01\", \"2025-06-01\",     \"2025-05-01\"   )),   lon = c(     -75.0060, -75.0060, -74.0060, -87.6298, -87.6298, -87.6298,     -89.6298, -85.6298, -95.3698   ),   lat = c(     39.7128, 39.7128, 40.7128, 41.8781, 41.8781, 41.8781, 42.8781,     40.8781, 29.7604   ),   route_type = c(     \"tracking\", \"tracking\", \"tracking\", \"tracking\", \"tracking\",     \"motus\", \"motus\", \"motus\", \"motus\"   ) ) routes_obj <- Routes(route_df, species = \"amewoo\") bf <- BirdFlowModels::amewoo birdflow_routes <- routes_obj |> as_BirdFlowRoutes(bf = bf) birdflow_intervals <- as_BirdFlowIntervals(birdflow_routes, max_n = 1000)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowRoutes.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Routes to BirdFlowRoutes — as_BirdFlowRoutes","title":"Convert Routes to BirdFlowRoutes — as_BirdFlowRoutes","text":"Convert Routes objects BirdFlowRoutes, adding BirdFlow-specific spatiotemporal coordinates. may require aggregating multiple observations within timestep (week) controlled aggregate argument. Note coordinates dates result snapped cell timestep (week) centers BirdFlow model (bf).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowRoutes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Routes to BirdFlowRoutes — as_BirdFlowRoutes","text":"","code":"as_BirdFlowRoutes(   routes,   bf,   aggregate = \"random\",   valid_only = TRUE,   sort_id_and_dates = TRUE,   reset_index = FALSE )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowRoutes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Routes to BirdFlowRoutes — as_BirdFlowRoutes","text":"routes Routes object. bf BirdFlow object spatial temporal reference. aggregate aggregation method one timestep presented route. Options include mean, median, midweek, random. Default random. See snap_to_birdflow description aggregation method. valid_only Logical. valid points included? Defaults TRUE. sort_id_and_dates Logical. data sorted route ID date? Defaults TRUE. reset_index Logical. indices reset sorting? Defaults FALSE.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowRoutes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Routes to BirdFlowRoutes — as_BirdFlowRoutes","text":"BirdFlowRoutes object.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_BirdFlowRoutes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Routes to BirdFlowRoutes — as_BirdFlowRoutes","text":"","code":"route_data <- data.frame(   route_id = c(\"001\", \"001\", \"001\", \"001\", \"001\",   \"003\", \"003\", \"003\", \"004\"),   date = as.Date(c(\"2025-01-01\", \"2025-01-08\", \"2025-01-15\", \"2025-01-21\",   \"2025-02-10\", \"2025-03-01\", \"2025-05-01\", \"2025-06-01\", \"2025-05-01\")),   lon = c(-75.0060, -75.0060, -74.0060, -87.6298, -87.6298, -87.6298,   -89.6298, -85.6298, -95.3698),   lat = c(39.7128, 39.7128, 40.7128, 41.8781, 41.8781, 41.8781,   42.8781, 40.8781, 29.7604),   route_type = c(\"tracking\", \"tracking\", \"tracking\", \"tracking\",   \"tracking\", \"motus\", \"motus\", \"motus\", \"motus\") ) bf <- BirdFlowModels::amewoo routes <- Routes(route_data, species = species(bf), source = \"Pkg. example\")  bf_routes <- as_BirdFlowRoutes(routes, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a BirdFlow distribution — as_distr","title":"Convert to a BirdFlow distribution — as_distr","text":"Methods convert raster point data distributions.  layer raster treated distribution.  point data point treated \"one hot\" distribution containing mostly 0 single 1 location corresponding point.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a BirdFlow distribution — as_distr","text":"","code":"as_distr(x, bf, ...)  # S3 method for class 'data.frame' as_distr(x, bf, crs = NULL, ...)  # S3 method for class 'SpatRaster' as_distr(x, bf, normalize = TRUE, zero_na = TRUE, ...)  # S3 method for class 'sf' as_distr(x, bf, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a BirdFlow distribution — as_distr","text":"x object converted either data.frame x y columns indicating point locations, sf object containing points, raster object containing values treated distribution. bf reference BirdFlow object. ... Arguments used methods: crs coordinate reference system x y coordinates .  NULL function assume coordinates CRS bf. normalize TRUE normalize distribution sum 1 zero_na TRUE replace NA values 0.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a BirdFlow distribution — as_distr","text":"object containing distribution data projected x. Either vector n_active(bf) values matrix many rows column distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_distr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to a BirdFlow distribution — as_distr","text":"x data.frame columns x y containing coordinates points.   crs indicate coordinate reference system points - necessary differs crs(bf). x either sf object data frame represent points. point converted separate distribution cell corresponding point value 1 remaining values set 0. x terra::SpatRaster() projected align cells bf terra::project() using method = \"average\" cropped /extended match extent bf.  Warnings throw value x lost due cropping due masking inactive cells.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","title":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","text":"Convert sequence timesteps sequence transition names","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","text":"","code":"as_transitions(timesteps, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","text":"timesteps valid sequence timesteps. See lookup_timestep_sequence(). bf BirdFlowR model, used determine much padding needed around timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","text":"directional sequence transitions connect timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/attribute_validators.html","id":null,"dir":"Reference","previous_headings":"","what":"Attribute Validators — attribute_validators","title":"Attribute Validators — attribute_validators","text":"collection internal utility functions validate individual attributes within Routes, BirdFlowRoutes, BirdFlowIntervals, related objects. functions ensure correctness, consistency, validity attributes used BirdFlow data structures.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/attribute_validators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attribute Validators — attribute_validators","text":"","code":"validate_Routes_route_id(route_id)  validate_Routes_date(date_vector)  validate_Routes_lon(lon_vector)  validate_Routes_lat(lat_vector)  validate_Routes_route_type(route_type_vector)  validate_BirdFlowRoutes_route_type(route_type_vector)  validate_BirdFlowRoutes_x(x_vector)  validate_BirdFlowRoutes_y(y_vector)  validate_BirdFlowRoutes_i(i_vector)  validate_BirdFlowRoutes_timestep(timestep_vector)  validate_BirdFlowRoutes_date(route_id_vector, date_vector)  validate_BirdFlowRoutes_stay_id(stay_id_vector)  validate_BirdFlowRoutes_stay_len(stay_len_vector)  validate_BirdFlowRoutes_species(species)  validate_BirdFlowRoutes_metadata(metadata)  validate_BirdFlowRoutes_dates(dates)  validate_BirdFlowIntervals_interval_id(interval_id)  validate_BirdFlowIntervals_metadata(metadata)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/attribute_validators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attribute Validators — attribute_validators","text":"route_id vector route IDs (character numeric). Must contain missing values. date_vector vector dates (Date, POSIXct, POSIXlt). Must contain missing values; Must duplicates within route_id (BirdFlowRoutes; Routes). lon_vector, lat_vector Numeric vectors longitude latitude. Must contain missing values must within valid ranges. route_type_vector character vector route types. Must contain valid types. x_vector, y_vector Numeric vectors spatial coordinates. Must contain missing values. i_vector integer vector spatial indices. Must contain missing values. timestep_vector integer vector timesteps, paired route_id_vector. stay_id_vector numeric character vector stay IDs. Must contain missing values. stay_len_vector integer vector stay lengths. Must contain missing values. species list species information. Must include species_code, scientific_name, common_name. metadata list additional metadata. dates data frame date-related information. Must include interval, date, midpoint, start, end, doy, week. geom list containing geometry attributes. Must include nrow, ncol, res, ext, crs, mask, dynamic_mask.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/attribute_validators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attribute Validators — attribute_validators","text":"function returns TRUE validation succeeds. validation fails, error raised details issue.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/attribute_validators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Attribute Validators — attribute_validators","text":"functions validate specific attributes columns input data frames. check: General Attributes: route_id: Ensures IDs valid non-missing. date: Ensures date formats non-missing values. lon lat: Ensure longitude latitude values within valid ranges. route_type: Ensures valid route types present. Spatial Attributes (BirdFlowRoutes): x y: Ensure numeric spatial coordinates. : Ensures valid spatial indices integers. timestep: Ensures unique timesteps per route_id. stay_id stay_len: Ensure valid stay identifiers lengths. Additional Attributes: species: Ensures species data contains required components. geom: Ensures geometry data includes required fields. dates: Validates date-related data frames, checking required columns. functions intended internal use exported user-facing functionality.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/attribute_validators.html","id":"functions-included-","dir":"Reference","previous_headings":"","what":"Functions Included:","title":"Attribute Validators — attribute_validators","text":"General Validators: validate_Routes_route_id() validate_Routes_date() validate_Routes_lon(), validate_Routes_lat() validate_Routes_route_type() BirdFlowRoutes Validators: validate_BirdFlowRoutes_x(), validate_BirdFlowRoutes_y() validate_BirdFlowRoutes_i(), validate_BirdFlowRoutes_timestep(), validate_BirdFlowRoutes_date(), validate_BirdFlowRoutes_stay_id(), validate_BirdFlowRoutes_stay_len() validate_BirdFlowRoutes_species() BirdFlowIntervals Validators: validate_BirdFlowIntervals_interval_id() Dates Metadata: validate_BirdFlowRoutes_dates() validate_BirdFlowRoutes_metadata()","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/bf_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to send a message from within BirdFlow functions — bf_msg","title":"Internal function to send a message from within BirdFlow functions — bf_msg","text":"checks see BirdFlowR verbose mode (birdflow_options(\"verbose\") pastes arguments together  prints result  cat(). future might updated use message()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/bf_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to send a message from within BirdFlow functions — bf_msg","text":"","code":"bf_msg(..., sep = \"\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/bf_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to send a message from within BirdFlow functions — bf_msg","text":"... Text pasted together make message. sep (optional) separator text elements ... defaults separation.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/bf_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to send a message from within BirdFlow functions — bf_msg","text":"Nothing returned verbose TRUE message printed.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/bf_suppress_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally suppress messages from expressions in BirdFlowR code — bf_suppress_msg","title":"Conditionally suppress messages from expressions in BirdFlowR code — bf_suppress_msg","text":"internal functions used suppress messages thrown functions called BirdFlowR code birdflow_options(\"verbose\") FALSE.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/bf_suppress_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally suppress messages from expressions in BirdFlowR code — bf_suppress_msg","text":"","code":"bf_suppress_msg(exp)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/bf_suppress_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally suppress messages from expressions in BirdFlowR code — bf_suppress_msg","text":"exp R code might throw message (originating outside BirdFlowR.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/bf_suppress_msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditionally suppress messages from expressions in BirdFlowR code — bf_suppress_msg","text":"","code":"if (FALSE) { # \\dontrun{ # bf_suppress_msg isn't exported so can't be run in examples # in internal code or after  devtools::load_all() example will work    ob <- birdflow_options(\"verbose\")    birdflow_options(verbose = FALSE)    bf_suppress_msg( message(\"hi\" ))    birdflow_options(verbose = TRUE)    bf_suppress_msg( message(\"hi\" ))    birdflow_options(ob)  } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and retrieve BirdFlowR options — birdflow_options","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"arguments BirdFlowR options returned list. Use single character value retrieve value single option. Use one named arguments set options.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"","code":"birdflow_options(...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"... One : (1) one named arguments name option value new setting e.g. verbose = FALSE ; (2) single unnamed argument stating option retrieve e.g. \"verbose\" option retrieve. (3) arguments, indicating options current settings returned list; (4) single list argument named items new values.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"arguments used options returned list. single, unnamed argument character value indicating option value option returned. Otherwise, arguments indicate new option settings nothing returned.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"time_format Indicates time format use label dimensions distribution tables layers raster objects returned get_distr(), terra::rast(), rasterize_distr(), predict().  affect internally stored distribution column labels (always t1, t2, etc.). Default \"month_day\". Valid values : \"timestep\" uses timestep integer appended \"t\" e.g. \"t1\");  \"date\" uses date format year-month-day (numbers) e.g. \"2022-11-23\"; \"month_day\" uses name month followed day month e.g. \"November 23.\" verbose Defaults TRUE printing progress information process functions.  Set FALSE turn printing. max_param_per_gpu_gb Controls many parameters can fit BirdFlowPy per gigabyte GPU Ram.  conservative estimate based empirical testing.  See preprocess_species() cache local directory store downloaded model files.  Defaults tools::R_user_dir(\"BirdFlowR\", \"data\"). base cache directory within one collection specific directories, turn hold BirdFlow model files index. collection_url base URL collection model files associated index.  default standard BirdFlowR model collection.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"","code":"bf <- BirdFlowModels::amewoo birdflow_options() # print current settings #> $cache #> [1] \"/home/runner/.local/share/R/BirdFlowR\" #>  #> $collection_url #> [1] \"https://birdflow-science.s3.amazonaws.com/collection/\" #>  #> $max_param_per_gpu_gb #> [1] 23224801 #>  #> $time_format #> [1] \"month_day\" #>  #> $verbose #> [1] TRUE #>  original_format <- birdflow_options(\"time_format\") birdflow_options(time_format = \"date\") head(get_distr(bf, 1:3)) #>       time #> i      2021-01-04 2021-01-11 2021-01-18 #>   [1,]          0          0          0 #>   [2,]          0          0          0 #>   [3,]          0          0          0 #>   [4,]          0          0          0 #>   [5,]          0          0          0 #>   [6,]          0          0          0 birdflow_options(time_format = original_format)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or drop transition matrices — build_transitions","title":"Add or drop transition matrices — build_transitions","text":"Given BirdFlow object marginals without transitions build_transitions() return BirdFlow object marginals transitions, drop_tansitions() reverse process.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or drop transition matrices — build_transitions","text":"","code":"build_transitions(x, rebuild = FALSE)  drop_transitions(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or drop transition matrices — build_transitions","text":"x BirdFlow object rebuild Set TRUE rebuild transitions already present.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or drop transition matrices — build_transitions","text":"BirdFlow object transition matrices","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or drop transition matrices — build_transitions","text":"","code":"if (FALSE) { # \\dontrun{ bf1 <- BirdFlowModels::amewoo bf2 <- build_transitions(bf) bf2  bf3 <- drop_transitions(bf2) bf3 } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/cache_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to get the local path to the cache for the current model collection. — cache_path","title":"Internal function to get the local path to the cache for the current model collection. — cache_path","text":"Use birdflow_options(\"cache\") get main cache directory (parent collection directory) birdflow_options(\"collection_url\") current model collection url.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/cache_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to get the local path to the cache for the current model collection. — cache_path","text":"","code":"cache_path(collection_url = birdflow_options(\"collection_url\"))"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/cache_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to get the local path to the cache for the current model collection. — cache_path","text":"collection_url url collection. path base directory (index.html file).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/cache_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to get the local path to the cache for the current model collection. — cache_path","text":"Path local cache current collection including trailing delimiter.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"Calculate total number parameters occupied area timestep abundance raster.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"","code":"calc_abundance_stats(x, circular = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"x multilayer spatRaster relative abundances timestep circular TRUE (default) use first timestep abundance ending abundance.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"list n_params number parameters model fit x count vector number cells occupied timestep area vector area (sq m) included cells timestep res resolution raster km","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"helper preprocess_species()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_dist_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate the weights of transitions for flux points — calc_dist_weights","title":"calculate the weights of transitions for flux points — calc_dist_weights","text":"calc_dist_weights() internal function takes summary stats relationship points transition line returns weight used transition.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_dist_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate the weights of transitions for flux points — calc_dist_weights","text":"","code":"calc_dist_weights(   dist_to_line,   dist_along_line,   line_lengths,   radius_m,   res_m,   method = \"m3\" )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_dist_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate the weights of transitions for flux points — calc_dist_weights","text":"dist_to_line far point line (m) dist_along_line far along line point, projecting  onto line (m) line_lengths long line (m) radius_m radius transect flux points - used determine band probability density added form weight. res_m resolution associated bird flow model, used determine nugget added variance represent uncertainty starting ending location transition. method method used calculating standard deviation probability distribution.  Currently \"m3\", Martern 3/2; \"bb\", Brownian bridge supported.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_dist_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate the weights of transitions for flux points — calc_dist_weights","text":"vector weights length first three arguments.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_dist_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"calculate the weights of transitions for flux points — calc_dist_weights","text":"first three arguments can vectors case calculations vectorized corresponding elements. preliminary version function likely change.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_flux.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate bird flux — calc_flux","title":"Estimate bird flux — calc_flux","text":"calc_flux() estimates proportion species passes near set points transition BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_flux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate bird flux — calc_flux","text":"","code":"calc_flux(   bf,   points = NULL,   radius = NULL,   n_directions = 1,   format = NULL,   batch_size = 5e+05,   check_radius = TRUE,   weighted = FALSE )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_flux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate bird flux — calc_flux","text":"bf BirdFlow model points set points calculate movement . points NULL default BirdFlow model cells either active fall two active cells. Otherwise data frame x  y columns containing point coordinates crs(bf). radius radius meters around points used assess whether movement line passes () point. point farther radius great circle line two cells centers . n_directions number directional bins use recording movement direction. Must either 1 indicating direction information even number. placeholder, currently 1 supported. format format return results one : \"points\" Returns list flux matrix array flux values, points data frame either input points default cell center derived points. \"dataframe\" Returns \"long\" data frame columns: x y coordinates points. transition Transition code. flux flux point. See \"Units\"  . date date associated transition, midpoint timesteps. \"SpatRaster\" Returns terra::SpatRaster layers transition. batch_size controls number movement lines processed time. smaller batch_size conserve memory slight performance cost.  number batches less equal n_active(bf)^2 / batch_size. check_radius  TRUE error thrown radius resolution 1/4 resolution bf. Outside range algorithm likely yield distorted results. 0.5 * mean(res(bf)) default, recommended radius. weighted FALSE use original quicker version flux sums marginal probability transitions pass within fixed distance point.  TRUE assign weight point transition combo multiplied marginal probability summing.  argument experimental default value identical old version. argument name behavior set TRUE may change.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_flux.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate bird flux — calc_flux","text":"See format argument.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_flux.html","id":"units","dir":"Reference","previous_headings":"","what":"Units","title":"Estimate bird flux — calc_flux","text":"total relative abundance passing circle centered point divided diameter circle kilometers.  units returned value therefore roughly proportion (\\(P\\)) species's population expected pass km line oriented perpendicular movement point: \\(\\frac{P}{km \\cdot week}\\) Multiplying result total population yield: \\(\\frac{birds}{km \\cdot week}\\)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_flux.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Estimate bird flux — calc_flux","text":"calc_flux() makes incorrect simplifying assumption birds follow shortest (great circle) path center source destination raster cells.  Caution used interpreting results especially around major geographic features coasts, large lakes, mountain ranges, ecological system boundaries might result non-linear migration paths. calc_flux() assumes line passes point part line within radius point.  assumption breaks radius much larger movement lengths points ahead line may still within radius line.  extreme large enough radius point outside entire range capture movement.  problem default points radius points ahead line never within radius. default points calc_flux() aligned cell centers movement lines. alignment means small radius result overestimate flux. default value half cell size sufficient problem, capturing standardizing units based entire cell area point represents.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_flux.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate bird flux — calc_flux","text":"","code":"if (FALSE) { # \\dontrun{ bf <- BirdFlowModels::amewoo flux <- calc_flux(bf)  plot_flux(flux, bf)  animate_flux(flux, bf) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"calc_movement_vectors() calculates average modeled movement birds location single transition BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"","code":"calc_movement_vectors(bf, start, direction = \"forward\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"bf BirdFlow model start starting timestep transition modeled direction \"Forward\" default. Set \"backward\" calculate vectors transition backwards time.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"data frame columns: location index starting location.  row distribution matrix corresponds location. start starting timestep transition. end ending timestep transition. start_x x coordinate starting cell transition. start_y y coordinate starting cell transition. end_x weighted average destination x coordinate transitions starting cell, weights set transition probability destination. end_y weighted average destination y coordinate. weight proportion population starting cell eBird S&T distribution starting timestep. width range rescaling weight used plot_movement_vectors(), animate_movement_vectors() set line width arrows.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"practice row transition matrix represents single starting location (start_x start_y) values row represent transition probability number destination cells. probabilities used weights calculate average destination x y coordinates (end_x, end_y).  ending coordinates arrow represented expected average destination birds start cell.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"","code":"bf <- BirdFlowModels::amewoo mv <- calc_movement_vectors(bf, 7)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_offset.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate year offset from a sequence of timesteps — calc_year_offset","title":"Calculate year offset from a sequence of timesteps — calc_year_offset","text":"internal function assigns year offset observation based whether sequence passed presumed year boundary started . sequence always starts 0. Forward sequences increment new year, backwards sequences decrements (0, -1, etc.). Elsewhere limitations route() prevent routes longer 1 full year (back start), function limit.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_offset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate year offset from a sequence of timesteps — calc_year_offset","text":"","code":"calc_year_offset(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_offset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate year offset from a sequence of timesteps — calc_year_offset","text":"x sequence integers representing timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_offset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate year offset from a sequence of timesteps — calc_year_offset","text":"sequence year offsets 0 1 forward sequences 0 -1 backwards.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_offset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate year offset from a sequence of timesteps — calc_year_offset","text":"used route() convert circular linear time making dates monotonic.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calculate_interval_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate interval metrics — calculate_interval_metrics","title":"Calculate interval metrics — calculate_interval_metrics","text":"Calculate interval based metrics, including distance metrics transition pairs.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calculate_interval_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate interval metrics — calculate_interval_metrics","text":"","code":"calculate_interval_metrics(birdflow_intervals, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calculate_interval_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate interval metrics — calculate_interval_metrics","text":"birdflow_intervals BirdFlowIntervals object bf BirdFlow model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calculate_interval_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate interval metrics — calculate_interval_metrics","text":"mean metrics across transition pairs","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calculate_interval_sampling_strategy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Interval Sampling Strategy — calculate_interval_sampling_strategy","title":"Calculate Interval Sampling Strategy — calculate_interval_sampling_strategy","text":"Internal function used as_BirdFlowRoutes() determine many intervals sample route based total number intervals requested. Ensures even distribution across routes possible.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calculate_interval_sampling_strategy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Interval Sampling Strategy — calculate_interval_sampling_strategy","text":"","code":"calculate_interval_sampling_strategy(   routes,   n,   min_day_interval,   max_day_interval,   min_km_interval,   max_km_interval )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calculate_interval_sampling_strategy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Interval Sampling Strategy — calculate_interval_sampling_strategy","text":"routes data frame similar data feature Routes – columns route_id, date, lon lat. n total maximum number intervals sample. Notice: actual output intervals might less n, data deficiency. never larger n. min_day_interval minimum days required interval. max_day_interval maximum days required interval. min_km_interval minimum distance required interval. max_km_interval maximum distance required interval.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calculate_interval_sampling_strategy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Interval Sampling Strategy — calculate_interval_sampling_strategy","text":"data frame columns: route_id: route ID. time_points: number time points route. interval_pairs: total number possible interval pairs route. intervals_to_sample: number intervals sample route.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calculate_interval_sampling_strategy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Interval Sampling Strategy — calculate_interval_sampling_strategy","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage routes <- data.frame(   route_id = c(\"A\", \"A\", \"B\", \"B\", \"B\"),   lon = c(100, 101, 102, 103, 104),   lat = c(40, 42, 44, 46, 48),   date = as.Date(\"2024-01-01\") + (0:4) * 10 ) sampling_strategy <- calculate_interval_sampling_strategy(routes,   n = 10,   min_day_interval = 20, min_km_interval = 100 ) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/combine_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to combine a sequence of transition matrices into one — combine_transitions","title":"Function to combine a sequence of transition matrices into one — combine_transitions","text":"Function combine sequence transition matrices one","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/combine_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to combine a sequence of transition matrices into one — combine_transitions","text":"","code":"combine_transitions(bf, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/combine_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to combine a sequence of transition matrices into one — combine_transitions","text":"bf BirdFlow object ... Arguments passed lookup_transitions","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/combine_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to combine a sequence of transition matrices into one — combine_transitions","text":"returns transition probabilities associated sequence timesteps. column every unmasked cell starting timestep row every unmasked cell last timestep, cell values probably transitioning row column start end time sequence described ...","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compareGeom-BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"BirdFlow compareGeom methods — compareGeom","title":"BirdFlow compareGeom methods — compareGeom","text":"methods terra::compareGeom() work one arguments BirdFlow objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compareGeom-BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BirdFlow compareGeom methods — compareGeom","text":"","code":"# S4 method for class 'BirdFlow,BirdFlow' compareGeom(x, y, ...)  # S4 method for class 'SpatRaster,BirdFlow' compareGeom(x, y, ...)  # S4 method for class 'BirdFlow,SpatRaster' compareGeom(x, y, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compareGeom-BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BirdFlow compareGeom methods — compareGeom","text":"x BirdFlow SpatRaster object y BirdFlow SpatRaster object ... Arguments passed terra::compareGeom","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":null,"dir":"Reference","previous_headings":"","what":"compare names of two nested lists — compare_list_item_names","title":"compare names of two nested lists — compare_list_item_names","text":"Look difference list item names nested level. Used internally verify BirdFlow object structure","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare names of two nested lists — compare_list_item_names","text":"","code":"compare_list_item_names(x, y, map = \"x\", differences)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare names of two nested lists — compare_list_item_names","text":"x list y reference list map used recursion tracking x differences found differences used recursion collecting differences","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare names of two nested lists — compare_list_item_names","text":"data frame difference columns 0 rows differences found.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine BirdFlow model resolution #### — determine_resolution","title":"Determine BirdFlow model resolution #### — determine_resolution","text":"Internal function determine resolution use creating BirdFlow model.  called preprocess_species() nowhere else, complicated enough justify function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine BirdFlow model resolution #### — determine_resolution","text":"","code":"determine_resolution(   sp_path,   res,   max_params,   gpu_ram,   clip,   crs,   download_species,   project_method )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine BirdFlow model resolution #### — determine_resolution","text":"sp_path species path used ebirdst download load data res target resolution BirdFlow model kilometers. res NULL (default) resolution results less max_params parameters used, also minimizing resolution limiting number significant digits. max_params maximum number fitted parameters BirdFlow model contain. Ignored res NULL.  Otherwise resolution chosen yields many fitted parameters. See gpu_ram default way setting max_params res. Note: reduction parameters resulting truncation (see ...) factored calculation. gpu_ram Gigabytes ram GPU machine fit models. res NULL max_params NULL used estimate max_paramswhich , turn, used determine resolution. Ignored either res max_params set. clip polygon path file containing polygon. must CRS either SpatVector() object produce one called vect(clip) crs Coordinate reference system (CRS) use.  Defaults custom projection eBird assigned species - see ebirdst::load_fac_map_parameters()). interpreted terra::crs() generate well known text representation CRS. download_species species code used ebirdst might \"example_data\" \"yebsap-example\" otherwise real species code. project_method method used reproject local variable set within preprocess_species.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine BirdFlow model resolution #### — determine_resolution","text":"resolution km either set directly user derived max_params gpu_ram.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine BirdFlow model resolution #### — determine_resolution","text":"user specifies resolution resolution used creating model. res argument NULL heuristic attempts set gpu_ram parameter specifies GB ram available machine used fit models. turned really hard anticipate many cells contain data resolution change. code estimates calculating area non-zero cells current resolution figures resolution number cells required cover area matches target number parameters. However, poor estimate ignores fact coarse cells along edges overlap fine cells contain mix data data. reduce bias. Next resamples estimated resolution, evaluates new number non-zero cells (thus parameters), makes new estimate, repeating process realized number parameters resolution converges 90 100 % target. results fairly precise maximum resolution can fit given number parameters. last step round (reducing parameters) cleaner number.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensions of a BirdFlow object — BirdFlow dimensions","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"Functions return BirdFlow model dimensions basic information","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"","code":"# S3 method for class 'BirdFlow' nrow(x)  # S3 method for class 'BirdFlow' ncol(x)  # S3 method for class 'BirdFlow' dim(x)  n_timesteps(x)  n_distr(x)  n_transitions(x)  n_active(x)  # S4 method for class 'BirdFlow' crs(x, proj = FALSE, describe = FALSE, parse = FALSE)  # S4 method for class 'BirdFlow' ext(x)  # S4 method for class 'BirdFlow' res(x)  # S4 method for class 'BirdFlow' xres(x)  # S4 method for class 'BirdFlow' yres(x)  # S4 method for class 'BirdFlow' xmin(x)  # S4 method for class 'BirdFlow' ymin(x)  # S4 method for class 'BirdFlow' xmax(x)  # S4 method for class 'BirdFlow' ymax(x)  is_cyclical(x)  n_parameters(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"x BirdFlow object proj logical. TRUE crs returned PROJ-string notation describe logical. TRUE name, EPSG code, name extent area use returned known parse logical. TRUE, wkt parts parsed vector (line becomes element)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"nrow() returns number rows raster extent BirdFlow model ncol() number columns raster extent dim() number rows columns raster extent. n_timesteps() number timesteps distributions. n_distr() number distributions n_transitions() number transitions, model circular time equal n_timesteps(). n_active() number active cells (locations). crs() coordinate reference system, character well known text (WKT) default, see arguments. ext() SpatExtent object, contains xmin, xmax, ymin, ymax extent. res() two numbers, cell width height (x y resolution). xres() width cells (x resolution). yres() height cells (y resolution). xmin() minimum x coordinate extent. ymin() minimum y coordinate extent. xmax() maximum x coordinate extent. ymax() maximum y coordinate extent. is_cyclical() returns TRUE BirdFlow model transition last timestep first FALSE otherwise. n_parameters() number parameters BirdFlow model contains contain. number cells marginal matrices + sum dynamic mask first timestep (number unmasked cells first timestep).  model dynamically masked equivalent n_active(x)^2 * n_transitons(x) + n_active(x)","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"Calculate correlation model derived distributions eBird Status Trend distributions used train BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"","code":"distribution_performance(x, metrics = NULL, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"x BirdFlow object metrics NULL calculate metrics.  Otherwise set subset metric names calculate metrics. ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"mean_step_cor Indicating average well model projects single timestep, mean_step_cor mean correlation, across timesteps, training (eBird Status Trends) distribution projected forward one timestep, training distribution projected timestep. min_step_cor Indicates quality worst single step projection. minimum correlation (across timesteps) single step projection training distribution training distribution projected timestep. mean_distr_cor Indicates average well marginal preserves training distributions. mean correlation training distributions distributions calculated marginals. min_distr_cor Indicates well poorest marginal preserves training distribution. minimum observed correlation marginal training distribution. st_traverse_cor, md_traverse_cor Indicates well model projects distribution multiple timesteps. correlation last distribution series projected iteratively forward fist distribution; eBird Status Trends (training) distribution last timestep. st_traverse_cor starts first timestep Status Trends (st) distribution, md_traverse_cor starts marginal distribution timestep;  versions compare projected distribution eBird Status Trends distribution timestep. n_states total number non_zero values across marginal derived distributions model.  number states  (locations space time) can reached model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"BirdFlow models trained eBird Status Trends distributions (\"Training distributions\"). \"Marginal distribution\" describes distribution calculated row column sums marginal, joint probability matrix (also part model). \"Projected distribution\" used describe distribution multiplied transition matrix (derived marginal distribution) project forward one timestep multiplied repeatedly series transition matrices project forward multiple timesteps Correlations calculated non-dynamically masked cells. ... argument can used define subset time evaluate case metrics calculated subset. default use timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"","code":"bf <- BirdFlowModels::amewoo  if (FALSE) { # \\dontrun{ # full model - skipping because it's slow distribution_performance(bf) } # } # Just for prebreeding_migration distribution_performance(bf, season = \"prebreeding_migration\") #> $min_step_cor #> [1] 0.9830113 #>  #> $mean_step_cor #> [1] 0.9935296 #>  #> $min_distr_cor #> [1] 0.9804372 #>  #> $mean_distr_cor #> [1] 0.9920057 #>  #> $st_traverse_cor #> [1] 0.9845607 #>  #> $md_traverse_cor #> [1] 0.9907496 #>  #> $n_states #> [1] 3138 #>"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dynamic_mask_index_conversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between dynamic mask index and static location index — dmi_to_i","title":"Convert between dynamic mask index and static location index — dmi_to_i","text":"dmi_to_i() i_to_dmi() internal advanced use; likely helpful users. See index conversions , likely, useful conversions. two functions convert indices along cells included dynamic mask (dmi) standard location indices () along cells included static mask. conversion requires knowing timestep associated dmi value mapping two different timestep.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dynamic_mask_index_conversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between dynamic mask index and static location index — dmi_to_i","text":"","code":"dmi_to_i(dmi, timestep, bf)  i_to_dmi(i, timestep, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dynamic_mask_index_conversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between dynamic mask index and static location index — dmi_to_i","text":"dmi Dynamic mask index values.  always integers 1 sum dynamic mask given timestep. timestep Either single timestep used conversions vector timesteps associated input value: dmi dmi_to_i() i_to_dmi(). bf BirdFlowR model. Note conversion specific model valid others. Location index. indicates location based index cells included static mask. start top left location fill row.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dynamic_mask_index_conversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between dynamic mask index and static location index — dmi_to_i","text":"location index,, location indicated dmi vis-versa.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dynamic_mask_index_conversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between dynamic mask index and static location index — dmi_to_i","text":"","code":"bf <- BirdFlowModels::amewoo  dmi <- c(11:20)  timesteps <- c(1, 1, 1, 1, 3, 3, 5,7:9 )   i <- dmi_to_i(dmi, timesteps, bf)  dmi2 <- i_to_dmi(i, timesteps, bf)   isTRUE(all.equal(dmi, dmi2)) #> [1] TRUE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ebirdst-compatibility.html","id":null,"dir":"Reference","previous_headings":"","what":"ebirdst version compatibility functions: — ebirdst-compatibility","title":"ebirdst version compatibility functions: — ebirdst-compatibility","text":"Internal functions facilitate working multiple versions ebirdst despite changes API 2021 2022.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ebirdst-compatibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ebirdst version compatibility functions: — ebirdst-compatibility","text":"","code":"ebirdst_pkg_ver()  ebirdst_ver_supported(use = \"package\", throw_error = FALSE)  res_label(res)  date_to_week(dates, version = 2022)  ebirdst_example_species()"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ebirdst-compatibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ebirdst version compatibility functions: — ebirdst-compatibility","text":"use particular use checked . package whether package functions supported fully.  preprocess_species checks function stricter requirments funcitons. lookup_species_metadata checks function called Routes(). throw_error TRUE error thrown ebirdst supported use. res resolution label. One \"lr\", \"mr\", \"hr\", \"27km\", \"9km\", \"3km dates vector dates can processed .POSIXlt() version numeric (year) version eBird date scheme use. 2021 older 2022 newer; values snapped closest two. output ebirdst::ebirdst_version()$version_year get_metadata(bf, \"ebird_version_year\") appropriate.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ebirdst-compatibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ebirdst version compatibility functions: — ebirdst-compatibility","text":"ebirdst_pkg_ver(): installed ebirdst package version NA none. ebirdst_ver_supported: TRUE specified use supported, FALSE otherwise. res_label(): resolution labels appropriate installed version ebirdst. date_to_week(): vector week numbers associated dates ebirdst_example_species(): example species name ebirdst","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ebirdst-compatibility.html","id":"ebirdst-pkg-ver-","dir":"Reference","previous_headings":"","what":"ebirdst_pkg_ver()","title":"ebirdst version compatibility functions: — ebirdst-compatibility","text":"ebirdst_pkg_ver() Look version currently installed ebirdst.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ebirdst-compatibility.html","id":"ebirdst-ver-supported-","dir":"Reference","previous_headings":"","what":"ebirdst_ver_supported()","title":"ebirdst version compatibility functions: — ebirdst-compatibility","text":"ebirdst_ver_supported() Check whether installed ebirdst suppored BirdFlowR particular use.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ebirdst-compatibility.html","id":"res-label-","dir":"Reference","previous_headings":"","what":"res_label()","title":"ebirdst version compatibility functions: — ebirdst-compatibility","text":"Convert resolution labels appropriate installed ebirdst ebirdst 3.2022.0 switched \"lr\", \"mr\", \"hr\" \"27km\", \"9km\", \"3km\" indicate low, medium, high resolution versions raster data function arguments. preprocess_species() uses older two letter versions runs function calling ebirdst functions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ebirdst-compatibility.html","id":"date-to-week-","dir":"Reference","previous_headings":"","what":"date_to_week()","title":"ebirdst version compatibility functions: — ebirdst-compatibility","text":"slightly modified copy ebirdst::date_to_st_week() allows calculating weeks dates without depending ebirdst.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ebirdst-compatibility.html","id":"ebirdst-example-species-","dir":"Reference","previous_headings":"","what":"ebirdst_example_species()","title":"ebirdst version compatibility functions: — ebirdst-compatibility","text":"Lookup example species name appropriate installed ebirdst.  example species changed \"example_data\" \"yebsap-example\" version 3.2022.0.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate BirdFlow model performance — evaluate_performance","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"DEPRECATED FUNCTION.  Please use distribution_performance() instead.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"","code":"evaluate_performance(x, distr_only = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"x BirdFlow object distr_only set TRUE calculate mean_distr_cor min_distr_cor metrics.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"mean_step_cor Indicates average well model project single timestep. mean correlation, across timesteps, training (eBird S&T) distribution projected forward one timestep, training distribution projected timestep. min_step_cor Indicates quality worst single step projection. minimum correlation (across timesteps) single step projection training distribution training distribution projected timestep. traverse_cor Indicates well model project timesteps. correlation last distribution projected iteratively fist training distribution; last training distribution. mean_distr_cor Indicates average well marginal preserves training distributions. mean correlation training distributions distributions calculated marginals. min_distr_cor Indicates well poorest marginal preserves training distribution. minimum observed correlation marginal training distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"Calculate several correlation projected distributions eBird Status Trends (S&T) distributions used train BirdFlow model. \"Training distribution\" used describe eBird S&T distributions used train BirdFlow models.  \"Marginal distribution\" describes distribution calculated row column sums marginal, joint probability matrix. \"Projected distribution\" used describe training distribution multiplied transition matrix (derived marginal distribution) project forward one timestep; multiplied repeatedly transition matrices project forward multiple timesteps. Correlations calculated non-dynamically masked cells.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"function converts collapsed distribution first (possibly ) dimension represents locations model expanded, raster state first two dimensions represent locations cell physical space (row, col) thus suitable plotting conversion spatial objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"","code":"expand_distr(distr, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"distr Either vector representing single distribution one value per location model matrix column vector. Higher dimensions allowed (unlikely); cases first dimension locations model. bf BirdFlow model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"expanded version distr one additional dimension, first two dimensions rows columns space (raster) replace first dimension input.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"collapsed form single distribution stored vector. value can interpreted relative abundance probability finding bird corresponding location. special case vector mostly 0's single 1 case represents single position bird group birds, concentrated distribution. Additional dimensions can represent multiple timesteps /multiple individual birds, model runs etc. location information collapsed distribution easily accessible position vector ordered based row-major ordered unmasked cells extent, R uses column-major order. May 2023 now internal function replaced rasterize_distr(format = \"numeric\").","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_import_birdflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Export and import BirdFlow models in HDF5 format — export_birdflow","title":"Export and import BirdFlow models in HDF5 format — export_birdflow","text":"export_birdflow() saves BirdFlow object HDF5 (Hierarchical Data Format version 5) import_birdflow() imports BirdFlow model HDF5 (Hierarchical Data Format version 5) file.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_import_birdflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export and import BirdFlow models in HDF5 format — export_birdflow","text":"","code":"export_birdflow(bf, file = NULL, format = \"hdf5\", overwrite = TRUE)  import_birdflow(hdf5, ..., version)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_import_birdflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export and import BirdFlow models in HDF5 format — export_birdflow","text":"bf BirdFlow model file file name write. supplied path directory file name default \"<species code>_<ebirdst year>_<resolution (km)>. format format export either \"hdf5\" \"rds\". overwrite default TRUE delete preexisting file write new one place.  FALSE, export_birdflow() throw error  file already exists. hdf5 Path HDF5 file containing fitted BirdFlow model. ... Deprecated, arguments passed version specific internal functions. version (optional) force reading BirdFlow models particular version. Normally, determined metadata HDF5 file.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_import_birdflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export and import BirdFlow models in HDF5 format — export_birdflow","text":"export_birdflow() writes file invisibly returns TRUE successful. import_birdflow() returns BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_import_birdflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export and import BirdFlow models in HDF5 format — export_birdflow","text":"standard workflow generating fitted BirdFlow model : Use preprocess_species() download format eBird data HDF5 file (calls export_birdflow() internally). Fit model add marginals hyperparameters HDF5 file BirdFlowPy Import model import_birdflow(). Save model new file either : saveRDS() .rds file, export_birdflow() new .hdf5 file. first import fitting BirdFlowPy import_birdflow() fair amount renaming reformatting data - example renames marginals adds marginal index. resulting BirdFlow model exported export_birdflow() updates retained, internal structure HDF5 file different.  import_birdflow() can handle either format.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_import_birdflow.html","id":"hdf-file-version","dir":"Reference","previous_headings":"","what":"HDF5 file version","title":"Export and import BirdFlow models in HDF5 format — export_birdflow","text":"HDF5 BirdFlow model files internal version number incremented major changes HDF5 file structure. file version retained imported object. Version 1 predates BirdFlowR preprocessing contains marginals python objects, importing requires associated TIFF file extent distribution data. version number (1) kept \"/version\" within HDF5 file. Version 2 first version includes preprocessing BirdFlowR. include dynamic masking.  version number (2) stored  \"/metadata/birdflow_version\".  version 2 files include hyper parameters HDF5 read R. Version 3 marks transition dynamic masking, HDF5 created preprocessing gained \"/geom/dynamic_mask\" \"/distances\"  (great circle distance matrix).  version 2 version stored \"/metadata/birdflow_version\" unlike previous versions R package version preprocessing saved character format \"/metdata/birdflowr_version\". version 3 files imported R model fits hyperparameters saved $metadata$hyperparameters (list).","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"export distributions and masks from a BirdFlow object to raster files. — export_rasters","title":"export distributions and masks from a BirdFlow object to raster files. — export_rasters","text":"function exports distributions /dynamic masks BirdFlow object raster files (TIFF, PNG).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"export distributions and masks from a BirdFlow object to raster files. — export_rasters","text":"","code":"export_rasters(   bf,   dir,   crs = NULL,   multiband = !singleband,   singleband = TRUE,   what = c(\"distr\", \"mask\"),   filetype = \"GTiff\",   as_integer = NULL,   factor = NULL,   overwrite = TRUE,   mb_file = \"<code>_<what>.<ext>\",   sb_file = \"<code>_<what>_<p_ts>.<ext>\" )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"export distributions and masks from a BirdFlow object to raster files. — export_rasters","text":"bf BirdFlow object dir directory output stored. Can include aliases; see mb_file,sb_file . crs coordinate reference system use output files, defaults  crs(bf) multiband TRUE export multiband file. forced FALSE filetype support multiband rasters. singleband TRUE export separate files week model. forced TRUE Either \"distr\", \"mask\" two element vector. controls components bf exported. filetype file type export: \"GTiff\" GeoTIFF files, \"PNG\" Portable Network Graphics. as_integer data written integers. default, NULL, integers written PNG file type support real numbers GeoTIFFs floating point numbers written. factor create integer output (as_integer = TRUE) floating point distributions multiplied number prior output. factor NULL (default) factor x / maximum value distribution bf, x 255 PNG filetypes 1000 GTiff.  Thus maximum integer value 255 PNG files, 1000 GeoTIFF files. overwrite pre-existing files overwritten new output. mb_file, sb_file, multi-band single-band file name templates. control files written. Possible aliases : <ext> file extension, required end template. <code> species code. <common> species common name, spaces replaced \"_\" <scientific> scientific name, spaces replaced \"_\" <ts> timestep (without padding) <p_ts> padded timestep e.g. \"03\" <date> date format year-month-day  e.g. \"2024-03-14\" <> one \"distr\" \"mask\" can omitted one output.  See argument . two metadata files (CRS, extent) written using multi-band template <> set \"crs\"  \"extent\", unless <> file name case \"_crs\" \"_extent\" inserted prior extension. sb_file must include one <ts>, <p_ts> <date>. aliases may used dir well.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"export distributions and masks from a BirdFlow object to raster files. — export_rasters","text":"Nothing returned, raster files written dir","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_rasters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"export distributions and masks from a BirdFlow object to raster files. — export_rasters","text":"replaces extends old behavior preprocess_species() allowed exporting TIFF files distributions preprocessing. Files written via terra::writeRaster data manipulated prior export, particular as_integer TRUE filetype supports integers distribution data normally 0 1 stretched converted integer.  amount stretching can controlled factor. as_integer set automatically TRUE formats export integers  (PGN) multiband singleband set FALSE TRUE respectively formats support single band output (PNG).  filetype supports multiband files possible export multiband single band setting arguments TRUE.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/export_rasters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"export distributions and masks from a BirdFlow object to raster files. — export_rasters","text":"","code":"if (FALSE) { # \\dontrun{   bf <- load_model(\"amewoo_prebreeding\")   dir <- tempdir()   crs <-\"EPSG:4326\"   export_tifs(bf, dir = dir, singleband = TRUE, crs = crs)   export_tifs(bf, dir = dir, singleband = TRUE, crs = crs, filetype = \"PNG\")  } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_birdflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend BirdFlow extent — extend_birdflow","title":"Extend BirdFlow extent — extend_birdflow","text":"Extend BirdFlow extent","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_birdflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend BirdFlow extent — extend_birdflow","text":"","code":"extend_birdflow(x, y)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_birdflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend BirdFlow extent — extend_birdflow","text":"x single BirdFlow object, one paths BirdFlow objects stored either hdf5 rds files. y extent object yields extent passed terra::ext().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_birdflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend BirdFlow extent — extend_birdflow","text":"x BirdFlow model object extend_birdflow() returns extended version model.  x path one BirdFlow models files modified logical vector length returned TRUE success.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_birdflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extend BirdFlow extent — extend_birdflow","text":"Models can extended beyond original extent, however already extended possible \"extend\" smaller extent long also larger original extent.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_birdflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend BirdFlow extent — extend_birdflow","text":"","code":"bf <- BirdFlowModels::amewoo  # Define extended extent for example e <-  ext(bf) buffer <- 3 * res(bf) e[1] <- e[1] - buffer[1] e[2] <- e[2] + buffer[1] e[3] <- e[3] - buffer[2] e[4] <- e[4] + buffer[2]  bf2 <- extend_birdflow(bf, e)  bf3 <- shrink_birdflow(bf2)  # Compare extents data.frame(item = names(as.vector(ext(bf))),             initial = as.vector(ext(bf)),             extended = as.vector(ext(bf2)),             shrunk = as.vector(ext(bf3))) #>      item  initial extended   shrunk #> xmin xmin -2550000 -3000000 -2550000 #> xmax xmax  2100000  2550000  2100000 #> ymin ymin -1650000 -2100000 -1650000 #> ymax ymax  1650000  2100000  1650000  if (FALSE) { # \\dontrun{ # Plot library(terra) plot_distr(get_distr(bf, 1), bf) plot_distr(get_distr(bf2, 1), bf2) plot_distr(get_distr(bf3, 1), bf3)   } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend geometry component of a BirdFlow object — extend_geom","title":"Extend geometry component of a BirdFlow object — extend_geom","text":"internal helper function called twice extend_birdflow() adjusts nrow, ncol, ext, mask elements geom component BirdFlow model expand extent preserving number, location, alignment unmasked cells - thus nothing else object needs change.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend geometry component of a BirdFlow object — extend_geom","text":"","code":"extend_geom(geom, y)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend geometry component of a BirdFlow object — extend_geom","text":"geom geometry component BirdFlow object y object returns extent passed terra::ext(), can extent, SpatRaster, BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/extend_geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend geometry component of a BirdFlow object — extend_geom","text":"extended geometry (covering larger area)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"function to determine the threshold in values that preserves a given proportion of the value. — find_threshold","title":"function to determine the threshold in values that preserves a given proportion of the value. — find_threshold","text":"function determine threshold values preserves given proportion value.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to determine the threshold in values that preserves a given proportion of the value. — find_threshold","text":"","code":"find_threshold(x, p, method = \"weight\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to determine the threshold in values that preserves a given proportion of the value. — find_threshold","text":"x vector values p proportion x wish retain method Either \"weight\" retain proportion total weight \"values\" retain proportion non-zero values.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to determine the threshold in values that preserves a given proportion of the value. — find_threshold","text":"threshold values x dropping everything smaller threshold retains least proportion p total weight number values x","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix the dead ends currently present in the model — fix_current_dead_ends","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"fix_current_dead_ends() zeros row column marginal leads current dead ends, eliminating transitions existing dead end states.  tends create new dead ends process called iteratively fix_dead_ends().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"","code":"fix_current_dead_ends(bf, de)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"bf BirdFlow model de (optional) output find_dead_ends()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"BirdFlow model selected marginal rows columns zeroed .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":null,"dir":"Reference","previous_headings":"","what":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"sparsification (sparsify()) possible create models dead ends -  states can entered exited. occurs one marginal encodes transitions state next marginal transitions . functions find fix states.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"","code":"find_dead_ends(x)  fix_dead_ends(bf, max_attempts = 100)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"x BirdFlow model bf BirdFlow model. max_attempts maximum number iterations try giving .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"`find_dead_ends() returns data.frame columns: row dead end state, dead ends found empty (zero row) data.frame returned. fix_dead_ends() returns BirdFlow model additional marginal row columns zeroed . successful dead ends. also adds data.frame  fix_stats bf$metadata$sparse.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"Consider two adjacent marginals; rows second columns first correspond species distribution timestep . every location model timestep four possibilities (1) first marginal's column non-zero values second marginal's row zero: forward transition state forward transition forward dead end; (2) situation reversed first marginals column zeros second marginal's corresponding row non-zero values, backward dead end (encountered projecting backwards time); (3) zeros: model fine state dropped; (4) non-zero values corresponding state valid can reached exited projecting forward backwards. Dead ends result lost density predict() errors entered route(). Based initial testing transitions dead end often low probability routing may work time occasionally fail. error occur subsequent iteration attempting sample bunch zero probability states.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"function converts raster representation data rows columns indicate position space vector representation contains active (masked) cells row major order - starting top left proceeding left right along row.  collapsed form used projecting flow model expanded form used export, import, visualize data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"","code":"flatten_raster(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"x Either matrix representing single bird distribution array representing multiple distributions dimensions: row, col, distribution. bf BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"Either vector representing single distribution collapsed form , x represents multiple distributions,  matrix one distribution per column.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve dates component of a BirdFlow model — get_dates","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"get_dates() get date information BirdFlow model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"","code":"get_dates(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"bf BirdFlow object retrieve dates .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"data frame columns: timestep model timestep associated row. always equal row number. date date associated midpoint timestep label month day based label associated timestep Consistent eBird's 2022 date scheme one day date February leap years still used label timesteps. model fit older version ebirdst never offset julian Julian date (day year) associated timestep center week ebirdst week number associated date. full year models identical timestep truncation differ. Prior BirdFlowR v. 0.1.0.9040 returned columns: interval interval timestep associated date. range 1 n_timesteps().  full models equivalent week year truncated models may . date date associated interval's midpoint. midpoint, start, end midpoint, start, end interval proportion total year elapsed. doy day year associated midpoint interval.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"truncate_birdflow() creates models subset intervals renames 1:[n_timesteps()] truncated model used week timestep identical values.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"date-scheme","dir":"Reference","previous_headings":"","what":"Date scheme","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"non-leap year 52 weeks plus 1 day assigning days weeks little bit arbitrary.  BirdFlowR uses conventions ebirdst eBird changed eBird 2022 version year. Thus dates result lookup_timestep() change depending ebird_version_year associated model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"-date-scheme-ebirdst-lt-","dir":"Reference","previous_headings":"","what":"2021 date scheme (ebirdst <= 2.2021.3)","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"Date table derived ebirdst::ebirdst_weeks added model object preprocess_species(). Julian date converted proportion (jd - 0.5)/366. 52 even ranges assigned 0 1 proportional date compared thresholds. non-leap year two weeks 8 days last week 6. leap-year two weeks 8 days. weeks 7 days.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"-date-scheme-ebirdst-gt-","dir":"Reference","previous_headings":"","what":"2022 date scheme (ebirdst >= 3.2022.0)","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"ebirdst dropped ebirdst_weeks Weeks defined evenly spaced Julian dates (week center) always seq(4, 366, 7). Dates assigned week Julian date closest. non-leap-years last week 8 days, leap years 9. weeks last 7 days. Week labels (month day) assigned based month day associated Julian week center non-leap years regardless whether leap year. label leap years thus one day date week center year.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"retrieving-dates","dir":"Reference","previous_headings":"","what":"Retrieving dates","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"date columns stored within birdflow model changes depending ebirdst version year, use bf$dates code. Instead useget_dates() always return (newer) column names.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract distributions from BirdFlow models — get_distr","title":"Extract distributions from BirdFlow models — get_distr","text":"get_distr return one distributions flattened form. single distribution returned vector; multiple columns matrix.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract distributions from BirdFlow models — get_distr","text":"","code":"get_distr(x, which = \"all\", from_marginals = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract distributions from BirdFlow models — get_distr","text":"x BirdFlow model Indicates timesteps return. Can one integers indicating timesteps; character dates format year-month-day e.g. \"2019-02-25\"; Date objects; \"\" return distributions timesteps. from_marginals TRUE x marginals distribution marginals even x also distributions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract distributions from BirdFlow models — get_distr","text":"Either vector distribution single timestep matrix column distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract distributions from BirdFlow models — get_distr","text":"BirdFlow object stored distributions training distributions returned default unless from_marginals = TRUE case distributions calculated marginal returned. training distributions distributions calculated marginal similar.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"BirdFlow object dynamic mask controls subset active cells model active given timestep.  derived eBird Status Trends (S&T) distributions; cells zero S&T data timestep excluded model timestep, tracked dynamic mask.  dynamic mask dimensions distributions (see get_distr()) either vector n_active() single timestep matrix n_active() rows one timestep. values logical TRUE corresponding cells part model (given timestep).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"","code":"get_dynamic_mask(x, which = \"all\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"x BirdFlow object Indicates timesteps return. Can one integers indicating timesteps; character dates format year-month-day e.g. \"2019-02-25\"; Date objects; \"\" return distributions timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"vector matrix elements rows corresponding active cells model indicating whether cell included model given timestep.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"","code":"library(terra) # For plotting of spatRaster #> terra 1.8.50 bf <- BirdFlowModels::amewoo |> add_dynamic_mask() dm <- get_dynamic_mask(bf, c(1,  10, 21, 31, 42, 52)) r <- rasterize_distr(dm, bf) plot(r, legend = FALSE, mar = c(1.3, 1.3, 1.3, .3)  )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_interval_based_validation_one_transition_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate model performance using intervals (movement data) — get_interval_based_validation_one_transition_pair","title":"Evaluate model performance using intervals (movement data) — get_interval_based_validation_one_transition_pair","text":"Calculate interval based validation, including predictive distance metric, log likelihood, log likelihood baseline distance metrics: distance probability BirdFlow model prediction beats naive S&T probability distribution-based prediction? Get interval based validation metrics one transition pair","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_interval_based_validation_one_transition_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate model performance using intervals (movement data) — get_interval_based_validation_one_transition_pair","text":"","code":"get_interval_based_validation_one_transition_pair(   birdflow_interval_row,   bf,   gcd,   st_dists )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_interval_based_validation_one_transition_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate model performance using intervals (movement data) — get_interval_based_validation_one_transition_pair","text":"birdflow_interval_row row data BirdFlowIntervals object bf BirdFlow model gcd Matrix great circle distance st_dists Matrix S&T distribution weeks columns, location rows, probability values.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_interval_based_validation_one_transition_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate model performance using intervals (movement data) — get_interval_based_validation_one_transition_pair","text":"named vector distance metrics","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Get loss values for each step in the model fitting process — get_loss","title":"Get loss values for each step in the model fitting process — get_loss","text":"get_loss() returns data frame loss values. row corresponds step fitting process.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get loss values for each step in the model fitting process — get_loss","text":"","code":"get_loss(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get loss values for each step in the model fitting process — get_loss","text":"bf BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get loss values for each step in the model fitting process — get_loss","text":"data frame columns: dist distance loss ent entropy loss obs observation loss total total weighted loss","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get loss values for each step in the model fitting process — get_loss","text":"","code":"bf <- BirdFlowModels::amewoo get_loss(bf) #>          dist       ent        obs     total #> 1   215.15869 236.17322 0.57939780 2.1014438 #> 2   210.01872 236.22165 0.52866054 2.0061350 #> 3   204.95619 235.81674 0.48049927 1.9147265 #> 4   200.01207 234.99609 0.43503928 1.8276443 #> 5   195.21609 233.80389 0.39228603 1.7450881 #> 6   190.58633 232.28596 0.35218555 1.6670935 #> 7   186.13089 230.49072 0.31466532 1.5935885 #> 8   181.84903 228.46327 0.27965516 1.5244315 #> 9   177.73326 226.24446 0.24709456 1.4594384 #> 10  173.77129 223.86955 0.21693729 1.3984053 #> 11  169.94862 221.36865 0.18916348 1.3411437 #> 12  166.25012 218.76643 0.16378160 1.2874954 #> 13  162.66167 216.08530 0.14081964 1.2373333 #> 14  159.17067 213.34410 0.12031531 1.1905594 #> 15  155.76617 210.56020 0.10230915 1.1470944 #> 16  152.43875 207.75093 0.08682334 1.1068535 #> 17  149.17995 204.93588 0.07382077 1.0696983 #> 18  145.98276 202.13470 0.06316140 1.0353997 #> 19  142.84262 199.36826 0.05458094 1.0036240 #> 20  139.75818 196.65489 0.04771935 0.9739727 #> 21  136.73073 194.00783 0.04219241 0.9460538 #> 22  133.76320 191.43358 0.03766023 0.9195434 #> 23  130.85825 188.93268 0.03386035 0.8942012 #> 24  128.01682 186.50026 0.03061645 0.8698661 #> 25  125.23743 184.12532 0.02783360 0.8464464 #> 26  122.51659 181.79424 0.02547722 0.8238968 #> 27  119.84933 179.49156 0.02354145 0.8021907 #> 28  117.23013 177.20245 0.02201207 0.7812875 #> 29  114.65356 174.91286 0.02084434 0.7611157 #> 30  112.11458 172.61061 0.01996790 0.7415788 #> 31  109.60916 170.28621 0.01930417 0.7225773 #> 32  107.13448 167.93297 0.01878082 0.7040239 #> 33  104.68911 165.54652 0.01833465 0.6858493 #> 34  102.27284 163.12595 0.01790984 0.6679974 #> 35   99.88613 160.67148 0.01746781 0.6504330 #> 36   97.52901 158.18375 0.01700313 0.6331502 #> 37   95.20029 155.66302 0.01654312 0.6161655 #> 38   92.89687 153.10956 0.01612644 0.5994905 #> 39   90.61395 150.52261 0.01578162 0.5831131 #> 40   88.34538 147.89935 0.01552618 0.5670018 #> 41   86.08443 145.23489 0.01537028 0.5511154 #> 42   83.82442 142.52255 0.01530915 0.5354009 #> 43   81.55951 139.75478 0.01533122 0.5198073 #> 44   79.28568 136.92514 0.01544342 0.5043159 #> 45   77.00089 134.02835 0.01565972 0.4889304 #> 46   74.70551 131.06082 0.01595673 0.4736363 #> 47   72.40195 128.02028 0.01627936 0.4584022 #> 48   70.09305 124.90343 0.01659533 0.4432253 #> 49   67.78003 121.70702 0.01690826 0.4281245 #> 50   65.46175 118.42944 0.01723262 0.4131068 #> 51   63.13724 115.07220 0.01758363 0.3981767 #> 52   60.80972 111.64002 0.01797476 0.3833687 #> 53   58.48853 108.14057 0.01839230 0.3687391 #> 54   56.18575 104.58351 0.01877982 0.3543221 #> 55   53.90903 100.97726 0.01912162 0.3401558 #> 56   51.65814  97.32857 0.01948931 0.3263004 #> 57   49.43314  93.64602 0.01993422 0.3127952 #> 58   47.24622  89.94505 0.02043025 0.2996973 #> 59   45.11935  86.25188 0.02088596 0.2870678 #> 60   43.06939  82.59638 0.02124022 0.2749484 #> 61   41.09838  78.99474 0.02156441 0.2634048 #> 62   39.20367  75.45681 0.02193111 0.2524723 #> 63   37.39429  71.99626 0.02231174 0.2421809 #> 64   35.68283  68.63718 0.02265259 0.2325511 #> 65   34.07260  65.39851 0.02296549 0.2235960 #> 66   32.56284  62.28904 0.02327248 0.2153185 #> 67   31.15820  59.31972 0.02353251 0.2077019 #> 68   29.86086  56.50695 0.02373124 0.2007270 #> 69   28.66398  53.85399 0.02391851 0.1943800 #> 70   27.56353  51.35767 0.02409757 0.1886335 #> 71   26.55832  49.02469 0.02425246 0.1834518 #> 72   25.64515  46.85950 0.02438642 0.1788039 #> 73   24.82282  44.85614 0.02447482 0.1746634 #> 74   24.08561  43.01480 0.02451892 0.1709818 #> 75   23.42373  41.33087 0.02453936 0.1677016 #> 76   22.83664  39.79052 0.02448357 0.1647855 #> 77   22.31847  38.39343 0.02437053 0.1622021 #> 78   21.85636  37.12669 0.02425627 0.1599148 #> 79   21.45346  35.97917 0.02405668 0.1578828 #> 80   21.08941  34.93098 0.02389091 0.1560776 #> 81   20.77568  33.99057 0.02364965 0.1544771 #> 82   20.48409  33.12300 0.02350583 0.1530606 #> 83   20.24711  32.37160 0.02325953 0.1518468 #> 84   19.99974  31.65578 0.02329766 0.1507761 #> 85   19.82391  31.06334 0.02288498 0.1496960 #> 86   19.63743  30.50491 0.02269227 0.1486946 #> 87   19.47584  29.99916 0.02260628 0.1479394 #> 88   19.35129  29.56940 0.02230296 0.1471778 #> 89   19.21871  29.15513 0.02208602 0.1464108 #> 90   19.10439  28.77748 0.02194645 0.1458264 #> 91   19.01208  28.44985 0.02167320 0.1452267 #> 92   18.91162  28.12768 0.02146711 0.1446157 #> 93   18.81471  27.82571 0.02140362 0.1441489 #> 94   18.73859  27.56047 0.02117302 0.1436420 #> 95   18.66191  27.30120 0.02096670 0.1431458 #> 96   18.57918  27.05175 0.02091661 0.1427395 #> 97   18.52125  26.83230 0.02067105 0.1423090 #> 98   18.45988  26.62218 0.02049173 0.1419016 #> 99   18.38980  26.41711 0.02044983 0.1415489 #> 100  18.34637  26.23856 0.02020362 0.1411843 #> 101  18.29744  26.06705 0.02004214 0.1408466 #> 102  18.23352  25.89383 0.02003081 0.1405318 #> 103  18.19164  25.74530 0.01987303 0.1402258 #> 104  18.16162  25.60646 0.01965370 0.1399469 #> 105  18.09734  25.45772 0.01971973 0.1396710 #> 106  18.07183  25.33311 0.01949974 0.1394099 #> 107  18.03215  25.21040 0.01943330 0.1391770 #> 108  17.98865  25.08531 0.01940238 0.1389500 #> 109  17.95098  24.98006 0.01934366 0.1387170 #> 110  17.93885  24.88687 0.01910933 0.1385121 #> 111  17.88954  24.78293 0.01917116 0.1382970 #> 112  17.86962  24.70027 0.01902344 0.1380961 #> 113  17.84707  24.62154 0.01892032 0.1379114 #> 114  17.81101  24.53426 0.01891677 0.1377216 #> 115  17.79047  24.46457 0.01881874 0.1375462 #> 116  17.76850  24.39696 0.01874305 0.1373779 #> 117  17.74545  24.32319 0.01867010 0.1372119 #> 118  17.71063  24.25842 0.01871888 0.1370527 #> 119  17.71116  24.20341 0.01848524 0.1369029 #> 120  17.66461  24.12589 0.01862474 0.1367512 #> 121  17.66088  24.07239 0.01842345 0.1365949 #> 122  17.63447  24.01230 0.01841966 0.1364492 #> 123  17.61185  23.94631 0.01838547 0.1363143 #> 124  17.59656  23.89375 0.01831144 0.1361838 #> 125  17.57432  23.84183 0.01830724 0.1360619 #> 126  17.55869  23.78236 0.01822589 0.1359311 #> 127  17.54073  23.73050 0.01817656 0.1358011 #> 128  17.52838  23.68481 0.01810650 0.1356900 #> 129  17.50441  23.62617 0.01812241 0.1355830 #> 130  17.49388  23.57967 0.01803668 0.1354733 #> 131  17.47589  23.53364 0.01800993 0.1353572 #> 132  17.45754  23.48322 0.01797747 0.1352385 #> 133  17.44602  23.43928 0.01790741 0.1351322 #> 134  17.43336  23.39745 0.01786024 0.1350357 #> 135  17.41234  23.34965 0.01786687 0.1349294 #> 136  17.40497  23.30858 0.01776393 0.1348219 #> 137  17.38550  23.26701 0.01777706 0.1347264 #> 138  17.37332  23.22565 0.01772797 0.1346315 #> 139  17.36081  23.18967 0.01769353 0.1345407 #> 140  17.34868  23.15325 0.01766283 0.1344576 #> 141  17.33361  23.11499 0.01766050 0.1343800 #> 142  17.33155  23.09148 0.01757074 0.1343063 #> 143  17.31046  23.05419 0.01763810 0.1342448 #> 144  17.31555  23.03251 0.01751948 0.1342016 #> 145  17.28115  22.99633 0.01772503 0.1341615 #> 146  17.30247  22.98747 0.01745017 0.1340841 #> 147  17.26515  22.94857 0.01759075 0.1339576 #> 148  17.26840  22.93759 0.01744519 0.1338560 #> 149  17.26815  22.92123 0.01737379 0.1338061 #> 150  17.23917  22.88730 0.01753343 0.1337638 #> 151  17.25380  22.88193 0.01731527 0.1336800 #> 152  17.23484  22.85383 0.01733632 0.1335775 #> 153  17.22331  22.82814 0.01733726 0.1335157 #> 154  17.23231  22.81803 0.01720790 0.1334788 #> 155  17.20709  22.78728 0.01731037 0.1334073 #> 156  17.20583  22.76919 0.01720963 0.1333218 #> 157  17.20079  22.75128 0.01716987 0.1332642 #> 158  17.18292  22.72430 0.01724168 0.1332203 #> 159  17.18347  22.70880 0.01715875 0.1331644 #> 160  17.16820  22.68656 0.01718856 0.1330941 #> 161  17.16698  22.67139 0.01711558 0.1330325 #> 162  17.16062  22.65629 0.01709819 0.1329818 #> 163  17.14534  22.63556 0.01714992 0.1329312 #> 164  17.15091  22.62564 0.01702911 0.1328728 #> 165  17.13435  22.60651 0.01708022 0.1328082 #> 166  17.12914  22.58965 0.01704250 0.1327498 #> 167  17.12807  22.57579 0.01698223 0.1327002 #> 168  17.11175  22.55549 0.01704234 0.1326483 #> 169  17.11417  22.54078 0.01694166 0.1325898 #> 170  17.09871  22.52135 0.01698649 0.1325288 #> 171  17.09552  22.50710 0.01693641 0.1324717 #> 172  17.09214  22.49036 0.01688941 0.1324196 #> 173  17.07745  22.47151 0.01693996 0.1323702 #> 174  17.07973  22.46056 0.01686089 0.1323266 #> 175  17.06517  22.43611 0.01691041 0.1322854 #> 176  17.06181  22.42456 0.01687788 0.1322404 #> 177  17.05326  22.40639 0.01687718 0.1321918 #> 178  17.04973  22.39306 0.01684198 0.1321454 #> 179  17.04434  22.37966 0.01682299 0.1320990 #> 180  17.03833  22.36742 0.01681275 0.1320544 #> 181  17.03879  22.35432 0.01674982 0.1320143 #> 182  17.02162  22.33428 0.01683128 0.1319761 #> 183  17.02952  22.32810 0.01671239 0.1319346 #> 184  17.01516  22.30757 0.01675859 0.1318860 #> 185  17.01153  22.29440 0.01672478 0.1318398 #> 186  17.00545  22.27884 0.01670907 0.1317939 #> 187  16.99896  22.26471 0.01670023 0.1317493 #> 188  16.99821  22.25034 0.01664553 0.1317088 #> 189  16.98424  22.23098 0.01670326 0.1316735 #> 190  16.98877  22.22224 0.01661739 0.1316395 #> 191  16.97197  22.19886 0.01669724 0.1316076 #> 192  16.98023  22.19510 0.01658640 0.1315737 #> 193  16.96098  22.17628 0.01668637 0.1315342 #> 194  16.97062  22.17128 0.01654852 0.1314870 #> 195  16.95835  22.15936 0.01659032 0.1314397 #> 196  16.95742  22.15170 0.01654929 0.1314017 #> 197  16.95791  22.14238 0.01649891 0.1313690 #> 198  16.94660  22.12874 0.01654701 0.1313389 #> 199  16.95179  22.12420 0.01646564 0.1313090 #> 200  16.93775  22.10438 0.01652597 0.1312764 #> 201  16.94481  22.10275 0.01642388 0.1312378 #> 202  16.93049  22.08532 0.01648117 0.1311963 #> 203  16.93337  22.07756 0.01640686 0.1311581 #> 204  16.92687  22.06677 0.01641270 0.1311232 #> 205  16.92020  22.05248 0.01641692 0.1310903 #> 206  16.92011  22.04379 0.01637454 0.1310597 #> 207  16.91204  22.03129 0.01639866 0.1310320 #> 208  16.91214  22.02149 0.01635873 0.1310070 #> 209  16.89930  22.01009 0.01642817 0.1309817 #> 210  16.90663  22.00468 0.01632975 0.1309546 #> 211  16.89034  21.99017 0.01642132 0.1309261 #> 212  16.89895  21.98959 0.01631496 0.1308951 #> 213  16.88288  21.97270 0.01639443 0.1308598 #> 214  16.88880  21.97260 0.01630564 0.1308224 #> 215  16.88251  21.96353 0.01631340 0.1307888 #> 216  16.87732  21.95284 0.01631655 0.1307625 #> 217  16.88304  21.95287 0.01624608 0.1307415 #> 218  16.86899  21.93585 0.01632453 0.1307228 #> 219  16.87714  21.93240 0.01623304 0.1307068 #> 220  16.85947  21.91680 0.01634695 0.1306903 #> 221  16.86988  21.91494 0.01622834 0.1306645 #> 222  16.85229  21.89596 0.01631272 0.1306240 #> 223  16.85730  21.89618 0.01622939 0.1305837 #> 224  16.85430  21.88583 0.01621110 0.1305543 #> 225  16.84208  21.87434 0.01628146 0.1305355 #> 226  16.85350  21.87514 0.01616985 0.1305216 #> 227  16.83553  21.85907 0.01628710 0.1305065 #> 228  16.84516  21.86051 0.01617789 0.1304785 #> 229  16.83455  21.84846 0.01621572 0.1304419 #> 230  16.83792  21.84616 0.01615122 0.1304099 #> 231  16.83299  21.83891 0.01616018 0.1303867 #> 232  16.82916  21.82931 0.01616184 0.1303690 #> 233  16.83392  21.82792 0.01610274 0.1303531 #> 234  16.82036  21.81409 0.01618327 0.1303362 #> 235  16.82716  21.80908 0.01609654 0.1303156 #> 236  16.81250  21.79788 0.01618094 0.1302892 #> 237  16.81925  21.79479 0.01609167 0.1302629 #> 238  16.80925  21.78427 0.01614055 0.1302403 #> 239  16.80967  21.78138 0.01611381 0.1302214 #> 240  16.80852  21.77526 0.01609932 0.1302058 #> 241  16.80143  21.76492 0.01613048 0.1301904 #> 242  16.80258  21.76468 0.01610328 0.1301736 #> 243  16.79903  21.75423 0.01609475 0.1301494 #> 244  16.79503  21.75133 0.01609648 0.1301206 #> 245  16.79674  21.74868 0.01604964 0.1300925 #> 246  16.79145  21.74013 0.01606167 0.1300711 #> 247  16.79146  21.73843 0.01604202 0.1300539 #> 248  16.78631  21.73178 0.01605991 0.1300369 #> 249  16.78663  21.72808 0.01603318 0.1300182 #> 250  16.77645  21.71863 0.01608490 0.1299954 #> 251  16.78213  21.71862 0.01601093 0.1299706 #> 252  16.77182  21.70655 0.01605967 0.1299476 #> 253  16.77413  21.70441 0.01601765 0.1299286 #> 254  16.77252  21.70133 0.01601220 0.1299137 #> 255  16.77052  21.69327 0.01600377 0.1298995 #> 256  16.76756  21.69035 0.01600979 0.1298842 #> 257  16.77250  21.68781 0.01594688 0.1298677 #> 258  16.75853  21.67697 0.01603410 0.1298496 #> 259  16.76795  21.67728 0.01593725 0.1298339 #> 260  16.75224  21.66353 0.01604327 0.1298237 #> 261  16.76273  21.66734 0.01595336 0.1298191 #> 262  16.74409  21.65052 0.01608374 0.1298124 #> 263  16.76005  21.65949 0.01594011 0.1297940 #> 264  16.74089  21.64371 0.01604921 0.1297600 #> 265  16.75217  21.64893 0.01592282 0.1297237 #> 266  16.74335  21.64136 0.01596323 0.1296987 #> 267  16.74063  21.63709 0.01596956 0.1296876 #> 268  16.74634  21.64055 0.01591945 0.1296820 #> 269  16.73415  21.63003 0.01599761 0.1296697 #> 270  16.74417  21.63561 0.01589780 0.1296486 #> 271  16.73157  21.62630 0.01597012 0.1296253 #> 272  16.73825  21.62832 0.01589629 0.1296064 #> 273  16.73118  21.62293 0.01593526 0.1295919 #> 274  16.73277  21.62078 0.01590365 0.1295772 #> 275  16.72900  21.61789 0.01591292 0.1295580 #> 276  16.72684  21.61219 0.01590157 0.1295362 #> 277  16.72807  21.61094 0.01586993 0.1295170 #> 278  16.72005  21.60370 0.01591609 0.1295041 #> 279  16.72536  21.60117 0.01585618 0.1294939 #> 280  16.71494  21.59375 0.01592314 0.1294814 #> 281  16.72028  21.59209 0.01585807 0.1294649 #> 282  16.71193  21.58495 0.01590064 0.1294454 #> 283  16.71602  21.58465 0.01584640 0.1294271 #> 284  16.70961  21.57806 0.01587757 0.1294122 #> 285  16.71255  21.57806 0.01584084 0.1294009 #> 286  16.70636  21.57059 0.01587228 0.1293895 #> 287  16.70914  21.57027 0.01583366 0.1293755 #> 288  16.70313  21.56313 0.01585849 0.1293586 #> 289  16.70409  21.56218 0.01583145 0.1293413 #> 290  16.70119  21.55728 0.01583365 0.1293254 #> 291  16.70082  21.55481 0.01581962 0.1293118 #> 292  16.69995  21.55188 0.01581125 0.1293001 #> 293  16.69917  21.54791 0.01580149 0.1292892 #> 294  16.69536  21.54483 0.01581893 0.1292782 #> 295  16.69801  21.54269 0.01578064 0.1292659 #> 296  16.69113  21.53888 0.01582064 0.1292518 #> 297  16.69634  21.53870 0.01576094 0.1292375 #> 298  16.68667  21.53197 0.01582325 0.1292258 #> 299  16.69482  21.53525 0.01575188 0.1292203 #> 300  16.67891  21.52321 0.01587478 0.1292228 #> 301  16.69631  21.53326 0.01574766 0.1292318 #> 302  16.66982  21.51483 0.01595849 0.1292399 #> 303  16.69653  21.53139 0.01574208 0.1292309 #> 304  16.66680  21.51040 0.01593725 0.1291989 #> 305  16.68634  21.52216 0.01574137 0.1291553 #> 306  16.67380  21.51309 0.01580442 0.1291228 #> 307  16.67306  21.51070 0.01579618 0.1291116 #> 308  16.67952  21.51462 0.01574691 0.1291126 #> 309  16.66536  21.50353 0.01584991 0.1291090 #> 310  16.67986  21.51245 0.01572169 0.1290935 #> 311  16.66367  21.50007 0.01582176 0.1290712 #> 312  16.67492  21.50555 0.01571314 0.1290521 #> 313  16.66874  21.50148 0.01574676 0.1290381 #> 314  16.66508  21.49672 0.01576149 0.1290280 #> 315  16.67348  21.50196 0.01568471 0.1290164 #> 316  16.65822  21.49040 0.01578822 0.1290045 #> 317  16.67017  21.49629 0.01568068 0.1289919 #> 318  16.65798  21.48734 0.01576104 0.1289796 #> 319  16.66170  21.48703 0.01571462 0.1289658 #> 320  16.65843  21.48438 0.01572138 0.1289481 #> 321  16.65466  21.47960 0.01572897 0.1289299 #> 322  16.65840  21.48081 0.01568448 0.1289161 #> 323  16.65056  21.47425 0.01573493 0.1289081 #> 324  16.65534  21.47464 0.01568674 0.1289008 #> 325  16.64701  21.46868 0.01573935 0.1288899 #> 326  16.65335  21.47101 0.01567262 0.1288747 #> 327  16.64206  21.46199 0.01574002 0.1288573 #> 328  16.64783  21.46452 0.01567954 0.1288431 #> 329  16.64360  21.46009 0.01569919 0.1288326 #> 330  16.64211  21.45774 0.01570014 0.1288240 #> 331  16.64355  21.45835 0.01567904 0.1288145 #> 332  16.63982  21.45521 0.01569495 0.1288027 #> 333  16.64235  21.45503 0.01565941 0.1287892 #> 334  16.63905  21.45423 0.01567458 0.1287770 #> 335  16.64141  21.45562 0.01564587 0.1287667 #> 336  16.63815  21.45375 0.01566310 0.1287584 #> 337  16.64194  21.45838 0.01563008 0.1287515 #> 338  16.63461  21.45243 0.01567840 0.1287450 #> 339  16.64147  21.45868 0.01562083 0.1287378 #> 340  16.63105  21.45050 0.01569114 0.1287297 #> 341  16.64024  21.45712 0.01561434 0.1287229 #> 342  16.62627  21.44767 0.01571670 0.1287180 #> 343  16.63982  21.45624 0.01561014 0.1287163 #> 344  16.62113  21.44417 0.01575197 0.1287138 #> 345  16.63942  21.45569 0.01560269 0.1287062 #> 346  16.61917  21.44172 0.01574150 0.1286899 #> 347  16.63294  21.45110 0.01561236 0.1286664 #> 348  16.62129  21.44219 0.01567744 0.1286435 #> 349  16.62366  21.44279 0.01564188 0.1286276 #> 350  16.62465  21.44316 0.01562645 0.1286202 #> 351  16.61837  21.43775 0.01567041 0.1286176 #> 352  16.62505  21.44022 0.01561338 0.1286148 #> 353  16.61437  21.43342 0.01568954 0.1286083 #> 354  16.62521  21.43895 0.01559269 0.1285974 #> 355  16.61172  21.42999 0.01568425 0.1285851 #> 356  16.62317  21.43710 0.01558466 0.1285743 #> 357  16.61234  21.42907 0.01565791 0.1285654 #> 358  16.61884  21.43491 0.01560176 0.1285571 #> 359  16.61424  21.42974 0.01562317 0.1285462 #> 360  16.61404  21.42969 0.01561140 0.1285327 #> 361  16.61351  21.42776 0.01559961 0.1285191 #> 362  16.61222  21.42596 0.01559740 0.1285083 #> 363  16.61158  21.42476 0.01559377 0.1285009 #> 364  16.60978  21.42142 0.01559797 0.1284943 #> 365  16.61171  21.42253 0.01557653 0.1284880 #> 366  16.60471  21.41504 0.01561822 0.1284799 #> 367  16.61180  21.41859 0.01555296 0.1284709 #> 368  16.60028  21.40889 0.01562910 0.1284613 #> 369  16.60995  21.41364 0.01554420 0.1284533 #> 370  16.59702  21.40318 0.01563661 0.1284488 #> 371  16.60814  21.40897 0.01554530 0.1284454 #> 372  16.59511  21.40087 0.01564311 0.1284422 #> 373  16.60829  21.40729 0.01553234 0.1284362 #> 374  16.59067  21.39648 0.01565851 0.1284254 #> 375  16.60818  21.40812 0.01550864 0.1284104 #> 376  16.59160  21.39618 0.01561871 0.1283941 #> 377  16.60196  21.40417 0.01552618 0.1283797 #> 378  16.59461  21.39874 0.01557187 0.1283696 #> 379  16.59673  21.40071 0.01554876 0.1283620 #> 380  16.59442  21.39891 0.01555862 0.1283545 #> 381  16.59325  21.39820 0.01555711 0.1283439 #> 382  16.59148  21.39632 0.01555639 0.1283305 #> 383  16.58906  21.39456 0.01556197 0.1283177 #> 384  16.59095  21.39462 0.01553586 0.1283079 #> 385  16.58611  21.39133 0.01556632 0.1283011 #> 386  16.59039  21.39355 0.01552782 0.1282965 #> 387  16.58337  21.38762 0.01557417 0.1282906 #> 388  16.58910  21.39060 0.01552131 0.1282831 #> 389  16.58182  21.38454 0.01556685 0.1282744 #> 390  16.58892  21.38871 0.01550342 0.1282664 #> 391  16.57888  21.38166 0.01557446 0.1282607 #> 392  16.59014  21.38705 0.01548220 0.1282581 #> 393  16.57149  21.37403 0.01562366 0.1282569 #> 394  16.59005  21.38560 0.01547685 0.1282541 #> 395  16.56693  21.36930 0.01564548 0.1282461 #> 396  16.58619  21.38215 0.01548382 0.1282326 #> 397  16.56862  21.37052 0.01560248 0.1282159 #> 398  16.58043  21.37842 0.01549539 0.1281997 #> 399  16.57110  21.37180 0.01555267 0.1281857 #> 400  16.57625  21.37610 0.01550147 0.1281730 #> 401  16.57203  21.37258 0.01552073 0.1281607 #> 402  16.57175  21.37190 0.01550989 0.1281485 #> 403  16.57137  21.37142 0.01550145 0.1281374 #> 404  16.56595  21.36666 0.01553359 0.1281295 #> 405  16.57333  21.37086 0.01547116 0.1281249 #> 406  16.56111  21.36200 0.01556151 0.1281223 #> 407  16.57269  21.36907 0.01546872 0.1281195 #> 408  16.56050  21.36022 0.01555552 0.1281135 #> 409  16.57163  21.36765 0.01546055 0.1281042 #> 410  16.55990  21.35828 0.01553640 0.1280921 #> 411  16.56901  21.36509 0.01545292 0.1280776 #> 412  16.55847  21.35687 0.01551791 0.1280632 #> 413  16.56842  21.36199 0.01542566 0.1280497 #> 414  16.55624  21.35306 0.01550551 0.1280370 #> 415  16.56375  21.35460 0.01543114 0.1280254 #> 416  16.55563  21.34845 0.01547789 0.1280107 #> 417  16.55600  21.34780 0.01546003 0.1279970 #> 418  16.55618  21.34619 0.01544602 0.1279869 #> 419  16.54952  21.34029 0.01548682 0.1279785 #> 420  16.55443  21.34132 0.01543833 0.1279711 #> 421  16.54759  21.33370 0.01548077 0.1279652 #> 422  16.55237  21.33414 0.01543543 0.1279607 #> 423  16.54285  21.32687 0.01550218 0.1279555 #> 424  16.55155  21.33279 0.01543058 0.1279507 #> 425  16.53672  21.32207 0.01553930 0.1279465 #> 426  16.55205  21.33301 0.01541970 0.1279438 #> 427  16.53034  21.31718 0.01558239 0.1279414 #> 428  16.55143  21.33163 0.01541781 0.1279385 #> 429  16.52690  21.31363 0.01559749 0.1279318 #> 430  16.54760  21.32751 0.01542354 0.1279170 #> 431  16.52779  21.31254 0.01555137 0.1278950 #> 432  16.54060  21.32229 0.01542953 0.1278700 #> 433  16.53126  21.31474 0.01547862 0.1278491 #> 434  16.53434  21.31605 0.01544198 0.1278373 #> 435  16.53523  21.31655 0.01543169 0.1278339 #> 436  16.52789  21.31054 0.01548659 0.1278340 #> 437  16.53800  21.31801 0.01540876 0.1278329 #> 438  16.52430  21.30939 0.01551022 0.1278281 #> 439  16.53903  21.31973 0.01538828 0.1278188 #> 440  16.52283  21.30923 0.01550180 0.1278072 #> 441  16.53519  21.31787 0.01539423 0.1277943 #> 442  16.52344  21.30956 0.01547208 0.1277823 #> 443  16.52864  21.31194 0.01541919 0.1277710 #> 444  16.52383  21.30851 0.01544526 0.1277604 #> 445  16.52382  21.30787 0.01543449 0.1277505 #> 446  16.52531  21.30792 0.01541364 0.1277425 #> 447  16.51946  21.30481 0.01545485 0.1277375 #> 448  16.52632  21.30676 0.01539430 0.1277335 #> 449  16.51519  21.29946 0.01547834 0.1277317 #> 450  16.52623  21.30605 0.01539107 0.1277305 #> 451  16.51100  21.29406 0.01550364 0.1277285 #> 452  16.52715  21.30406 0.01537435 0.1277246 #> 453  16.50895  21.29288 0.01550960 0.1277185 #> 454  16.52398  21.30212 0.01538402 0.1277096 #> 455  16.50893  21.29244 0.01548862 0.1276979 #> 456  16.52225  21.30196 0.01537439 0.1276853 #> 457  16.51033  21.29334 0.01545242 0.1276726 #> 458  16.51760  21.29810 0.01538493 0.1276612 #> 459  16.51385  21.29620 0.01540529 0.1276518 #> 460  16.51378  21.29577 0.01539814 0.1276446 #> 461  16.51579  21.29732 0.01537746 0.1276392 #> 462  16.50999  21.29289 0.01541701 0.1276348 #> 463  16.51674  21.29691 0.01536029 0.1276308 #> 464  16.50673  21.29052 0.01543421 0.1276273 #> 465  16.51700  21.29637 0.01535046 0.1276240 #> 466  16.50276  21.28790 0.01545877 0.1276213 #> 467  16.51628  21.29560 0.01534945 0.1276179 #> 468  16.50310  21.28640 0.01544581 0.1276134 #> 469  16.51325  21.29340 0.01536061 0.1276060 #> 470  16.50319  21.28699 0.01542911 0.1275966 #> 471  16.51015  21.29125 0.01536361 0.1275852 #> 472  16.50438  21.28772 0.01539790 0.1275747 #> 473  16.50822  21.29018 0.01536002 0.1275665 #> 474  16.50358  21.28712 0.01539050 0.1275612 #> 475  16.50478  21.28793 0.01537757 0.1275574 #> 476  16.50515  21.28838 0.01537215 0.1275546 #> 477  16.50229  21.28694 0.01539095 0.1275507 #> 478  16.50578  21.29004 0.01536011 0.1275456 #> 479  16.50021  21.28681 0.01539702 0.1275389 #> 480  16.50527  21.29099 0.01535243 0.1275322 #> 481  16.49924  21.28764 0.01539340 0.1275258 #> 482  16.50461  21.29137 0.01534735 0.1275208 #> 483  16.49669  21.28678 0.01540611 0.1275176 #> 484  16.50528  21.29223 0.01533888 0.1275169 #> 485  16.49228  21.28310 0.01544018 0.1275188 #> 486  16.50616  21.29280 0.01533889 0.1275238 #> 487  16.48832  21.27901 0.01547865 0.1275289 #> 488  16.50752  21.29373 0.01533731 0.1275325 #> 489  16.48536  21.27805 0.01550365 0.1275297 #> 490  16.50743  21.29551 0.01532760 0.1275195 #> 491  16.48504  21.27991 0.01548431 0.1275049 #> 492  16.50360  21.29335 0.01532824 0.1274901 #> 493  16.48942  21.28448 0.01542737 0.1274793 #> 494  16.49914  21.29024 0.01534432 0.1274721 #> 495  16.49288  21.28732 0.01538663 0.1274644 #> 496  16.49365  21.28744 0.01537003 0.1274543 #> 497  16.49705  21.29103 0.01533466 0.1274432 #> 498  16.49000  21.28659 0.01538248 0.1274363 #> 499  16.49851  21.29273 0.01531693 0.1274356 #> 500  16.48853  21.28667 0.01539761 0.1274386 #> 501  16.49861  21.29319 0.01531990 0.1274388 #> 502  16.48734  21.28625 0.01540172 0.1274331 #> 503  16.49592  21.29218 0.01532474 0.1274218 #> 504  16.48801  21.28710 0.01537312 0.1274090 #> 505  16.49416  21.29241 0.01531764 0.1273991 #> 506  16.48907  21.28983 0.01535216 0.1273933 #> 507  16.49275  21.29416 0.01532236 0.1273891 #> 508  16.49070  21.29386 0.01533444 0.1273839 #> 509  16.49112  21.29535 0.01532585 0.1273768 #> 510  16.49280  21.29679 0.01530505 0.1273685 #> 511  16.48841  21.29463 0.01533260 0.1273611 #> 512  16.49328  21.29782 0.01528945 0.1273555 #> 513  16.48634  21.29318 0.01533915 0.1273518 #> 514  16.49351  21.29865 0.01528213 0.1273490 #> 515  16.48398  21.29060 0.01535117 0.1273471 #> 516  16.49246  21.29766 0.01528624 0.1273454 #> 517  16.47903  21.28612 0.01538175 0.1273414 #> 518  16.49216  21.29568 0.01527946 0.1273389 #> 519  16.47648  21.28444 0.01539879 0.1273387 #> 520  16.49235  21.29421 0.01527550 0.1273387 #> 521  16.47440  21.28366 0.01541552 0.1273386 #> 522  16.49476  21.29741 0.01525635 0.1273358 #> 523  16.47399  21.28280 0.01540746 0.1273282 #> 524  16.49250  21.29784 0.01525546 0.1273147 #> 525  16.47759  21.28755 0.01535363 0.1272987 #> 526  16.48835  21.29403 0.01525436 0.1272832 #> 527  16.47863  21.28753 0.01531725 0.1272713 #> 528  16.48443  21.29007 0.01526324 0.1272639 #> 529  16.47910  21.28449 0.01529692 0.1272595 #> 530  16.47761  21.28380 0.01530563 0.1272562 #> 531  16.48239  21.28549 0.01526380 0.1272534 #> 532  16.47178  21.27797 0.01534267 0.1272512 #> 533  16.48346  21.28647 0.01525035 0.1272478 #> 534  16.46889  21.27535 0.01535793 0.1272452 #> 535  16.48254  21.28551 0.01525172 0.1272426 #> 536  16.46880  21.27711 0.01535657 0.1272405 #> 537  16.48128  21.28605 0.01525822 0.1272374 #> 538  16.46794  21.27678 0.01535612 0.1272331 #> 539  16.48164  21.28806 0.01524719 0.1272265 #> 540  16.46675  21.27664 0.01535181 0.1272188 #> 541  16.48072  21.28790 0.01523848 0.1272101 #> 542  16.46795  21.28020 0.01532956 0.1272017 #> 543  16.47819  21.28802 0.01524440 0.1271939 #> 544  16.47098  21.28514 0.01529727 0.1271886 #> 545  16.47524  21.28893 0.01526156 0.1271842 #> 546  16.47198  21.28759 0.01528394 0.1271804 #> 547  16.47313  21.28888 0.01527192 0.1271764 #> 548  16.47178  21.28780 0.01527707 0.1271715 #> 549  16.47125  21.28761 0.01527558 0.1271656 #> 550  16.47191  21.28790 0.01526408 0.1271594 #> 551  16.46992  21.28630 0.01527309 0.1271535 #> 552  16.47166  21.28881 0.01525624 0.1271481 #> 553  16.47013  21.28802 0.01526429 0.1271440 #> 554  16.47247  21.28981 0.01524343 0.1271409 #> 555  16.46819  21.28709 0.01527429 0.1271386 #> 556  16.47217  21.28940 0.01524121 0.1271367 #> 557  16.46590  21.28616 0.01528945 0.1271353 #> 558  16.47271  21.29111 0.01523714 0.1271348 #> 559  16.46308  21.28485 0.01531126 0.1271346 #> 560  16.47455  21.29473 0.01522687 0.1271352 #> 561  16.46019  21.28477 0.01533862 0.1271371 #> 562  16.47735  21.29837 0.01521276 0.1271401 #> 563  16.45513  21.28347 0.01538914 0.1271456 #> 564  16.47968  21.30054 0.01520581 0.1271502 #> 565  16.45029  21.27982 0.01543263 0.1271525 #> 566  16.47778  21.29873 0.01521478 0.1271453 #> 567  16.45030  21.27751 0.01540300 0.1271262 #> 568  16.47055  21.29305 0.01522194 0.1270981 #> 569  16.45647  21.28129 0.01529866 0.1270699 #> 570  16.46226  21.28538 0.01523549 0.1270509 #> 571  16.46283  21.28528 0.01522484 0.1270453 #> 572  16.45542  21.27783 0.01528253 0.1270497 #> 573  16.46651  21.28577 0.01520543 0.1270571 #> 574  16.45082  21.27365 0.01532811 0.1270614 #> 575  16.46790  21.28585 0.01519526 0.1270589 #> 576  16.44947  21.27244 0.01532622 0.1270496 #> 577  16.46559  21.28575 0.01519296 0.1270367 #> 578  16.45225  21.27600 0.01528193 0.1270242 #> 579  16.46040  21.28362 0.01521333 0.1270152 #> 580  16.45779  21.28352 0.01523019 0.1270096 #> 581  16.45602  21.28199 0.01523895 0.1270053 #> 582  16.46035  21.28748 0.01520455 0.1270005 #> 583  16.45395  21.28295 0.01524850 0.1269955 #> 584  16.46063  21.28795 0.01519455 0.1269922 #> 585  16.45252  21.28414 0.01525742 0.1269903 #> 586  16.46149  21.28985 0.01518693 0.1269893 #> 587  16.45139  21.28368 0.01526445 0.1269882 #> 588  16.46184  21.29203 0.01518246 0.1269847 #> 589  16.45088  21.28371 0.01525873 0.1269781 #> 590  16.45849  21.28985 0.01519301 0.1269694 #> 591  16.45404  21.28682 0.01521788 0.1269601 #> 592  16.45515  21.28793 0.01520219 0.1269524 #> 593  16.45534  21.28922 0.01519736 0.1269474 #> 594  16.45396  21.28884 0.01520579 0.1269444 #> 595  16.45567  21.29039 0.01519090 0.1269421 #> 596  16.45217  21.28958 0.01521778 0.1269398 #> 597  16.45597  21.29201 0.01518563 0.1269371 #> 598  16.44944  21.28801 0.01523224 0.1269329 #> 599  16.45535  21.29205 0.01518274 0.1269287 #> 600  16.44843  21.28817 0.01523194 0.1269236"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_marginal.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a marginal matrix from a BirdFlowR model — get_marginal","title":"Return a marginal matrix from a BirdFlowR model — get_marginal","text":"Marginals BirdFlow models stored cell [, j] represents probability bird state prior timestep state j next.  Thus number rows marginal equals number cells within dynamic mask prior timestep columns count equal included cells following timestep.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_marginal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a marginal matrix from a BirdFlowR model — get_marginal","text":"","code":"get_marginal(x, marginal = NULL, from = NULL)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_marginal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a marginal matrix from a BirdFlowR model — get_marginal","text":"x BirdFlow object marginal marginal code, e.g. \"M_01-02\" first timestep associated marginal. Note marginals always forward second marginal  + 1 1 (last timestep).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_marginal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a marginal matrix from a BirdFlowR model — get_marginal","text":" marginal matrix","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract mask from BirdFlow model — get_mask","title":"Extract mask from BirdFlow model — get_mask","text":"get_mask() extracts static mask BirdFlow model.  static mask logical raster indicating cells included model (timestep).  also cells (row major order) correspond distribution values, location indices.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract mask from BirdFlow model — get_mask","text":"","code":"get_mask(bf, format = \"SpatRaster\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract mask from BirdFlow model — get_mask","text":"bf BirdFlow model format One 'SpatRaster' terra::SpatRaster object, 'numeric' matrix array, 'dataframe' raster data suitable plotting ggplot2::geom_raster()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract mask from BirdFlow model — get_mask","text":"return type get_mask()depends format argument: \"SpatRaster\" (default) returns terra::SpatRaster object. \"numeric\" returns mask matrix. \"dataframe\" return data frame suitable plotting ggplot2::geom_raster columns: row, col row column indices cell. x, y x y coordinates cell center. location index (bf) cell. mask   TRUE cells included model, FALSE excluded cells.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract mask from BirdFlow model — get_mask","text":"","code":"bf <- BirdFlowModels::amewoo m <- get_mask(bf)  if (FALSE) { # \\dontrun{ library(terra) plot(m) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve BirdFlow metadata — get_metadata","title":"Retrieve BirdFlow metadata — get_metadata","text":"get_metadata retrieves information BirdFlow model: created, version eBird Status & Trends data used, whether sparsified,  etc.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve BirdFlow metadata — get_metadata","text":"","code":"get_metadata(x, what)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve BirdFlow metadata — get_metadata","text":"x BirdFlow model Indicates metadata return. default \"\" returns complete list. Options described details.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve BirdFlow metadata — get_metadata","text":"Metadata BirdFlow model. Potentially list.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve BirdFlow metadata — get_metadata","text":"may used options:","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve BirdFlow metadata — get_metadata","text":"","code":"library(BirdFlowModels) get_metadata(amewoo) #> $has_marginals #> [1] TRUE #>  #> $has_transitions #> [1] FALSE #>  #> $has_distr #> [1] TRUE #>  #> $n_transitions #> [1] 52 #>  #> $n_active #> [1] 342 #>  #> $n_timesteps #> [1] 52 #>  #> $timestep_padding #> [1] 2 #>  #> $ebird_version_year #> [1] 2021 #>  #> $ebird_release_year #> [1] 2022 #>  #> $ebird_access_end_date #> [1] \"2023-11-30\" #>  #> $birdflow_preprocess_date #> [1] \"2023-11-21\" #>  #> $birdflow_model_date #> [1] \"2023-11-21 17:19:27.009766\" #>  #> $birdflow_version #> [1] 3 #>  #> $birdflowr_version #> [1] \"0.1.0.9038\" #>  #> $is_sparse #> [1] FALSE #>  #> $sparse #> [1] NA #>  #> $hyperparameters #> $hyperparameters$dist_pow #> [1] 0.6 #>  #> $hyperparameters$dist_weight #> [1] 0.008658 #>  #> $hyperparameters$ent_weight #> [1] 0.001443 #>  #> $hyperparameters$learning_rate #> [1] 0.1 #>  #> $hyperparameters$normalized #> [1] TRUE #>  #> $hyperparameters$obs_weight #> [1] 1 #>  #> $hyperparameters$rng_seed #> [1] 17 #>  #> $hyperparameters$training_steps #> [1] 600 #>  #>  #> $loss_values #>          dist       ent        obs     total #> 1   215.15869 236.17322 0.57939780 2.1014438 #> 2   210.01872 236.22165 0.52866054 2.0061350 #> 3   204.95619 235.81674 0.48049927 1.9147265 #> 4   200.01207 234.99609 0.43503928 1.8276443 #> 5   195.21609 233.80389 0.39228603 1.7450881 #> 6   190.58633 232.28596 0.35218555 1.6670935 #> 7   186.13089 230.49072 0.31466532 1.5935885 #> 8   181.84903 228.46327 0.27965516 1.5244315 #> 9   177.73326 226.24446 0.24709456 1.4594384 #> 10  173.77129 223.86955 0.21693729 1.3984053 #> 11  169.94862 221.36865 0.18916348 1.3411437 #> 12  166.25012 218.76643 0.16378160 1.2874954 #> 13  162.66167 216.08530 0.14081964 1.2373333 #> 14  159.17067 213.34410 0.12031531 1.1905594 #> 15  155.76617 210.56020 0.10230915 1.1470944 #> 16  152.43875 207.75093 0.08682334 1.1068535 #> 17  149.17995 204.93588 0.07382077 1.0696983 #> 18  145.98276 202.13470 0.06316140 1.0353997 #> 19  142.84262 199.36826 0.05458094 1.0036240 #> 20  139.75818 196.65489 0.04771935 0.9739727 #> 21  136.73073 194.00783 0.04219241 0.9460538 #> 22  133.76320 191.43358 0.03766023 0.9195434 #> 23  130.85825 188.93268 0.03386035 0.8942012 #> 24  128.01682 186.50026 0.03061645 0.8698661 #> 25  125.23743 184.12532 0.02783360 0.8464464 #> 26  122.51659 181.79424 0.02547722 0.8238968 #> 27  119.84933 179.49156 0.02354145 0.8021907 #> 28  117.23013 177.20245 0.02201207 0.7812875 #> 29  114.65356 174.91286 0.02084434 0.7611157 #> 30  112.11458 172.61061 0.01996790 0.7415788 #> 31  109.60916 170.28621 0.01930417 0.7225773 #> 32  107.13448 167.93297 0.01878082 0.7040239 #> 33  104.68911 165.54652 0.01833465 0.6858493 #> 34  102.27284 163.12595 0.01790984 0.6679974 #> 35   99.88613 160.67148 0.01746781 0.6504330 #> 36   97.52901 158.18375 0.01700313 0.6331502 #> 37   95.20029 155.66302 0.01654312 0.6161655 #> 38   92.89687 153.10956 0.01612644 0.5994905 #> 39   90.61395 150.52261 0.01578162 0.5831131 #> 40   88.34538 147.89935 0.01552618 0.5670018 #> 41   86.08443 145.23489 0.01537028 0.5511154 #> 42   83.82442 142.52255 0.01530915 0.5354009 #> 43   81.55951 139.75478 0.01533122 0.5198073 #> 44   79.28568 136.92514 0.01544342 0.5043159 #> 45   77.00089 134.02835 0.01565972 0.4889304 #> 46   74.70551 131.06082 0.01595673 0.4736363 #> 47   72.40195 128.02028 0.01627936 0.4584022 #> 48   70.09305 124.90343 0.01659533 0.4432253 #> 49   67.78003 121.70702 0.01690826 0.4281245 #> 50   65.46175 118.42944 0.01723262 0.4131068 #> 51   63.13724 115.07220 0.01758363 0.3981767 #> 52   60.80972 111.64002 0.01797476 0.3833687 #> 53   58.48853 108.14057 0.01839230 0.3687391 #> 54   56.18575 104.58351 0.01877982 0.3543221 #> 55   53.90903 100.97726 0.01912162 0.3401558 #> 56   51.65814  97.32857 0.01948931 0.3263004 #> 57   49.43314  93.64602 0.01993422 0.3127952 #> 58   47.24622  89.94505 0.02043025 0.2996973 #> 59   45.11935  86.25188 0.02088596 0.2870678 #> 60   43.06939  82.59638 0.02124022 0.2749484 #> 61   41.09838  78.99474 0.02156441 0.2634048 #> 62   39.20367  75.45681 0.02193111 0.2524723 #> 63   37.39429  71.99626 0.02231174 0.2421809 #> 64   35.68283  68.63718 0.02265259 0.2325511 #> 65   34.07260  65.39851 0.02296549 0.2235960 #> 66   32.56284  62.28904 0.02327248 0.2153185 #> 67   31.15820  59.31972 0.02353251 0.2077019 #> 68   29.86086  56.50695 0.02373124 0.2007270 #> 69   28.66398  53.85399 0.02391851 0.1943800 #> 70   27.56353  51.35767 0.02409757 0.1886335 #> 71   26.55832  49.02469 0.02425246 0.1834518 #> 72   25.64515  46.85950 0.02438642 0.1788039 #> 73   24.82282  44.85614 0.02447482 0.1746634 #> 74   24.08561  43.01480 0.02451892 0.1709818 #> 75   23.42373  41.33087 0.02453936 0.1677016 #> 76   22.83664  39.79052 0.02448357 0.1647855 #> 77   22.31847  38.39343 0.02437053 0.1622021 #> 78   21.85636  37.12669 0.02425627 0.1599148 #> 79   21.45346  35.97917 0.02405668 0.1578828 #> 80   21.08941  34.93098 0.02389091 0.1560776 #> 81   20.77568  33.99057 0.02364965 0.1544771 #> 82   20.48409  33.12300 0.02350583 0.1530606 #> 83   20.24711  32.37160 0.02325953 0.1518468 #> 84   19.99974  31.65578 0.02329766 0.1507761 #> 85   19.82391  31.06334 0.02288498 0.1496960 #> 86   19.63743  30.50491 0.02269227 0.1486946 #> 87   19.47584  29.99916 0.02260628 0.1479394 #> 88   19.35129  29.56940 0.02230296 0.1471778 #> 89   19.21871  29.15513 0.02208602 0.1464108 #> 90   19.10439  28.77748 0.02194645 0.1458264 #> 91   19.01208  28.44985 0.02167320 0.1452267 #> 92   18.91162  28.12768 0.02146711 0.1446157 #> 93   18.81471  27.82571 0.02140362 0.1441489 #> 94   18.73859  27.56047 0.02117302 0.1436420 #> 95   18.66191  27.30120 0.02096670 0.1431458 #> 96   18.57918  27.05175 0.02091661 0.1427395 #> 97   18.52125  26.83230 0.02067105 0.1423090 #> 98   18.45988  26.62218 0.02049173 0.1419016 #> 99   18.38980  26.41711 0.02044983 0.1415489 #> 100  18.34637  26.23856 0.02020362 0.1411843 #> 101  18.29744  26.06705 0.02004214 0.1408466 #> 102  18.23352  25.89383 0.02003081 0.1405318 #> 103  18.19164  25.74530 0.01987303 0.1402258 #> 104  18.16162  25.60646 0.01965370 0.1399469 #> 105  18.09734  25.45772 0.01971973 0.1396710 #> 106  18.07183  25.33311 0.01949974 0.1394099 #> 107  18.03215  25.21040 0.01943330 0.1391770 #> 108  17.98865  25.08531 0.01940238 0.1389500 #> 109  17.95098  24.98006 0.01934366 0.1387170 #> 110  17.93885  24.88687 0.01910933 0.1385121 #> 111  17.88954  24.78293 0.01917116 0.1382970 #> 112  17.86962  24.70027 0.01902344 0.1380961 #> 113  17.84707  24.62154 0.01892032 0.1379114 #> 114  17.81101  24.53426 0.01891677 0.1377216 #> 115  17.79047  24.46457 0.01881874 0.1375462 #> 116  17.76850  24.39696 0.01874305 0.1373779 #> 117  17.74545  24.32319 0.01867010 0.1372119 #> 118  17.71063  24.25842 0.01871888 0.1370527 #> 119  17.71116  24.20341 0.01848524 0.1369029 #> 120  17.66461  24.12589 0.01862474 0.1367512 #> 121  17.66088  24.07239 0.01842345 0.1365949 #> 122  17.63447  24.01230 0.01841966 0.1364492 #> 123  17.61185  23.94631 0.01838547 0.1363143 #> 124  17.59656  23.89375 0.01831144 0.1361838 #> 125  17.57432  23.84183 0.01830724 0.1360619 #> 126  17.55869  23.78236 0.01822589 0.1359311 #> 127  17.54073  23.73050 0.01817656 0.1358011 #> 128  17.52838  23.68481 0.01810650 0.1356900 #> 129  17.50441  23.62617 0.01812241 0.1355830 #> 130  17.49388  23.57967 0.01803668 0.1354733 #> 131  17.47589  23.53364 0.01800993 0.1353572 #> 132  17.45754  23.48322 0.01797747 0.1352385 #> 133  17.44602  23.43928 0.01790741 0.1351322 #> 134  17.43336  23.39745 0.01786024 0.1350357 #> 135  17.41234  23.34965 0.01786687 0.1349294 #> 136  17.40497  23.30858 0.01776393 0.1348219 #> 137  17.38550  23.26701 0.01777706 0.1347264 #> 138  17.37332  23.22565 0.01772797 0.1346315 #> 139  17.36081  23.18967 0.01769353 0.1345407 #> 140  17.34868  23.15325 0.01766283 0.1344576 #> 141  17.33361  23.11499 0.01766050 0.1343800 #> 142  17.33155  23.09148 0.01757074 0.1343063 #> 143  17.31046  23.05419 0.01763810 0.1342448 #> 144  17.31555  23.03251 0.01751948 0.1342016 #> 145  17.28115  22.99633 0.01772503 0.1341615 #> 146  17.30247  22.98747 0.01745017 0.1340841 #> 147  17.26515  22.94857 0.01759075 0.1339576 #> 148  17.26840  22.93759 0.01744519 0.1338560 #> 149  17.26815  22.92123 0.01737379 0.1338061 #> 150  17.23917  22.88730 0.01753343 0.1337638 #> 151  17.25380  22.88193 0.01731527 0.1336800 #> 152  17.23484  22.85383 0.01733632 0.1335775 #> 153  17.22331  22.82814 0.01733726 0.1335157 #> 154  17.23231  22.81803 0.01720790 0.1334788 #> 155  17.20709  22.78728 0.01731037 0.1334073 #> 156  17.20583  22.76919 0.01720963 0.1333218 #> 157  17.20079  22.75128 0.01716987 0.1332642 #> 158  17.18292  22.72430 0.01724168 0.1332203 #> 159  17.18347  22.70880 0.01715875 0.1331644 #> 160  17.16820  22.68656 0.01718856 0.1330941 #> 161  17.16698  22.67139 0.01711558 0.1330325 #> 162  17.16062  22.65629 0.01709819 0.1329818 #> 163  17.14534  22.63556 0.01714992 0.1329312 #> 164  17.15091  22.62564 0.01702911 0.1328728 #> 165  17.13435  22.60651 0.01708022 0.1328082 #> 166  17.12914  22.58965 0.01704250 0.1327498 #> 167  17.12807  22.57579 0.01698223 0.1327002 #> 168  17.11175  22.55549 0.01704234 0.1326483 #> 169  17.11417  22.54078 0.01694166 0.1325898 #> 170  17.09871  22.52135 0.01698649 0.1325288 #> 171  17.09552  22.50710 0.01693641 0.1324717 #> 172  17.09214  22.49036 0.01688941 0.1324196 #> 173  17.07745  22.47151 0.01693996 0.1323702 #> 174  17.07973  22.46056 0.01686089 0.1323266 #> 175  17.06517  22.43611 0.01691041 0.1322854 #> 176  17.06181  22.42456 0.01687788 0.1322404 #> 177  17.05326  22.40639 0.01687718 0.1321918 #> 178  17.04973  22.39306 0.01684198 0.1321454 #> 179  17.04434  22.37966 0.01682299 0.1320990 #> 180  17.03833  22.36742 0.01681275 0.1320544 #> 181  17.03879  22.35432 0.01674982 0.1320143 #> 182  17.02162  22.33428 0.01683128 0.1319761 #> 183  17.02952  22.32810 0.01671239 0.1319346 #> 184  17.01516  22.30757 0.01675859 0.1318860 #> 185  17.01153  22.29440 0.01672478 0.1318398 #> 186  17.00545  22.27884 0.01670907 0.1317939 #> 187  16.99896  22.26471 0.01670023 0.1317493 #> 188  16.99821  22.25034 0.01664553 0.1317088 #> 189  16.98424  22.23098 0.01670326 0.1316735 #> 190  16.98877  22.22224 0.01661739 0.1316395 #> 191  16.97197  22.19886 0.01669724 0.1316076 #> 192  16.98023  22.19510 0.01658640 0.1315737 #> 193  16.96098  22.17628 0.01668637 0.1315342 #> 194  16.97062  22.17128 0.01654852 0.1314870 #> 195  16.95835  22.15936 0.01659032 0.1314397 #> 196  16.95742  22.15170 0.01654929 0.1314017 #> 197  16.95791  22.14238 0.01649891 0.1313690 #> 198  16.94660  22.12874 0.01654701 0.1313389 #> 199  16.95179  22.12420 0.01646564 0.1313090 #> 200  16.93775  22.10438 0.01652597 0.1312764 #> 201  16.94481  22.10275 0.01642388 0.1312378 #> 202  16.93049  22.08532 0.01648117 0.1311963 #> 203  16.93337  22.07756 0.01640686 0.1311581 #> 204  16.92687  22.06677 0.01641270 0.1311232 #> 205  16.92020  22.05248 0.01641692 0.1310903 #> 206  16.92011  22.04379 0.01637454 0.1310597 #> 207  16.91204  22.03129 0.01639866 0.1310320 #> 208  16.91214  22.02149 0.01635873 0.1310070 #> 209  16.89930  22.01009 0.01642817 0.1309817 #> 210  16.90663  22.00468 0.01632975 0.1309546 #> 211  16.89034  21.99017 0.01642132 0.1309261 #> 212  16.89895  21.98959 0.01631496 0.1308951 #> 213  16.88288  21.97270 0.01639443 0.1308598 #> 214  16.88880  21.97260 0.01630564 0.1308224 #> 215  16.88251  21.96353 0.01631340 0.1307888 #> 216  16.87732  21.95284 0.01631655 0.1307625 #> 217  16.88304  21.95287 0.01624608 0.1307415 #> 218  16.86899  21.93585 0.01632453 0.1307228 #> 219  16.87714  21.93240 0.01623304 0.1307068 #> 220  16.85947  21.91680 0.01634695 0.1306903 #> 221  16.86988  21.91494 0.01622834 0.1306645 #> 222  16.85229  21.89596 0.01631272 0.1306240 #> 223  16.85730  21.89618 0.01622939 0.1305837 #> 224  16.85430  21.88583 0.01621110 0.1305543 #> 225  16.84208  21.87434 0.01628146 0.1305355 #> 226  16.85350  21.87514 0.01616985 0.1305216 #> 227  16.83553  21.85907 0.01628710 0.1305065 #> 228  16.84516  21.86051 0.01617789 0.1304785 #> 229  16.83455  21.84846 0.01621572 0.1304419 #> 230  16.83792  21.84616 0.01615122 0.1304099 #> 231  16.83299  21.83891 0.01616018 0.1303867 #> 232  16.82916  21.82931 0.01616184 0.1303690 #> 233  16.83392  21.82792 0.01610274 0.1303531 #> 234  16.82036  21.81409 0.01618327 0.1303362 #> 235  16.82716  21.80908 0.01609654 0.1303156 #> 236  16.81250  21.79788 0.01618094 0.1302892 #> 237  16.81925  21.79479 0.01609167 0.1302629 #> 238  16.80925  21.78427 0.01614055 0.1302403 #> 239  16.80967  21.78138 0.01611381 0.1302214 #> 240  16.80852  21.77526 0.01609932 0.1302058 #> 241  16.80143  21.76492 0.01613048 0.1301904 #> 242  16.80258  21.76468 0.01610328 0.1301736 #> 243  16.79903  21.75423 0.01609475 0.1301494 #> 244  16.79503  21.75133 0.01609648 0.1301206 #> 245  16.79674  21.74868 0.01604964 0.1300925 #> 246  16.79145  21.74013 0.01606167 0.1300711 #> 247  16.79146  21.73843 0.01604202 0.1300539 #> 248  16.78631  21.73178 0.01605991 0.1300369 #> 249  16.78663  21.72808 0.01603318 0.1300182 #> 250  16.77645  21.71863 0.01608490 0.1299954 #> 251  16.78213  21.71862 0.01601093 0.1299706 #> 252  16.77182  21.70655 0.01605967 0.1299476 #> 253  16.77413  21.70441 0.01601765 0.1299286 #> 254  16.77252  21.70133 0.01601220 0.1299137 #> 255  16.77052  21.69327 0.01600377 0.1298995 #> 256  16.76756  21.69035 0.01600979 0.1298842 #> 257  16.77250  21.68781 0.01594688 0.1298677 #> 258  16.75853  21.67697 0.01603410 0.1298496 #> 259  16.76795  21.67728 0.01593725 0.1298339 #> 260  16.75224  21.66353 0.01604327 0.1298237 #> 261  16.76273  21.66734 0.01595336 0.1298191 #> 262  16.74409  21.65052 0.01608374 0.1298124 #> 263  16.76005  21.65949 0.01594011 0.1297940 #> 264  16.74089  21.64371 0.01604921 0.1297600 #> 265  16.75217  21.64893 0.01592282 0.1297237 #> 266  16.74335  21.64136 0.01596323 0.1296987 #> 267  16.74063  21.63709 0.01596956 0.1296876 #> 268  16.74634  21.64055 0.01591945 0.1296820 #> 269  16.73415  21.63003 0.01599761 0.1296697 #> 270  16.74417  21.63561 0.01589780 0.1296486 #> 271  16.73157  21.62630 0.01597012 0.1296253 #> 272  16.73825  21.62832 0.01589629 0.1296064 #> 273  16.73118  21.62293 0.01593526 0.1295919 #> 274  16.73277  21.62078 0.01590365 0.1295772 #> 275  16.72900  21.61789 0.01591292 0.1295580 #> 276  16.72684  21.61219 0.01590157 0.1295362 #> 277  16.72807  21.61094 0.01586993 0.1295170 #> 278  16.72005  21.60370 0.01591609 0.1295041 #> 279  16.72536  21.60117 0.01585618 0.1294939 #> 280  16.71494  21.59375 0.01592314 0.1294814 #> 281  16.72028  21.59209 0.01585807 0.1294649 #> 282  16.71193  21.58495 0.01590064 0.1294454 #> 283  16.71602  21.58465 0.01584640 0.1294271 #> 284  16.70961  21.57806 0.01587757 0.1294122 #> 285  16.71255  21.57806 0.01584084 0.1294009 #> 286  16.70636  21.57059 0.01587228 0.1293895 #> 287  16.70914  21.57027 0.01583366 0.1293755 #> 288  16.70313  21.56313 0.01585849 0.1293586 #> 289  16.70409  21.56218 0.01583145 0.1293413 #> 290  16.70119  21.55728 0.01583365 0.1293254 #> 291  16.70082  21.55481 0.01581962 0.1293118 #> 292  16.69995  21.55188 0.01581125 0.1293001 #> 293  16.69917  21.54791 0.01580149 0.1292892 #> 294  16.69536  21.54483 0.01581893 0.1292782 #> 295  16.69801  21.54269 0.01578064 0.1292659 #> 296  16.69113  21.53888 0.01582064 0.1292518 #> 297  16.69634  21.53870 0.01576094 0.1292375 #> 298  16.68667  21.53197 0.01582325 0.1292258 #> 299  16.69482  21.53525 0.01575188 0.1292203 #> 300  16.67891  21.52321 0.01587478 0.1292228 #> 301  16.69631  21.53326 0.01574766 0.1292318 #> 302  16.66982  21.51483 0.01595849 0.1292399 #> 303  16.69653  21.53139 0.01574208 0.1292309 #> 304  16.66680  21.51040 0.01593725 0.1291989 #> 305  16.68634  21.52216 0.01574137 0.1291553 #> 306  16.67380  21.51309 0.01580442 0.1291228 #> 307  16.67306  21.51070 0.01579618 0.1291116 #> 308  16.67952  21.51462 0.01574691 0.1291126 #> 309  16.66536  21.50353 0.01584991 0.1291090 #> 310  16.67986  21.51245 0.01572169 0.1290935 #> 311  16.66367  21.50007 0.01582176 0.1290712 #> 312  16.67492  21.50555 0.01571314 0.1290521 #> 313  16.66874  21.50148 0.01574676 0.1290381 #> 314  16.66508  21.49672 0.01576149 0.1290280 #> 315  16.67348  21.50196 0.01568471 0.1290164 #> 316  16.65822  21.49040 0.01578822 0.1290045 #> 317  16.67017  21.49629 0.01568068 0.1289919 #> 318  16.65798  21.48734 0.01576104 0.1289796 #> 319  16.66170  21.48703 0.01571462 0.1289658 #> 320  16.65843  21.48438 0.01572138 0.1289481 #> 321  16.65466  21.47960 0.01572897 0.1289299 #> 322  16.65840  21.48081 0.01568448 0.1289161 #> 323  16.65056  21.47425 0.01573493 0.1289081 #> 324  16.65534  21.47464 0.01568674 0.1289008 #> 325  16.64701  21.46868 0.01573935 0.1288899 #> 326  16.65335  21.47101 0.01567262 0.1288747 #> 327  16.64206  21.46199 0.01574002 0.1288573 #> 328  16.64783  21.46452 0.01567954 0.1288431 #> 329  16.64360  21.46009 0.01569919 0.1288326 #> 330  16.64211  21.45774 0.01570014 0.1288240 #> 331  16.64355  21.45835 0.01567904 0.1288145 #> 332  16.63982  21.45521 0.01569495 0.1288027 #> 333  16.64235  21.45503 0.01565941 0.1287892 #> 334  16.63905  21.45423 0.01567458 0.1287770 #> 335  16.64141  21.45562 0.01564587 0.1287667 #> 336  16.63815  21.45375 0.01566310 0.1287584 #> 337  16.64194  21.45838 0.01563008 0.1287515 #> 338  16.63461  21.45243 0.01567840 0.1287450 #> 339  16.64147  21.45868 0.01562083 0.1287378 #> 340  16.63105  21.45050 0.01569114 0.1287297 #> 341  16.64024  21.45712 0.01561434 0.1287229 #> 342  16.62627  21.44767 0.01571670 0.1287180 #> 343  16.63982  21.45624 0.01561014 0.1287163 #> 344  16.62113  21.44417 0.01575197 0.1287138 #> 345  16.63942  21.45569 0.01560269 0.1287062 #> 346  16.61917  21.44172 0.01574150 0.1286899 #> 347  16.63294  21.45110 0.01561236 0.1286664 #> 348  16.62129  21.44219 0.01567744 0.1286435 #> 349  16.62366  21.44279 0.01564188 0.1286276 #> 350  16.62465  21.44316 0.01562645 0.1286202 #> 351  16.61837  21.43775 0.01567041 0.1286176 #> 352  16.62505  21.44022 0.01561338 0.1286148 #> 353  16.61437  21.43342 0.01568954 0.1286083 #> 354  16.62521  21.43895 0.01559269 0.1285974 #> 355  16.61172  21.42999 0.01568425 0.1285851 #> 356  16.62317  21.43710 0.01558466 0.1285743 #> 357  16.61234  21.42907 0.01565791 0.1285654 #> 358  16.61884  21.43491 0.01560176 0.1285571 #> 359  16.61424  21.42974 0.01562317 0.1285462 #> 360  16.61404  21.42969 0.01561140 0.1285327 #> 361  16.61351  21.42776 0.01559961 0.1285191 #> 362  16.61222  21.42596 0.01559740 0.1285083 #> 363  16.61158  21.42476 0.01559377 0.1285009 #> 364  16.60978  21.42142 0.01559797 0.1284943 #> 365  16.61171  21.42253 0.01557653 0.1284880 #> 366  16.60471  21.41504 0.01561822 0.1284799 #> 367  16.61180  21.41859 0.01555296 0.1284709 #> 368  16.60028  21.40889 0.01562910 0.1284613 #> 369  16.60995  21.41364 0.01554420 0.1284533 #> 370  16.59702  21.40318 0.01563661 0.1284488 #> 371  16.60814  21.40897 0.01554530 0.1284454 #> 372  16.59511  21.40087 0.01564311 0.1284422 #> 373  16.60829  21.40729 0.01553234 0.1284362 #> 374  16.59067  21.39648 0.01565851 0.1284254 #> 375  16.60818  21.40812 0.01550864 0.1284104 #> 376  16.59160  21.39618 0.01561871 0.1283941 #> 377  16.60196  21.40417 0.01552618 0.1283797 #> 378  16.59461  21.39874 0.01557187 0.1283696 #> 379  16.59673  21.40071 0.01554876 0.1283620 #> 380  16.59442  21.39891 0.01555862 0.1283545 #> 381  16.59325  21.39820 0.01555711 0.1283439 #> 382  16.59148  21.39632 0.01555639 0.1283305 #> 383  16.58906  21.39456 0.01556197 0.1283177 #> 384  16.59095  21.39462 0.01553586 0.1283079 #> 385  16.58611  21.39133 0.01556632 0.1283011 #> 386  16.59039  21.39355 0.01552782 0.1282965 #> 387  16.58337  21.38762 0.01557417 0.1282906 #> 388  16.58910  21.39060 0.01552131 0.1282831 #> 389  16.58182  21.38454 0.01556685 0.1282744 #> 390  16.58892  21.38871 0.01550342 0.1282664 #> 391  16.57888  21.38166 0.01557446 0.1282607 #> 392  16.59014  21.38705 0.01548220 0.1282581 #> 393  16.57149  21.37403 0.01562366 0.1282569 #> 394  16.59005  21.38560 0.01547685 0.1282541 #> 395  16.56693  21.36930 0.01564548 0.1282461 #> 396  16.58619  21.38215 0.01548382 0.1282326 #> 397  16.56862  21.37052 0.01560248 0.1282159 #> 398  16.58043  21.37842 0.01549539 0.1281997 #> 399  16.57110  21.37180 0.01555267 0.1281857 #> 400  16.57625  21.37610 0.01550147 0.1281730 #> 401  16.57203  21.37258 0.01552073 0.1281607 #> 402  16.57175  21.37190 0.01550989 0.1281485 #> 403  16.57137  21.37142 0.01550145 0.1281374 #> 404  16.56595  21.36666 0.01553359 0.1281295 #> 405  16.57333  21.37086 0.01547116 0.1281249 #> 406  16.56111  21.36200 0.01556151 0.1281223 #> 407  16.57269  21.36907 0.01546872 0.1281195 #> 408  16.56050  21.36022 0.01555552 0.1281135 #> 409  16.57163  21.36765 0.01546055 0.1281042 #> 410  16.55990  21.35828 0.01553640 0.1280921 #> 411  16.56901  21.36509 0.01545292 0.1280776 #> 412  16.55847  21.35687 0.01551791 0.1280632 #> 413  16.56842  21.36199 0.01542566 0.1280497 #> 414  16.55624  21.35306 0.01550551 0.1280370 #> 415  16.56375  21.35460 0.01543114 0.1280254 #> 416  16.55563  21.34845 0.01547789 0.1280107 #> 417  16.55600  21.34780 0.01546003 0.1279970 #> 418  16.55618  21.34619 0.01544602 0.1279869 #> 419  16.54952  21.34029 0.01548682 0.1279785 #> 420  16.55443  21.34132 0.01543833 0.1279711 #> 421  16.54759  21.33370 0.01548077 0.1279652 #> 422  16.55237  21.33414 0.01543543 0.1279607 #> 423  16.54285  21.32687 0.01550218 0.1279555 #> 424  16.55155  21.33279 0.01543058 0.1279507 #> 425  16.53672  21.32207 0.01553930 0.1279465 #> 426  16.55205  21.33301 0.01541970 0.1279438 #> 427  16.53034  21.31718 0.01558239 0.1279414 #> 428  16.55143  21.33163 0.01541781 0.1279385 #> 429  16.52690  21.31363 0.01559749 0.1279318 #> 430  16.54760  21.32751 0.01542354 0.1279170 #> 431  16.52779  21.31254 0.01555137 0.1278950 #> 432  16.54060  21.32229 0.01542953 0.1278700 #> 433  16.53126  21.31474 0.01547862 0.1278491 #> 434  16.53434  21.31605 0.01544198 0.1278373 #> 435  16.53523  21.31655 0.01543169 0.1278339 #> 436  16.52789  21.31054 0.01548659 0.1278340 #> 437  16.53800  21.31801 0.01540876 0.1278329 #> 438  16.52430  21.30939 0.01551022 0.1278281 #> 439  16.53903  21.31973 0.01538828 0.1278188 #> 440  16.52283  21.30923 0.01550180 0.1278072 #> 441  16.53519  21.31787 0.01539423 0.1277943 #> 442  16.52344  21.30956 0.01547208 0.1277823 #> 443  16.52864  21.31194 0.01541919 0.1277710 #> 444  16.52383  21.30851 0.01544526 0.1277604 #> 445  16.52382  21.30787 0.01543449 0.1277505 #> 446  16.52531  21.30792 0.01541364 0.1277425 #> 447  16.51946  21.30481 0.01545485 0.1277375 #> 448  16.52632  21.30676 0.01539430 0.1277335 #> 449  16.51519  21.29946 0.01547834 0.1277317 #> 450  16.52623  21.30605 0.01539107 0.1277305 #> 451  16.51100  21.29406 0.01550364 0.1277285 #> 452  16.52715  21.30406 0.01537435 0.1277246 #> 453  16.50895  21.29288 0.01550960 0.1277185 #> 454  16.52398  21.30212 0.01538402 0.1277096 #> 455  16.50893  21.29244 0.01548862 0.1276979 #> 456  16.52225  21.30196 0.01537439 0.1276853 #> 457  16.51033  21.29334 0.01545242 0.1276726 #> 458  16.51760  21.29810 0.01538493 0.1276612 #> 459  16.51385  21.29620 0.01540529 0.1276518 #> 460  16.51378  21.29577 0.01539814 0.1276446 #> 461  16.51579  21.29732 0.01537746 0.1276392 #> 462  16.50999  21.29289 0.01541701 0.1276348 #> 463  16.51674  21.29691 0.01536029 0.1276308 #> 464  16.50673  21.29052 0.01543421 0.1276273 #> 465  16.51700  21.29637 0.01535046 0.1276240 #> 466  16.50276  21.28790 0.01545877 0.1276213 #> 467  16.51628  21.29560 0.01534945 0.1276179 #> 468  16.50310  21.28640 0.01544581 0.1276134 #> 469  16.51325  21.29340 0.01536061 0.1276060 #> 470  16.50319  21.28699 0.01542911 0.1275966 #> 471  16.51015  21.29125 0.01536361 0.1275852 #> 472  16.50438  21.28772 0.01539790 0.1275747 #> 473  16.50822  21.29018 0.01536002 0.1275665 #> 474  16.50358  21.28712 0.01539050 0.1275612 #> 475  16.50478  21.28793 0.01537757 0.1275574 #> 476  16.50515  21.28838 0.01537215 0.1275546 #> 477  16.50229  21.28694 0.01539095 0.1275507 #> 478  16.50578  21.29004 0.01536011 0.1275456 #> 479  16.50021  21.28681 0.01539702 0.1275389 #> 480  16.50527  21.29099 0.01535243 0.1275322 #> 481  16.49924  21.28764 0.01539340 0.1275258 #> 482  16.50461  21.29137 0.01534735 0.1275208 #> 483  16.49669  21.28678 0.01540611 0.1275176 #> 484  16.50528  21.29223 0.01533888 0.1275169 #> 485  16.49228  21.28310 0.01544018 0.1275188 #> 486  16.50616  21.29280 0.01533889 0.1275238 #> 487  16.48832  21.27901 0.01547865 0.1275289 #> 488  16.50752  21.29373 0.01533731 0.1275325 #> 489  16.48536  21.27805 0.01550365 0.1275297 #> 490  16.50743  21.29551 0.01532760 0.1275195 #> 491  16.48504  21.27991 0.01548431 0.1275049 #> 492  16.50360  21.29335 0.01532824 0.1274901 #> 493  16.48942  21.28448 0.01542737 0.1274793 #> 494  16.49914  21.29024 0.01534432 0.1274721 #> 495  16.49288  21.28732 0.01538663 0.1274644 #> 496  16.49365  21.28744 0.01537003 0.1274543 #> 497  16.49705  21.29103 0.01533466 0.1274432 #> 498  16.49000  21.28659 0.01538248 0.1274363 #> 499  16.49851  21.29273 0.01531693 0.1274356 #> 500  16.48853  21.28667 0.01539761 0.1274386 #> 501  16.49861  21.29319 0.01531990 0.1274388 #> 502  16.48734  21.28625 0.01540172 0.1274331 #> 503  16.49592  21.29218 0.01532474 0.1274218 #> 504  16.48801  21.28710 0.01537312 0.1274090 #> 505  16.49416  21.29241 0.01531764 0.1273991 #> 506  16.48907  21.28983 0.01535216 0.1273933 #> 507  16.49275  21.29416 0.01532236 0.1273891 #> 508  16.49070  21.29386 0.01533444 0.1273839 #> 509  16.49112  21.29535 0.01532585 0.1273768 #> 510  16.49280  21.29679 0.01530505 0.1273685 #> 511  16.48841  21.29463 0.01533260 0.1273611 #> 512  16.49328  21.29782 0.01528945 0.1273555 #> 513  16.48634  21.29318 0.01533915 0.1273518 #> 514  16.49351  21.29865 0.01528213 0.1273490 #> 515  16.48398  21.29060 0.01535117 0.1273471 #> 516  16.49246  21.29766 0.01528624 0.1273454 #> 517  16.47903  21.28612 0.01538175 0.1273414 #> 518  16.49216  21.29568 0.01527946 0.1273389 #> 519  16.47648  21.28444 0.01539879 0.1273387 #> 520  16.49235  21.29421 0.01527550 0.1273387 #> 521  16.47440  21.28366 0.01541552 0.1273386 #> 522  16.49476  21.29741 0.01525635 0.1273358 #> 523  16.47399  21.28280 0.01540746 0.1273282 #> 524  16.49250  21.29784 0.01525546 0.1273147 #> 525  16.47759  21.28755 0.01535363 0.1272987 #> 526  16.48835  21.29403 0.01525436 0.1272832 #> 527  16.47863  21.28753 0.01531725 0.1272713 #> 528  16.48443  21.29007 0.01526324 0.1272639 #> 529  16.47910  21.28449 0.01529692 0.1272595 #> 530  16.47761  21.28380 0.01530563 0.1272562 #> 531  16.48239  21.28549 0.01526380 0.1272534 #> 532  16.47178  21.27797 0.01534267 0.1272512 #> 533  16.48346  21.28647 0.01525035 0.1272478 #> 534  16.46889  21.27535 0.01535793 0.1272452 #> 535  16.48254  21.28551 0.01525172 0.1272426 #> 536  16.46880  21.27711 0.01535657 0.1272405 #> 537  16.48128  21.28605 0.01525822 0.1272374 #> 538  16.46794  21.27678 0.01535612 0.1272331 #> 539  16.48164  21.28806 0.01524719 0.1272265 #> 540  16.46675  21.27664 0.01535181 0.1272188 #> 541  16.48072  21.28790 0.01523848 0.1272101 #> 542  16.46795  21.28020 0.01532956 0.1272017 #> 543  16.47819  21.28802 0.01524440 0.1271939 #> 544  16.47098  21.28514 0.01529727 0.1271886 #> 545  16.47524  21.28893 0.01526156 0.1271842 #> 546  16.47198  21.28759 0.01528394 0.1271804 #> 547  16.47313  21.28888 0.01527192 0.1271764 #> 548  16.47178  21.28780 0.01527707 0.1271715 #> 549  16.47125  21.28761 0.01527558 0.1271656 #> 550  16.47191  21.28790 0.01526408 0.1271594 #> 551  16.46992  21.28630 0.01527309 0.1271535 #> 552  16.47166  21.28881 0.01525624 0.1271481 #> 553  16.47013  21.28802 0.01526429 0.1271440 #> 554  16.47247  21.28981 0.01524343 0.1271409 #> 555  16.46819  21.28709 0.01527429 0.1271386 #> 556  16.47217  21.28940 0.01524121 0.1271367 #> 557  16.46590  21.28616 0.01528945 0.1271353 #> 558  16.47271  21.29111 0.01523714 0.1271348 #> 559  16.46308  21.28485 0.01531126 0.1271346 #> 560  16.47455  21.29473 0.01522687 0.1271352 #> 561  16.46019  21.28477 0.01533862 0.1271371 #> 562  16.47735  21.29837 0.01521276 0.1271401 #> 563  16.45513  21.28347 0.01538914 0.1271456 #> 564  16.47968  21.30054 0.01520581 0.1271502 #> 565  16.45029  21.27982 0.01543263 0.1271525 #> 566  16.47778  21.29873 0.01521478 0.1271453 #> 567  16.45030  21.27751 0.01540300 0.1271262 #> 568  16.47055  21.29305 0.01522194 0.1270981 #> 569  16.45647  21.28129 0.01529866 0.1270699 #> 570  16.46226  21.28538 0.01523549 0.1270509 #> 571  16.46283  21.28528 0.01522484 0.1270453 #> 572  16.45542  21.27783 0.01528253 0.1270497 #> 573  16.46651  21.28577 0.01520543 0.1270571 #> 574  16.45082  21.27365 0.01532811 0.1270614 #> 575  16.46790  21.28585 0.01519526 0.1270589 #> 576  16.44947  21.27244 0.01532622 0.1270496 #> 577  16.46559  21.28575 0.01519296 0.1270367 #> 578  16.45225  21.27600 0.01528193 0.1270242 #> 579  16.46040  21.28362 0.01521333 0.1270152 #> 580  16.45779  21.28352 0.01523019 0.1270096 #> 581  16.45602  21.28199 0.01523895 0.1270053 #> 582  16.46035  21.28748 0.01520455 0.1270005 #> 583  16.45395  21.28295 0.01524850 0.1269955 #> 584  16.46063  21.28795 0.01519455 0.1269922 #> 585  16.45252  21.28414 0.01525742 0.1269903 #> 586  16.46149  21.28985 0.01518693 0.1269893 #> 587  16.45139  21.28368 0.01526445 0.1269882 #> 588  16.46184  21.29203 0.01518246 0.1269847 #> 589  16.45088  21.28371 0.01525873 0.1269781 #> 590  16.45849  21.28985 0.01519301 0.1269694 #> 591  16.45404  21.28682 0.01521788 0.1269601 #> 592  16.45515  21.28793 0.01520219 0.1269524 #> 593  16.45534  21.28922 0.01519736 0.1269474 #> 594  16.45396  21.28884 0.01520579 0.1269444 #> 595  16.45567  21.29039 0.01519090 0.1269421 #> 596  16.45217  21.28958 0.01521778 0.1269398 #> 597  16.45597  21.29201 0.01518563 0.1269371 #> 598  16.44944  21.28801 0.01523224 0.1269329 #> 599  16.45535  21.29205 0.01518274 0.1269287 #> 600  16.44843  21.28817 0.01523194 0.1269236 #>  get_metadata(amewoo, \"is_sparse\") #> [1] FALSE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve, crop, and transform Natural Earth data — get_naturalearth","title":"Retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"convenience wrappers rnaturalearth functions. retrieve, crop, format, project Natural Earth data facilitate plotting BirdFlow spatial objects. output desired data coordinate reference system (CRS) extent x.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"","code":"get_naturalearth(   x,   type,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   country,   keep_buffer = FALSE,   force_old_method = FALSE,   ... )  get_states(   x,   country,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   keep_buffer = FALSE )  get_coastline(   x,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   keep_buffer = FALSE )  get_countries(   x,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   keep_buffer = FALSE )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"x BirdFlow, terra::SpatRaster, sf, object can call terra::ext() terra::crs(). type type data retrieve. One \"coastline\", \"country\", \"states\" data included rnaturalearth; value accepted ne_download(). scale scale data return. Ignored type \"states\", otherwise passed one ne_download(). ne_coastline(), ne_countries(). Valid values 110, 50, 10, 'small', 'medium', 'large'. buffer buffer degrees (latitude longitude) add extent x prior cropping Natural Earth data WGS84. needed transformation CRS x data cover extent x. keep_attributes FALSE, default, attribute columns dropped facilitate clean plotting. country retrieving states get_states() get_naturalearth(type = \"states\") used select country. omitted, states countries returned. keep_buffer FALSE, default, transforming Natural Earth data cropped precise extent x. Set  TRUE keep buffer - useful overlaying Natural Earth data existing base R plot. force_old_method internal testing. default best uses.  TRUE use back transformed bounding box method even projection covered \"new\" cut seam method. ... arguments passed ne_download(). Possibly want use category = \"physical\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"sf object Natural Earth data CRS x.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"get_naturalearth() work called functions. two distinct calculation methods. Mollweide, Lambert Azimuthal Equal Area,  Albers Equal Area, Lambert Conformal Conic projections cut seam: Find longitude projection center (\"lon_0\" proj4 string) determine longitude seam. Clip narrow (1 m) strip Natural Earth data transforming (WGS84) seam. Transform CRS x. now artifact free object containing global data set minus narrow strip seam. Crop destination extent x, keep_buffer = TRUE, extent plus approximate equivalent buffer. work well extent (including global) CRS based covered projections. projections back transform bounding box clip: Convert corners bounds x object WGS84. adds buffer (buffer) converted corners important guarantee still cover extent transform. Check see bounds wrap seam (180 deg meridian) break bounding box two . Crop bounding box boxes. Project cropped section x's CRS. Combine pieces one object. keep_buffer = FALSE crop exact extent x. steps usually prevent artifacts caused polygons lines shifted across bounds CRS. However, work extents projections particular unlikely work polar projections extents cover entire globe. cases fails setting buffer zero may easy solution. many projections method 1 variant work. may eventually cover projections first method. encounter use case work may submit issue; please include output crs(x) ext(x). get_states() requires rnaturalearthhires. Install : install.packages(\"devtools\") # already  devtools::install_github(\"ropensci/rnaturalearthhires\")","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"","code":"bf <- BirdFlowModels::amewoo  coast <- get_coastline(bf)   if (FALSE) { # \\dontrun{  library(terra)  library(sf)  plot(rast(bf, 1))  plot(coast, add = TRUE)   } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to determine how much padding to use with transition numbers. — get_timestep_padding","title":"Internal function to determine how much padding to use with transition numbers. — get_timestep_padding","text":"Return level padding used timestep numbers transition marginal names.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to determine how much padding to use with transition numbers. — get_timestep_padding","text":"","code":"get_timestep_padding(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to determine how much padding to use with transition numbers. — get_timestep_padding","text":"bf","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to determine how much padding to use with transition numbers. — get_timestep_padding","text":"integer indicating much pad numbers transition names.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function to determine how much padding to use with transition numbers. — get_timestep_padding","text":"far (June 2023) BirdFlow models padding used timesteps marginal transition names always 2, necessary support 52 weeks (e.g. T_01-02) , date, determined number timesteps model. idea constrain models less 100 transitions hypothetical future decided say, , 3 day timesteps instead weekly. June 2023 added ability truncate models (part year), want change level padding truncating, instead decided store padding metadat$timestep_padding. function designed work model regardless whether padding stored metadata.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a transition matrix from a BirdFlowR model — get_transition","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"function retrieves transition matrix BirdFlow object, possibly calculating marginal.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"","code":"get_transition(x, transition)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"x BirdFlow object transition transition code, e.g. \"T_01-02\"","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"transition matrix","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"get_transition() construct transition matrix marginals x transitions, return relevant stored transition matrix . format transition code \"T_[]-[]\" [] [] timesteps padded zeros. Direction important; \"T_03-04\" represents transition backward time. transition matrices structured multiply matrix distribution project either forward backwards. one distribution projected stored columns matrix dimensions(n_active(), n_distr()). Given marginal cell [, j] represents probability bird state prior timestep state j next, generate forward transition matrix divide row marginal sum transpose. Backwards transitions matrices generated dividing column sum, without transposing.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distance_lonlat_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the great circle distance based on longitude and latitude — great_circle_distance_lonlat_input","title":"Calculate the great circle distance based on longitude and latitude — great_circle_distance_lonlat_input","text":"Calculate great circle distance","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distance_lonlat_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the great circle distance based on longitude and latitude — great_circle_distance_lonlat_input","text":"","code":"great_circle_distance_lonlat_input(lat1, lon1, lat2, lon2)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distance_lonlat_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the great circle distance based on longitude and latitude — great_circle_distance_lonlat_input","text":"lat1 latitude point 1 lon1 longitude point 1 lat2 latitude point 2 lon2 longitude point 2","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distance_lonlat_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the great circle distance based on longitude and latitude — great_circle_distance_lonlat_input","text":"great circle distance","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"function calculates square, distance matrix n_active() cells side. cell represents distance row index column index treated locations state space; e.g. cell  [3, 8] represents distance locations 3 8 state space vector.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"","code":"great_circle_distances(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"n x n matrix containing pairwise distances kilometers every active cell BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"","code":"# Calculate great circle distance matrix library(terra) bf <- BirdFlowModels::rewbla gs <- great_circle_distances(bf)  # The above is all you need to use the function. # The rest of this is an exercise to visualize the error in CRS distances  # Compare to euclidean distances in projected CRS space i <- seq_len(n_active(bf)) xy <- as.data.frame(i_to_xy(i, bf)) eu <- as.matrix(dist(xy)) / 1000 # euclidean in CRS (km)  error_prop <- abs(gs - eu) / gs error_prop[is.nan(error_prop)] <- 0  mean_error <- apply(error_prop, 1, mean) # mean error for cell max_error <- apply(error_prop, 1, max) # max error for cell  # Calculate maximum error lines for each cell mel <- data.frame(i1 = 1:n_active(bf), i2 = apply(error_prop, 1, which.max)) xs <- t(cbind(i_to_x(mel$i1, bf), i_to_x(mel$i2, bf))) ys <- t(cbind(i_to_y(mel$i1, bf), i_to_y(mel$i2, bf)))  # Plot maximum error for each cell and a line to the cell where the distance # had that error. plot(rasterize_distr(as.numeric(max_error), bf)) title(main = \"Max proportional error\") matlines(xs, ys, col = rgb(0, 0, 0, .25), lty = 1, lwd = 1) mtext(paste0(   \"lines connect cells to the cell which have greatest\",   \" proportional error in distance\" ), line = 0, cex = 0.7)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a BirdFlow object have certain components — has","title":"Does a BirdFlow object have certain components — has","text":"functions return information contents BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a BirdFlow object have certain components — has","text":"","code":"has_marginals(x)  has_transitions(x)  has_distr(x)  has_dynamic_mask(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a BirdFlow object have certain components — has","text":"x BirdFlow model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a BirdFlow object have certain components — has","text":"Logical indicating BirdFlow model relevant element","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":null,"dir":"Reference","previous_headings":"","what":"import BirdFlow model from an hdf5 file — import_birdflow_v3","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"function imports BirdFlow model data HDF5 file written python. works version 2 hdf5.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"","code":"import_birdflow_v3(hdf5)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"hdf5 Path HDF5 file","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to convert among spatial indices — index conversions","title":"Functions to convert among spatial indices — index conversions","text":"functions convert among different ways referencing locations BirdFlow models output. convert among spatial coordinates (x y), raster row col indices, index along location vector. latlon_to_xy() xy_to_latlon() convert WGS 1984 latitude longitude x y coordinates BirdFlow object's coordinate reference system (CRS).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to convert among spatial indices — index conversions","text":"","code":"x_to_col(x, bf)  y_to_row(y, bf)  row_to_y(row, bf)  col_to_x(col, bf)  i_to_rc(i, bf)  i_to_row(i, bf)  i_to_col(i, bf)  i_to_x(i, bf)  i_to_y(i, bf)  i_to_xy(i, bf)  rc_to_i(row, col, bf)  xy_to_i(x, y, bf)  latlon_to_xy(lat, lon, bf)  xy_to_latlon(x, y, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to convert among spatial indices — index conversions","text":"x, y x y coordinates BirdFlow model's CRS. typically represents easting northing meters. functions require x y two column matrix data.frame containing x y columns order can passed x case y omitted. bf BirdFlow model. row, col row column index cell BirdFlow model associated raster data. Alternatively, two column matrix data.frame containing row column indices columns 1 2 respectively can passed row case col argument omitted. index along state vector contains data unmasked cells. lat, lon latitude longitude WGS 1984 (EPSG:4326). two column matrix data frame can also passed lat.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to convert among spatial indices — index conversions","text":"x_to_col(x, bf) y_to_row(y, bf) Return column row index x y coordinate falls within. row_to_y(row, bf) col_to_x(col, bf) Return y x coordinate center row column. i_to_row(, bf) i_to_col(, bf) Return row column index corresponding vector state index, . i_to_rc(, bf) Returns two column matrix row column index raster corresponding index, vector state. i_to_x(, bf) i_to_y(, bf) Return x y coordinate vector state index, . i_to_xy(, bf) Returns two column matrix x y coordinates corresponding index, vector state space. rc_to_i(row, col, bf) xy_to_i(x, y, bf) Return state space index corresponding x y coordinates row column indices. latlon_to_xy(lat, lon, bf) Returns two column matrix x y coordinates corresponding supplied latitude longitude. output CRS bf (crs(bf)). xy_to_latlon(x, y, bf) Returns two column matrix latitude longitude points WGS84 given coordinates BirdFlow object's CRS.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to convert among spatial indices — index conversions","text":"general, functions mirror NA input output; functions return rows, columns, index () return NA input within extent; () within active cells. CRSs longitude translates x coordinate latitude y coordinate. traditional order coordinates latitude longitude; row column, x y consistent, still used , .e. latitude, row, y generally correlated, first, first, second argument order.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate log likelihoods of observed bird movements — interval_log_likelihood","title":"Calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"function calculates log likelihoods inferred bird movement based two observation points (time space). second point must different timestep (week) first, location can remain .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"","code":"interval_log_likelihood(intervals, observations, bf, one_at_a_time = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"intervals data.frame describes intervals (movements stationary periods) log likelihood calculated referencing id column observations. Observation ID starting location date. Observation ID ending location date. ... additional columns included returned object used function. probably include interval ID. observations data.frame describing observations birds row individual bird, location, date. id Unique observation identifier. lon , lat Longitude latitude observation WGS84 (EPSG:4326) date Date associated observation. See lookup_timestep() valid formats. ... columns allowed, ignored. bf BirdFlow object. one_at_a_time Mainly debugging. FALSE, default, intervals start timestep processed together, otherwise interval processed separately. Results identical, TRUE uses less memory slower.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"intervals table returned  along new columns: log_likelihood model derived log likelihood interval. null_ll log likelihood interval based null model assumes eBird S&T distribution species end point. lag number timesteps (likely weeks) start end interval. exclude TRUE log likelihood calculated interval, case also TRUE one remaining columns indicating . not_active TRUE start end point within model mask dynamic_mask TRUE eBird S&T assigned zero probability start end point associated date therefore excluded dynamic mask state based sparsification. sparse TRUE model assigned zero probability interval due reasons. likely due sparsification eliminating possible routes start end point. same_timestep TRUE start end timesteps , lag zero. bad_date TRUE date parsed, bf partial model date falls uncovered portion year. returned table rows 1:1 correspondence input intervals table.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"core function calling predict() distribution starting location hot (value 1) locations zero extracting probability ending week location. log probability returned log_likelihood column. null model assumes eBird S&T distribution thus null_ll column contains log probability density S&T distribution ending week location. observations intervals separated two tables allow flexibility assigning evaluating intervals.  tracking data frequency observations much greater weekly S&T data lot choices made function leaves decisions user.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"","code":"bf <- BirdFlowModels::rewbla observations <- BirdFlowModels::rewbla_observations intervals <- BirdFlowModels::rewbla_intervals intervals <- intervals[1:20, ] # toy example intervals <- interval_log_likelihood(intervals, observations, bf) head(intervals, 3) #>           bird_id  from    to interval_id log_likelihood   null_ll lag exclude #> 1017 B19221769152  2223  2224        1017      -3.157935 -4.453952  47   FALSE #> 4775 B77724064244 10149 10150        4775      -3.429942 -4.870969  50   FALSE #> 2177 B29252852992  4625  4626        2177      -5.135462 -5.816720  21   FALSE #>      not_active dynamic_mask sparse same_timestep bad_date #> 1017      FALSE        FALSE  FALSE         FALSE    FALSE #> 4775      FALSE        FALSE  FALSE         FALSE    FALSE #> 2177      FALSE        FALSE  FALSE         FALSE    FALSE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if points are between BirdFlow cells — is_between","title":"Determine if points are between BirdFlow cells — is_between","text":"internal function used create betweenness array dimensions n_active(bf), n_active(bf), length(points). first two dimensions cells possible connections  pairs locations within BirdFlow model n_active() elements. third dimension represents points might connection. Cell values TRUE point associated model cells. Specifically, point within radius meters (along great circle) great circle line connecting cell centers.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if points are between BirdFlow cells — is_between","text":"","code":"is_between(   bf,   points = NULL,   radius = NULL,   n_directions = 1,   skip_unconnected = TRUE,   batch_size = 1e+05,   check_radius = TRUE )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if points are between BirdFlow cells — is_between","text":"bf BirdFlow model points points evaluate betweenness . NULL cell centers raster cells within BirdFlow model active cells model used. calculated comparing cell centers buffered convex hull around active cell centers. radius point considered two locations within radius meters (along great circle) great circle line locations. radius defaults half cell size (mean(res(bf))/2). n_directions number (equally spaced) directional bins classify bearings .  Currently 1 supported. skip_unconnected TRUE connections exist bf evaluated, matrix erroneously indicate points locations connected. resulting array can still used model built missing connections always zero probability. batch_size controls number movement lines processed time. smaller batch_size conserve memory slight performance cost.  number batches less equal n_active(bf)^2 / batch_size. check_radius  TRUE error thrown radius resolution 1/4 resolution bf. Outside range algorithm likely yield distorted results. 0.5 * mean(res(bf)) default, recommended radius.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if points are between BirdFlow cells — is_between","text":"list : array dimensions representing \"\" location, \"\" location, points. Cells TRUE point associated locations. points data,frame points define third dimension .  identical input points NULL. Otherwise data frame columns x, y, corresponding third dimension . NA points within mask fall active cells. radius radius circle meters.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_between.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if points are between BirdFlow cells — is_between","text":"points radius NULL default cell radius center cells within BirdFlow extent fall active cells. includes cell centers within convex hull (spherical coordinates) around active cells bf.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Are locations and distributions covered by the model for the given time — is_location_valid","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"location time valid model non zero probability  movement location time. invalid state either zero probability movement , covered model . Similarly distributions valid probability cells movement modeled.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"","code":"is_location_valid(bf, i, x, y, timestep, date)  is_distr_valid(bf, distr, timestep, date, return_mask = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"bf BirdFlow object. State space index (location). x X coordinates bf's CRS (crs(bf)). y T coordinate. timestep timestep. date Date format accepted lookup_timestep(). distr One distributions vector matrix form representing probability active cell model. return_mask TRUE return mask dimensions distr TRUE cells can valid non-zero values. conditioned timestep associated distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"logical vector, 'TRUEif validFALSEotherwise values input location distribution. Seereturn_mask` exception.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"is_location_valid() 2 ways inputting locations. one used: either vector location indices (see xy_to_i()), x y. functions time input either timestep date. number timesteps dates either 1 match number locations distributions; singular applied . location invalid following apply: location model extent. location correspond active cell model; masked static mask. location valid state given timestep date; excluded dynamic mask state sparsification see sparsify(). timestep valid, date associated timestep. second applies BirdFlow models cover whole year. distribution invalid similar reasons applied locations non-zero values.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"","code":"bf <- BirdFlowModels::amewoo timestep  <- 3  # Sample two valid locations from a distribution distr <- get_distr(bf, timestep, from_marginals = TRUE) locs <- sample_distr(distr, n = 2) i <- apply(locs, 2, function(x) which(as.logical(x))) is_location_valid(bf, i, timestep = timestep) #> [1] TRUE TRUE  # Sample a few invalid locations i <- sample(which(distr == 0), 2) is_location_valid(bf, i, timestep = timestep) #> [1] FALSE FALSE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the index to a remote model collection — load_collection_index","title":"Load the index to a remote model collection — load_collection_index","text":"Load collection index current model collection.  function return --date index current BirdFlow collection. caches index locally update cached version --date.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the index to a remote model collection — load_collection_index","text":"","code":"load_collection_index(   update = TRUE,   collection_url = birdflow_options(\"collection_url\") )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the index to a remote model collection — load_collection_index","text":"update TRUE (default) index cached model file checked server's version make sure --date downloaded . FALSE neither index model checked. Set FALSE downloading model(s) need want make sure model change analysis (even updated server); working offline. collection_url url collection. path base directory (index.html file).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the index to a remote model collection — load_collection_index","text":"data frame row every model collection.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load the index to a remote model collection — load_collection_index","text":"collection default main BirdFlow model collection users need set . local cache directory (collections) defaults birdflow_options(\"cache\") cache directory current collection subdirectory.  options can changed duration session birdflow_options(), defaults suitable users.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Load BirdFlow models from a collection — load_model","title":"Load BirdFlow models from a collection — load_model","text":"Load named model current (likely default) model collection. model exist local cache --date cache updated prior loading.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load BirdFlow models from a collection — load_model","text":"","code":"load_model(   model,   update = TRUE,   collection_url = birdflow_options(\"collection_url\"),   timeout = 600 )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load BirdFlow models from a collection — load_model","text":"model model name load. update TRUE (default) index cached model file checked server's version make sure --date downloaded . FALSE neither index model checked. Set FALSE downloading model(s) need want make sure model change analysis (even updated server); working offline. collection_url url collection. path base directory (index.html file). timeout number seconds allow downloading.  default 600  (ten minutes).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load BirdFlow models from a collection — load_model","text":"designated BirdFlow model returned.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load BirdFlow models from a collection — load_model","text":"","code":"if (FALSE) { # \\dontrun{   index <- load_collection_index()  bf <- load_model(index$model[1])  } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve date associated with timesteps, transitions, or marginals — lookup_date","title":"Retrieve date associated with timesteps, transitions, or marginals — lookup_date","text":"Retrieve date associated timesteps, transitions, marginals","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve date associated with timesteps, transitions, or marginals — lookup_date","text":"","code":"lookup_date(x, bf, timestep = NULL)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve date associated with timesteps, transitions, or marginals — lookup_date","text":"x vector one following formats: Integer 1 n_timesteps(bf) representing timestep. Character \"T\" followed digits indicate timesteps, (format used internally label timestep dimensions objects) Marginal Transition names. start either \"T_\" \"M_\", two timesteps represented digits separated dash, E.g. \"T_01-02\". bf BirdFlow object timestep Deprecated alternative x.  Previous versions lookup_dates() supported timestep input used timestep first argument.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve date associated with timesteps, transitions, or marginals — lookup_date","text":"Date object","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve date associated with timesteps, transitions, or marginals — lookup_date","text":"","code":"bf <- BirdFlowModels::amewoo lookup_date(1:5, bf) #> [1] \"2021-01-04\" \"2021-01-11\" \"2021-01-18\" \"2021-01-25\" \"2021-02-01\""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"Retrieve timesteps associated season species modeled BirdFlow object, possibly buffer (timesteps) added . Seasons dates ebirdst::ebirdst_runs directly accessible species_info().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"","code":"lookup_season_timesteps(x, season, season_buffer = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"x BirdFlow object season one seasons returned species_info(), season alias,  \"\" timesteps model season_buffer number extra timesteps add beginning end season.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"series integers indicating timesteps correspond (possibly buffered) season.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"season-names-and-aliases","dir":"Reference","previous_headings":"","what":"Season names and aliases","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"season can '', one four seasons, alias listed .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"","code":"bf <- BirdFlowModels::rewbla lookup_season_timesteps(bf, \"breeding\", season_buffer = 0) #>  [1] 18 19 20 21 22 23 24 25 26 27 28 29 30 31"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_species_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup eBird species metadata — lookup_species_metadata","title":"Lookup eBird species metadata — lookup_species_metadata","text":"lookup_species_metadata() uses ebirdst generate list  identical species component BirdFlow model. internal function used preprocess_species() Routes(). See species_info() description list items.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_species_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup eBird species metadata — lookup_species_metadata","text":"","code":"lookup_species_metadata(   species,   skip_checks = FALSE,   min_season_quality = 3,   quiet = FALSE )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_species_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup eBird species metadata — lookup_species_metadata","text":"species eBird species code, common name, scientific name. processed ebirdst::get_species(). skip_checks Set TRUE skip checks eBird model quality migrant status. Defaults TRUE - tests. min_season_quality skip_checks = FALSE model quality four seasons drops threshold error thrown. quiet Set TRUE suppress messages.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_species_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup eBird species metadata — lookup_species_metadata","text":"list species information derived ebirdst. See species_info() description items.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup timestep — lookup_timestep","title":"Lookup timestep — lookup_timestep","text":"function returns timestep timesteps associated x particular BirdFlow model, x represents dates timesteps various formats.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup timestep — lookup_timestep","text":"","code":"lookup_timestep(x, bf, allow_failure = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup timestep — lookup_timestep","text":"x character object representing date year-month-day e.g. \"2023-03-29\", date object (Date, POSIXct, POSIXlt), numeric timestep, character representing timestep e.g. \"t1\", \"\" timesteps model. bf BirdFlow object. allow_failure TRUE function return NA values fails resolve timestep element x. default, FALSE, function throw error elements x resolved timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup timestep — lookup_timestep","text":"vector timesteps corresponding elements x.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup timestep — lookup_timestep","text":"far BirdFlow objects timesteps corresponding weeks year matching S&T timesteps. However, likely add ability make BirdFlow objects model part year. timestep values necessarily match weeks. example model covers Week 6, 20  timesteps 1 15. x numeric assumed already timestep. useful using function internally resolve arguments functions like route(), predict(), get_distr().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup timestep — lookup_timestep","text":"","code":"bf <- BirdFlowModels::amewoo lookup_timestep(c(\"2001-3-23\", \"2022-12-05\"), bf) #> [1] 12 49"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup a sequence of timesteps — lookup_timestep_sequence","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"lookup_timestep_sequence() returns ordered vector timesteps, possibly crossing year boundary.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"","code":"lookup_timestep_sequence(   x,   season = NULL,   start = NULL,   end = NULL,   direction = NULL,   season_buffer = 1,   n_steps = NULL )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"x BirdFlow object season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"integer sequence timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"lookup_timestep_sequence() unlikely called directly arguments likely passed functions like predict() route(). Whether called directly via another function lookup_timestep_sequence() flexible function allows several ways defining sequence. Dates.  Input character dates (e.g. \"2023-06-21\") date objects start end. direction determined dates direction optional.  direction used error thrown conform direction implicit dates. Timesteps.  Use numeric start end indicate starting ending timestep.  Since many models circular direction used determine whether go forward backwards start end; direction default forward. Season. Input season name (alias) season.  \"\" can also used indicate timesteps, case cyclical models last timestep match first.  season used (\") season_bufffer indicates number timesteps extend season .  default 1 means sequence start 1 timestep (week) end 1 timestep dates season returned [species_info()]. direction followed defaults forward. Start offset. Use start timestep date input n_steps create sequence starts start proceeds n_steps direction default \"forward\". returned object n_steps + 1 timesteps sequence. Default season start NULL (omitted) default return timesteps model, equivalent season = \"\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"","code":"bf <- BirdFlowModels::rewbla  # 1. Dates - order of dates determines direction lookup_timestep_sequence(bf, start = \"2023-12-1\", end = \"2024-01-20\") #> [1] 48 49 50 51 52  1  2  3 lookup_timestep_sequence(bf, start = \"2024-01-20\", end = \"2023-12-1\") #> [1]  3  2  1 52 51 50 49 48  # 2. Timesteps - direction defaults to \"forward\" lookup_timestep_sequence(bf, start = 50, end = 3) #> [1] 50 51 52  1  2  3 lookup_timestep_sequence(bf, start = 50, end = 3, direction = \"backward\") #>  [1] 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 #> [26] 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  # 3. Season - direction defaults to \"forward\", season_buffer defaults to 1 lookup_timestep_sequence(bf, \"prebreeding_migration\") #>  [1]  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 lookup_timestep_sequence(bf, \"prebreeding_migration\", season_buffer = 0,                          direction = \"backward\") #>  [1] 17 16 15 14 13 12 11 10  9  8  7  6  5  # 4. start & n_steps  (start can be date or timestep) lookup_timestep_sequence(bf, start = \"2022-04-11\", n_steps = 5) #> [1] 15 16 17 18 19 20 lookup_timestep_sequence(bf, start = 10, n_steps = 5) #> [1] 10 11 12 13 14 15  # 5.  No time arguments, equivalent to season = \"all\" lookup_timestep_sequence(bf) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #> [51] 51 52  1 lookup_timestep_sequence(bf, season = \"all\", direction = \"backward\") #>  [1]  1 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 #> [26] 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4 #> [51]  3  2  1"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"private functionlookup_transitions() returns ordered vector transition names connect start end. start end dates order determines whether transitions flow forward backward time.  timesteps direction argument used indicate whether project \"forward\" \"backward\" time possibly passing year boundary.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"","code":"lookup_transitions(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"character vector named transitions required get start  end","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"Transitions named \"T_[]-[]\" [] [] timesteps padded zeros. Direction important; \"T_03-04\" represents transition backward time.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_cache_readme.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to create or update readme files within the local BirdFlow model cache. — make_cache_readme","title":"Internal function to create or update readme files within the local BirdFlow model cache. — make_cache_readme","text":"called anytime new files downloaded cache load_collection_index() load_model().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_cache_readme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to create or update readme files within the local BirdFlow model cache. — make_cache_readme","text":"","code":"make_cache_readme(collection_url = birdflow_options(\"collection_url\"))"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_cache_readme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to create or update readme files within the local BirdFlow model cache. — make_cache_readme","text":"Nothing returned","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to make the dates component of a BirdFlow model — make_dates","title":"Internal function to make the dates component of a BirdFlow model — make_dates","text":"Called preprocess_species intended use.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to make the dates component of a BirdFlow model — make_dates","text":"","code":"make_dates(version_year = NULL)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to make the dates component of a BirdFlow model — make_dates","text":"version_year leave NULL typical usage.  Set eBird version year override.  Used switch_date_format(). version_year < 2021 yield old date format.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to make the dates component of a BirdFlow model — make_dates","text":"Dates table appropriate current version ebirdst","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"make_marginal_index() called [import_birdflow()] truncate_birdflow() add marginal index BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"","code":"make_marginal_index(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"data.frame facilitates looking marginals transition names.  columns: starting timestep transition (direction matters) ending timestep transition direction transition direction, either \"forward\", \"backward\" transition transition name e.g. \"T_02-02\" marginal marginal name e.g. \"M_01-02\", order matches forward transition order, smaller number generally first except last marginal circular model e.g. \"M_52-01\"","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"n_transitions(), n_timesteps(), is_cyclical(), get_timestep_padding() need work object, means metadata$n_timesteps, metatdata$n_transitions, metadata$timestep_padding  properly set. marginals exist yet.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to determine the extent of data in eBird rasters. — make_mask","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"function returns logical single layer SpatRaster TRUE x non-zero values layer. NA count non-zero.  result cropped extent data x. used BirdFlowR preprocess data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"","code":"make_mask(x, count = FALSE, assume_no_na = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"x SpatRaster, typically multilayered contains distribution species time. count TRUE returned value count non-zero cells raster location (across timesteps). Otherwise logical returned, TRUE indicate non-zero value. assume_no_na Set TRUE NA values raster slight efficiency improvement.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"single layer SpatRaster CRS, alignment, resolution x; cropped extent data x.  count = FALSE result logical TRUE non-zero cells layer x FALSE otherwise.  count = TRUE result integer count number timesteps cell appears (0 52 given weekly steps).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"make_mask private function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_pyear_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate breakpoints in proportion of year values that correspond to nice dates — make_pyear_breaks","title":"Generate breakpoints in proportion of year values that correspond to nice dates — make_pyear_breaks","text":"internal function used plot_routes() determine set breaks (labels) color scale. color corresponds dates represented proportion year.  functions picks breaks map quarters year, first month, first fifteenth month, eBird S&T nominal weeks. Choosing based method closest target number breaks (target_n).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_pyear_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate breakpoints in proportion of year values that correspond to nice dates — make_pyear_breaks","text":"","code":"make_pyear_breaks(range, dates, target_n = 8, hpy = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_pyear_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate breakpoints in proportion of year values that correspond to nice dates — make_pyear_breaks","text":"range range proportion year (PY) half proportion year (HPY) values breaks calculated. dates dates table generated get_dates() target_n target number breaks hpy TRUE treat range HPY. FALSE PY.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_pyear_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate breakpoints in proportion of year values that correspond to nice dates — make_pyear_breaks","text":"sequence break points PY HPY units.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"marginal statistics — marginal_stats","title":"marginal statistics — marginal_stats","text":"Internal functions calculate sum marginals percent marginal values zero.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"marginal statistics — marginal_stats","text":"","code":"marginal_stats(bf)  sum_marginals(bf)  calc_pct_zero(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"marginal statistics — marginal_stats","text":"bf BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"marginal statistics — marginal_stats","text":"marginal_stats() returns list sum sum marginals pct_zero percent values across marginals zero. sum_marginals() returns sum marginals. calc_pct_zero() returns percent marginal values zero","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"marginal statistics — marginal_stats","text":"used sparsify fix_dead_ends.  marginal_stats slightly efficient calling two functions independently.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/new_BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","title":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","text":"Private function create empty shell BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/new_BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","text":"","code":"new_BirdFlow()"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/new_BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","text":"empty BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/object_validators.html","id":null,"dir":"Reference","previous_headings":"","what":"Object Validators — object_validators","title":"Object Validators — object_validators","text":"collection functions validate input data frames Routes, BirdFlowRoutes, BirdFlowIntervals. validators ensure data frames contain required columns, conform expected data types, adhere additional constraints specific object class.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/object_validators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object Validators — object_validators","text":"","code":"validate_Routes_route_df(route_df)  validate_BirdFlowRoutes_birdflow_route_df(birdflow_route_df)  validate_BirdFlowIntervals_birdflow_intervals(birdflow_interval_df)  validate_Routes(routes)  validate_BirdFlowRoutes(birdflow_routes)  validate_BirdFlowIntervals(birdflow_intervals)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/object_validators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object Validators — object_validators","text":"route_df data frame containing data Routes class. must include columns like route_id, date, lon, lat, route_type. birdflow_route_df data frame containing data BirdFlowRoutes class. must include additional columns x, y, , timestep. birdflow_interval_df data frame containing data BirdFlowIntervals class. must include columns lon1, lon2, y1, y2, i1, i2, timestep1, timestep2. routes Routes object. birdflow_routes BirdFlowRoutes object. birdflow_intervals BirdFlowIntervals object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/object_validators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object Validators — object_validators","text":"functions return nothing validation succeeds. validation fails, error message raised detailing issue.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/object_validators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Object Validators — object_validators","text":"functions perform comprehensive checks ensure data integrity. verify : required columns present. Data types match expected formats (e.g., numeric, character, Date). missing invalid values present critical fields. Additional constraints specific class, unique timesteps routes, satisfied.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/object_validators.html","id":"functions-included-","dir":"Reference","previous_headings":"","what":"Functions Included:","title":"Object Validators — object_validators","text":"validate_Routes_route_df(): Validates input data frame Routes class. validate_BirdFlowRoutes_birdflow_route_df(): Validates input data frame BirdFlowRoutes class. validate_BirdFlowIntervals_birdflow_intervals(): Validates input data frame BirdFlowIntervals class.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/pad_timestep.html","id":null,"dir":"Reference","previous_headings":"","what":"pad timesteps from BirdFlow models — pad_timestep","title":"pad timesteps from BirdFlow models — pad_timestep","text":"function mostly internal use exported advanced users. primary purpose pad timesteps zeros looking transition names. called lookup_transitions() turn used get_transition().  Padding generally two digit level padding stored BirdFlow object able switch three digit timesteps easily , example, someday decide daily timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/pad_timestep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pad timesteps from BirdFlow models — pad_timestep","text":"","code":"pad_timestep(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/pad_timestep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pad timesteps from BirdFlow models — pad_timestep","text":"x vector timestep integers bf BirdFlow model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/pad_timestep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pad timesteps from BirdFlow models — pad_timestep","text":"string padded versions x;  1 becomes \"01\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/pad_timestep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pad timesteps from BirdFlow models — pad_timestep","text":"","code":"bf <- BirdFlowModels::amewoo pad_timestep(1:5, bf) #> [1] \"01\" \"02\" \"03\" \"04\" \"05\""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distributions — plot_distr","title":"Plot distributions — plot_distr","text":"Return ggplot2::ggplot object plots one distributions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distributions — plot_distr","text":"","code":"plot_distr(   distr,   bf,   subset = NULL,   show_mask = TRUE,   show_dynamic_mask = FALSE,   limits = NULL,   dynamic_scale = FALSE,   coast_linewidth = 0.25,   coast_color = gray(0.5),   gradient_colors = NULL,   active_cell_color = rgb(1, 1, 1, 0.3),   inactive_cell_color = rgb(0, 0, 0, 0.2),   title = species(bf),   value_label = \"Density\",   transform = \"identity\" )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distributions — plot_distr","text":"distr vector matrix distribution values corresponding active cells bf. bf BirdFlow object. subset Defines optional subset distr plotted. Use either column numbers, column names, logical vector. show_mask TRUE (default) static mask indicates cells active model timestep shown. show_dynamic_mask Defaults FALSE. Set TRUE visualize dynamic mask. achieved overwriting cells dynamically masked NA. show_dynamic_mask = TRUE work column names distr colnames(get_distr(bf)).  true distributions returned predict() get_distr(). limits range density values map gradient_colors . default range values distr applying subset. want standardize range across multiple models single species might want set c(0, max) max maximum observed value across models. Alternatively range highly variable among columns distr density spreads single point results predict(bf) may want set smaller full range case values truncated limits (see examples). dynamic_scale Set TRUE range data distribution mapped full color gradient. allows visualizing full range values within timestep optimally cost consistency color scale among facets - animation frames using animate_distr(). coast_linewidth line width use plotting coast. Default 0.25.  NULL coast plotted. coast_color color use plotting coastline. NULL coast plotted. gradient_colors color gradient used plot density values. Leave set NULL default ebirdst::abundance_palette(10, season = \"weekly\"). active_cell_color background color active cells landscape. used show_mask TRUE. cells visible NA values distr show_dynamic_mask TRUE. inactive_cell_color color use inactive cells landscape. cells always masked. relevant show_mask = TRUE. title title plot. defaults common name species (species(bf)). value_label label used values distribution. Defaults \"Density\" transform transformation apply color scaling. Recommended \"identity\", \"sqrt\".  \"log\" used zeros replaced 1/2 smallest non-zero value prior transforming. mapping color gradient. Legend still reflect original values. Passed ggplot2::scale_color_gradientn().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distributions — plot_distr","text":"ggplot2::ggplot() object.  Use print() render .","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_distr.html","id":"masks","dir":"Reference","previous_headings":"","what":"Masks","title":"Plot distributions — plot_distr","text":"BirdFlow objects mask dynamic mask. given timestep model covers cells excluded either masks. mask static mask, AKA \"mask\", indicates cells raster extent included model timestep also called active cells (e.g. n_active()). number elements distribution always match number unmasked cells (static) mask. Cells masked always zero abundance Bird S&T data every week year. dynamic mask dynamic mask indicates cells excluded static mask modeled within timestep. ,like distributions, values active cells. Thus dimensions objects returned get_dynamic_mask(bf) get get_distr(bf) identical. purpose dynamic mask improve efficiency fitting, storing, using BirdFlow models eliminating unlikely locations model.  dynamic mask includes cells zero eBird S&T abundance associated week. display masks set show_dynamic_mask TRUE leave show_mask default (TRUE).  Showing dynamic mask relies matching columns names distribution timesteps model requires column names match column names get_distr().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_distr.html","id":"subtitles","dir":"Reference","previous_headings":"","what":"Subtitles","title":"Plot distributions — plot_distr","text":"Plot subtitles derived column names distr. may useful define single distributions one column matrix label information . example d distribution matrix multiple columns use drop=FALSE subsetting, plot_distr(d[, 1, drop = FALSE], bf); add label vector distribution use d <- matrix(d, ncol = 1);  colnames(d) <- \"new label\"","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_distr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distributions — plot_distr","text":"","code":"bf <- BirdFlowModels::amewoo p <- plot_distr(get_distr(bf, c(1,11, 21)), bf, show_dynamic_mask = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_flux.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bird flux — plot_flux","title":"Plot bird flux — plot_flux","text":"Plot bird flux","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_flux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bird flux — plot_flux","text":"","code":"plot_flux(   flux,   bf,   subset = NULL,   limits = NULL,   dynamic_scale = FALSE,   coast_linewidth = 0.25,   coast_color = gray(0.5),   gradient_colors = NULL,   title = species(bf),   value_label = \"Flux\",   transform = \"identity\" )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_flux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bird flux — plot_flux","text":"flux flux object created calc_flux(format = \"dataframe\") bf BirdFlow object subset subset transitions flux plot, can logical vector length number transitions flux; numeric index transitions flux, subset transition names flux. limits Two numbers representing range flux values display. Values outside range truncated range. default NULL entire range plotted. dynamic_scale TRUE range data transition mapped color palette. makes easier see variation within single transition results inconsistent scale among transitions. coast_linewidth line width used plot coast. Set NULL skip plotting coastline. coast_color color used plot coastline, NULL skip plotting coastline. gradient_colors colors palette used represent flux intensity. title plot title value_label label flux values. transform transformation apply color scaling. \"identity\", \"sqrt\" recommended. \"log\" used zeros replaced 1/2 smallest non-zero value prior transforming. Legend still reflect original values. Passed ggplot2::scale_color_gradientn().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_flux.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bird flux — plot_flux","text":"plot_flux returns ggplot2 object.  can displayed print().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_flux.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bird flux — plot_flux","text":"","code":"if (FALSE) { # \\dontrun{ bf <- BirdFlowModels::amewoo flux <- calc_flux(bf)  plot_flux(flux, bf)  animate_flux(flux, bf) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot changes in component and total loss during model fitting — plot_loss","title":"Plot changes in component and total loss during model fitting — plot_loss","text":"Model fitting  - BirdFlowPy - attempts minimize total weighted loss.  plot shows four lines: Total loss weighted sum three loss components. weighting may cause lower components. Observation loss captures well model predicts Status Trend distributions trained .  weight always set 1 relative weight changed adjusting weights usually much less 1. Distance loss lower routes encoded model shorter. Entropy loss lower entropy model higher.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot changes in component and total loss during model fitting — plot_loss","text":"","code":"plot_loss(bf, transform = \"log10\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot changes in component and total loss during model fitting — plot_loss","text":"bf fitted Bird Flow model transform Passed ggplot2::scale_y_continuous() set y-axis transformation. Reasonable values function include \"identity\", \"log\", \"log10\", \"log2\", \"sqrt\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot changes in component and total loss during model fitting — plot_loss","text":"ggplot2 plot object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot changes in component and total loss during model fitting — plot_loss","text":"","code":"bf <- BirdFlowModels::amewoo  plot_loss(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bird movement vectors — plot_movement_vectors","title":"Plot bird movement vectors — plot_movement_vectors","text":"plots mean movement every cell BirdFlow model given starting time, based transition probabilities following transition.  arrow starts cell center ends average location projected Birds cell. line width alpha (transparency) set arrows visual weight higher probability bird starting location time.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bird movement vectors — plot_movement_vectors","text":"","code":"plot_movement_vectors(bf, start = 1, direction = \"forward\", mv)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bird movement vectors — plot_movement_vectors","text":"bf BirdFlow object start starting timestep transition modeled direction \"Forward\" default. Set \"backward\" calculate vectors transition backwards time. mv optional primarily internal use animate_movement_vectors() allows explicitly providing movement vectors data frame, case start direction ignored.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bird movement vectors — plot_movement_vectors","text":"object inherits classes gg ggplot can plotted print().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot bird movement vectors — plot_movement_vectors","text":"Importantly, visual representation transitions encoded model, average movement bird given cell given point time, involve birds starting cell birds passing starting locations.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bird movement vectors — plot_movement_vectors","text":"","code":"bf <- BirdFlowModels::amewoo plot_movement_vectors(bf, start = 7)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Routes — plot_routes","title":"Plot Routes — plot_routes","text":"Plot Routes BirdFlowRoutes objects lines color indicating passage time. BirdFlowRoutes end point week shown dot size dot corresponds long birds stayed location.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Routes — plot_routes","text":"","code":"plot_routes(   routes,   bf,   facet = FALSE,   max_stay_len = NULL,   use_seasonal_colors = TRUE,   pal = NULL,   barheight = 8,   route_linewidth = 0.85,   dot_sizes = c(1.1, 3.5),   coast_linewidth = 0.25,   stay_units = \"weeks\",   show_mask = TRUE,   crs = NULL,   static = TRUE )  # S3 method for class 'BirdFlowRoutes' plot(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Routes — plot_routes","text":"routes, x object class Routes  BirdFlowRoutes.  Likely output  route(), as_BirdFlowRoutes, Routes(). bf BirdFlow object. used x Routes object, case provides CRS facet TRUE use ggplot2::facet_wrap() show route separate subplot. max_stay_len Used scale stay length dots. NULL (default) set maximum \"stay_len\" value routes. Set manually keep dot scaling consistent across multiple plots. use_seasonal_colors TRUE color scale uses blues, greens, yellows, reds, winter, spring, summer, fall used consistent mapping dates colors regardless range dates plotted. FALSE data plotted using full color scale. pal color palette use plotting use_seasonal_cols FALSE. Defaults viridisLite::viridis(n = 5). barheight height color gradient legend bar. Passed ggplot2::guide_colorbar() barheight argument. Depending output resolution plot size may need adjusted. Can take number output ggplot2::unit(). route_linewidth Line width used routes. dot_sizes Two numbers indicating smallest largest dot sizes used represent stay length. coast_linewidth Line width used coastlines. stay_units unit plot stay length location. Default weeks. options include sec, mins, hours, days weeks. show_mask BirdFlow Model's (bf) static mask displayed. crs used bf missing.  crs sets Coordinate Reference system used plotting. See terra::crs(). static internal use. set FALSE plot_routes() called animate_routes(). ... Passed plot_routes() plot() Route BirdFlowRoutes objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Routes — plot_routes","text":"ggplot object. Use print() display .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Routes — plot_routes","text":"plot.BirdFlowRoutes() calls plot_routes().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Routes — plot_routes","text":"","code":"bf <- BirdFlowModels::amewoo n <- 10 rts <- route(bf, n, season = \"prebreeding\")  # Multiple routes on one plot plot_routes(rts, bf)   # One panel per route new_rts <- rts new_rts$data <- new_rts$data[new_rts$data$route_id %in% 1:4, ] plot_routes(new_rts, bf, facet = TRUE)   # Returned plot object can be edited # Here we change the title and add an additional sf # layer with country boundaries library(ggplot2) p <- plot_routes(rts, bf) +   ggtitle(paste0(species(bf), \" (with countries)\")) +   geom_sf(data = get_countries(bf), inherit.aes = FALSE, fill = NA) +   coord_sf(expand = FALSE) #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. p  if (FALSE) { # \\dontrun{ # Use alternate color palettes plot_routes(rts, bf, use_seasonal_colors = FALSE)  plot_routes(rts, bf,   use_seasonal_colors = FALSE,   pal = c(\"red\", \"yellow\", \"blue\") ) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict bird distributions — predict.BirdFlow","title":"Predict bird distributions — predict.BirdFlow","text":"predict() projects bird distributions future past. Given initial distribution time period specified via ..., predict() generates probability distributions timestep.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict bird distributions — predict.BirdFlow","text":"","code":"# S3 method for class 'BirdFlow' predict(object, distr, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict bird distributions — predict.BirdFlow","text":"object BirdFlow model object. distr starting distribution. ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict bird distributions — predict.BirdFlow","text":"multiple starting distributions input matrix result array dimensions: location, distribution, time. one input distribution result matrix dimensions: location time.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":null,"dir":"Reference","previous_headings":"","what":"predict the number of parameters based on resolution — predict_params","title":"predict the number of parameters based on resolution — predict_params","text":"function called preprocess_species() predicts many parameters model likely different resolution given set stats number cells area timestep current resolution, calculated calc_abundance_stats()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predict the number of parameters based on resolution — predict_params","text":"","code":"predict_params(a_stats, res, adjustment = 0.4)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predict the number of parameters based on resolution — predict_params","text":"a_stats output calc_abundance_stats() used component area vector area square meters unmasked cells timestep. res cell (presumed square) resolution km. adjustment used","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predict the number of parameters based on resolution — predict_params","text":"estimated number parameters given resolution res","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"predict the number of parameters based on resolution — predict_params","text":"predict_params() calculates preliminary estimate based inaccurate assumption area covered cells two resolutions. However, changing resolution fine cells underlying occupied coarse cells occupied thus increasing resolution number cells underestimated decreasing resolution overestimated. amount bias depends configuration occupied cells fragmented occupied areas resulting greater bias. adjustment allows compensating bias. adjustment multiplied proportional change resolution: (res2 - res1)/res1 initial area based estimate (possibly negative) result added area based estimate. example doubling resolution proportional change 1  adjustment 0.35 end adding 35% initial estimate. Conversely halving resolution proportional change -.5 end subtracting 17.5% estimate.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","title":"Prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"Write template BirdFlow object hdf5 file based distribution data downloaded ebirdst. object complete except marginals transitions.  Use ... truncate model part year.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"","code":"preprocess_species(   species = NULL,   out_dir = NULL,   res = NULL,   hdf5 = TRUE,   overwrite = TRUE,   crs = NULL,   clip = NULL,   max_params = NULL,   gpu_ram = 12,   skip_quality_checks = FALSE,   min_season_quality = 3,   trim_quantile = NULL,   ... )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"species species format accepted ebirdst::get_species() out_dir Output directory, files written . Required unless hdf5 FALSE.  File names created incorporate species code, resolution, eBird version year. res target resolution BirdFlow model kilometers. res NULL (default) resolution results less max_params parameters used, also minimizing resolution limiting number significant digits. hdf5 TRUE (default) hdf5 file exported. overwrite TRUE (default) pre-existing output files overwritten. FALSE pre-existing files result error. crs Coordinate reference system (CRS) use.  Defaults custom projection eBird assigned species - see ebirdst::load_fac_map_parameters()). interpreted terra::crs() generate well known text representation CRS. clip polygon path file containing polygon. must CRS either SpatVector() object produce one called vect(clip) max_params maximum number fitted parameters BirdFlow model contain. Ignored res NULL.  Otherwise resolution chosen yields many fitted parameters. See gpu_ram default way setting max_params res. Note: reduction parameters resulting truncation (see ...) factored calculation. gpu_ram Gigabytes ram GPU machine fit models. res NULL max_params NULL used estimate max_paramswhich , turn, used determine resolution. Ignored either res max_params set. skip_quality_checks TRUE preprocess species even four ranges modeled (ebirdst 2021 version year) 2022 subsequent data versions <season>_quality higher min_season_quality ebirdst_runs). min_season_quality minimum acceptable season quality preprocessing eBird 2022 subsequent versions. Used check model quality using based four <season>_model_quality columns ebirdst_runs ignored 2021 ebirdst version year. trim_quantile default NULL outlier trimming, otherwise single value 0 1 indicate quantile truncate series 52 values corresponding week. Trimming outliers always done week week values trim_quantile quantile set value quantile. Reasonable non NULL values close 1 e.g. 0.99, 0.995, 0.999. Set trim_quantile eliminate high outliers believed model artifacts. See Issue #189 detailed justification. ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"Returns BirdFlow model object lacks marginals, otherwise complete.  suitable fitting BirdFlowPy.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"maximum-number-of-parameters","dir":"Reference","previous_headings":"","what":"Maximum number of parameters","title":"Prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"maximum number parameters can fit machine dependent. 2023-02-10 tested different resolutions \"amewoo\" identified bounds maximum. number parameters number unmasked cells first timestep + total number cells marginals calculated dynamic mask. gpu_ram used (res max_parameters ) max_parameters set 23,224,801 * gpu_ram (lower two values table ). heuristic determine resolution given maximum number parameters must estimate number cells covered data different resolution, noisy process, iteratively tries find smallest resolution exceed max_params rounds slightly larger resolution (fewer parameters).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"","code":"if (FALSE) { # \\dontrun{   bf <- preprocess_species(\"amewoo\", hdf5 = FALSE )  plot_distr(get_distr(bf, c(1, 26)), bf = bf)  # Create clip polygon as an sf object # Use the extent rectangle but with western edge moved in # The clip can be anything that terra::vect will process into a polygon e <- ext(bf) e[1] <- -1500000 coords <- matrix(c(e[1], e[3],                    e[1], e[4],                    e[2], e[4],                    e[2], e[3],                    e[1], e[3]), ncol = 2, byrow = TRUE) sfc <- sf::st_sfc(sf::st_polygon(list(coords)), crs = crs(bf)) clip <- sf::st_sf(data.frame(id = 1, geom = sfc))  bfc <- preprocess_species(\"amewoo\", hdf5 = FALSE, clip = clip ) # with clip   plot_distr(get_distr(bfc, 1), bfc)   } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Print BirdFlow models — print.BirdFlow","title":"Print BirdFlow models — print.BirdFlow","text":"print method BirdFlow objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print BirdFlow models — print.BirdFlow","text":"","code":"# S3 method for class 'BirdFlow' print(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print BirdFlow models — print.BirdFlow","text":"x BirdFlow object. ... arguments passed methods","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print BirdFlow models — print.BirdFlow","text":"x returned invisibly unchanged.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlowIntervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a BirdFlowIntervals Object — print.BirdFlowIntervals","title":"Print a BirdFlowIntervals Object — print.BirdFlowIntervals","text":"Print method BirdFlowIntervals objects, summarizing interval data metadata, including temporal spatial ranges.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlowIntervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a BirdFlowIntervals Object — print.BirdFlowIntervals","text":"","code":"# S3 method for class 'BirdFlowIntervals' print(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlowIntervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a BirdFlowIntervals Object — print.BirdFlowIntervals","text":"x BirdFlowIntervals object print. ... arguments used method.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlowIntervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a BirdFlowIntervals Object — print.BirdFlowIntervals","text":"Invisibly returns input birdflow_intervals object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlowIntervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a BirdFlowIntervals Object — print.BirdFlowIntervals","text":"","code":"# Create a BirdFlowIntervals object interval_df <- data.frame(     interval_id = 1:3,     route_id = c(\"route1\", \"route1\", \"route2\"),     lon1 = c(-90, -89, -88),     lon2 = c(-89, -88, -87),     lat1 = c(40, 41, 42),     lat2 = c(41, 42, 43),     x1 = c(1000, 1100, 1200),     x2 = c(1100, 1200, 1300),     y1 = c(500, 600, 700),     y2 = c(600, 700, 800),     i1 = as.integer(c(1, 2, 3)),     i2 = as.integer(c(2, 3, 4)),     date1 = as.Date(c(\"2024-01-01\", \"2024-01-02\", \"2024-01-03\")),     date2 = as.Date(c(\"2024-01-02\", \"2024-01-03\", \"2024-01-04\")),     timestep1 = as.integer(c(1, 2, 3)),     timestep2 = as.integer(c(2, 3, 4)),     route_type = c(\"tracking\", \"tracking\", \"banding\") ) bf <- BirdFlowModels::amewoo birdflow_intervals <- BirdFlowIntervals(interval_df,     species = bf$species,     metadata = NULL, geom = bf$geom, dates = get_dates(bf) )  print(birdflow_intervals) #> ---------------------------------------------  #> BirdFlowIntervals Object  #>  #> Species:             American Woodcock / Scolopax minor / amewoo #> Number of intervals: 3 #> Number of routes:    2 #> Date range:          2024-01-01, 2024-01-04 #> Longitude range:     -90, -87 #> Latitude range:      40, 43 #> Min. interval size:  1 days / 1 timesteps #> Max. interval size:  1 days / 1 timesteps #> ---------------------------------------------  #>      Type Routes Points #>   banding      1      1 #>  tracking      1      2 #> ---------------------------------------------  #> Data: #>   interval_id route_id   x1   x2  y1  y2 i1 i2 lon1 lon2 lat1 lat2      date1 #> 1           1   route1 1000 1100 500 600  1  2  -90  -89   40   41 2024-01-01 #> 2           2   route1 1100 1200 600 700  2  3  -89  -88   41   42 2024-01-02 #> 3           3   route2 1200 1300 700 800  3  4  -88  -87   42   43 2024-01-03 #>        date2 timestep1 timestep2 route_type #> 1 2024-01-02         1         2   tracking #> 2 2024-01-03         2         3   tracking #> 3 2024-01-04         3         4    banding #> ---------------------------------------------"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.Routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Routes and BirdFlowRoutes objects — print.Routes","title":"Print Routes and BirdFlowRoutes objects — print.Routes","text":"Print summary Routes BirdFlowRoutes objects","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.Routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Routes and BirdFlowRoutes objects — print.Routes","text":"","code":"# S3 method for class 'Routes' print(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.Routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Routes and BirdFlowRoutes objects — print.Routes","text":"x Routes BirdFlowRoutes object print. ... arguments used method.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.Routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Routes and BirdFlowRoutes objects — print.Routes","text":"Invisibly returns input object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.Routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Routes and BirdFlowRoutes objects — print.Routes","text":"","code":"# Create a Routes object route_df <- data.frame(   route_id = c(\"001\", \"001\", \"001\", \"001\", \"001\",   \"003\", \"003\", \"003\", \"004\"),   date = as.Date(c(\"2025-01-01\", \"2025-01-08\", \"2025-01-15\", \"2025-01-21\",   \"2025-02-10\", \"2025-03-01\", \"2025-05-01\", \"2025-06-01\", \"2025-05-01\")),   lon = c(-75.0060, -75.0060, -74.0060, -87.6298, -87.6298, -87.6298,   -89.6298, -85.6298, -95.3698),   lat = c(39.7128, 39.7128, 40.7128, 41.8781, 41.8781, 41.8781,   42.8781, 40.8781, 29.7604),   route_type = c(\"tracking\", \"tracking\", \"tracking\", \"tracking\",   \"tracking\", \"motus\", \"motus\", \"motus\", \"motus\") ) routes <- Routes(route_df, species = list(common_name = \"American Woodcock\"))  print(routes) #> ---------------------------------------------  #> Routes Object  #>  #> Species:          American Woodcock #> Types:            tracking, motus #> Number of routes: 3 #> Number of points: 9 #> Date range:       2025-01-01, 2025-06-01 #> Longitude range:  -95.3698, -74.0060 #> Latitude range:   29.7604, 42.8781 #> ---------------------------------------------  #>      Type Routes Points #>     motus      2      4 #>  tracking      1      5 #> ---------------------------------------------  #>   route_id       date      lon     lat route_type #> 1      001 2025-01-01 -75.0060 39.7128   tracking #> 2      001 2025-01-08 -75.0060 39.7128   tracking #> 3      001 2025-01-15 -74.0060 40.7128   tracking #> 4      001 2025-01-21 -87.6298 41.8781   tracking #> 5      001 2025-02-10 -87.6298 41.8781   tracking #> (4 lines omitted)  # BirdFlowRoutes bf <- BirdFlowModels::amewoo bf_routes <- as_BirdFlowRoutes(routes, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print_type_breakdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of route types, their count, and number of points — print_type_breakdown","title":"Print summary of route types, their count, and number of points — print_type_breakdown","text":"internal helper function use print methods route interval data classes.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print_type_breakdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of route types, their count, and number of points — print_type_breakdown","text":"","code":"print_type_breakdown(x, crossline)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print_type_breakdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of route types, their count, and number of points — print_type_breakdown","text":"x Routes, BirdFlowROutes BirdFlowIntervals object. crossline Characters printed printing summary","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print_type_breakdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of route types, their count, and number of points — print_type_breakdown","text":"invisibly returns table","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print_type_breakdown.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print summary of route types, their count, and number of points — print_type_breakdown","text":"prints breakdown routes type one type route x.  one type output redundant.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/process_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"process_rasters — process_rasters","title":"process_rasters — process_rasters","text":"Internal function process rasters eBird Status Trends use BirdFlow model. Called preprocess_species() sufficiently complicated justify separate function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/process_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"process_rasters — process_rasters","text":"","code":"process_rasters(   res,   crs,   download_species,   sp_path,   clip,   project_method,   download_patterns,   trim_quantile = NULL )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/process_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process_rasters — process_rasters","text":"res Output resolution kilometers crs Coordinate reference system (CRS) use.  Defaults custom projection eBird assigned species - see ebirdst::load_fac_map_parameters()). interpreted terra::crs() generate well known text representation CRS. download_species species code used downloading eBird S&T data, might \"example_data\" otherwise standard species code. sp_path path used downloading species data - passed ebirdst functions. clip polygon indicating area process NULL process entire species range. project_method Method use reprojecting. Set locally code within preprocess_species() trim_quantile default NULL outlier trimming, otherwise single value 0 1 indicate quantile truncate series 52 values corresponding week. Trimming outliers always done week week values trim_quantile quantile set value quantile. Reasonable non NULL values close 1 e.g. 0.99, 0.995, 0.999. Set trim_quantile eliminate high outliers believed model artifacts. See Issue #189 detailed justification.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/process_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process_rasters — process_rasters","text":"list distr, uci, lci species distribution, upper lower confidence intervals distribution flattened form. timestep stored column values unmasked cells . m mask stored logical matrix TRUE representing active cells model mask mask stored terra::SpatRaster","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a BirdFlow distribution into a raster — rasterize","title":"Convert a BirdFlow distribution into a raster — rasterize","text":"rast() converts BirdFlow object directly SpatRaster. rasterize_distr() converts distribution SpatRaster, numeric matrix array, raster data frame.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a BirdFlow distribution into a raster — rasterize","text":"","code":"rasterize_distr(distr, bf, format = \"SpatRaster\")  # S4 method for class 'BirdFlow' rast(x, which = \"all\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a BirdFlow distribution into a raster — rasterize","text":"distr distribution vector form matrix column represents different distribution. bf BirdFlow object. format One 'SpatRaster' terra::SpatRaster object, 'numeric' matrix array, 'dataframe' raster data suitable plotting ggplot2::geom_raster() x BirdFlow object. Indicates timesteps return. Can one integers indicating timesteps; character dates format year-month-day e.g. \"2019-02-25\"; Date objects; \"\" return distributions timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a BirdFlow distribution into a raster — rasterize","text":"rasterize_distr() return type depends format argument: \"SpatRaster\" (default) returns terra::SpatRaster object. \"numeric\" returns matrix (one distribution) array (multiple distributions).  either case first two dimensions y (rows), x (columns). \"dataframe\" return raster information data frame row every value (long format) columns: x, y x y coordinates cell center. location index (bf) cell. label label associated distribution, taken column names distr - typically indicates time. ordered factor level order matching order distribution distr. ordered factor helpful animating. value  cell value, typically density order  column index distribution distr one distribution 1. object suitable plotting [ggplot2::geom_raster]. rast() returns terra::SpatRaster","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/read_geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Read geom component of a BirdFlow hdf5 — read_geom","title":"Read geom component of a BirdFlow hdf5 — read_geom","text":"internal function called import_birdflow() extend_birdflow() read format geom component model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/read_geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read geom component of a BirdFlow hdf5 — read_geom","text":"","code":"read_geom(hdf5)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/read_geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read geom component of a BirdFlow hdf5 — read_geom","text":"hdf5 path hdf5 file","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/read_geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read geom component of a BirdFlow hdf5 — read_geom","text":"geom component birdflow model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"reformat distr time labels based on birdflow_options(","title":"reformat distr time labels based on birdflow_options(","text":"internal function change labels object containing distributions match time format user specified global options. Internally distributions stored generated labels based timestep (\"t1\"  etc.).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reformat distr time labels based on birdflow_options(","text":"","code":"reformat_distr_labels(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reformat distr time labels based on birdflow_options(","text":"x object containing bird distributions bf BirdFlow object (used date information)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reformat distr time labels based on birdflow_options(","text":"x (potentially) new labels","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reformat distr time labels based on birdflow_options(","text":"March 15, 2023 experimenting adding attribute \"time\" vector distribution keep track time label. one distribution stored matrix colnames store time associated distribution. function currently returns input object resolve labels.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":null,"dir":"Reference","previous_headings":"","what":"reformat timestep labels — reformat_timestep","title":"reformat timestep labels — reformat_timestep","text":"given vector timestep labels provide vector formatted labels based value birdflow_options(\"time_format\") (see function options.)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reformat timestep labels — reformat_timestep","text":"","code":"reformat_timestep(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reformat timestep labels — reformat_timestep","text":"x one (vector) (matrix) distributions, column labels consisting \"t\" timestep. bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reformat timestep labels — reformat_timestep","text":"x update column labels, dictated birdflow_options(\"time_format\")","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reformat timestep labels — reformat_timestep","text":"Internally distributions labeled \"t\" timestep integer. returning user reformat_distr_labels() called change format turn calls function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reset_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset Route Indices — reset_index","title":"Reset Route Indices — reset_index","text":"Resets route IDs Routes object new sequential numbering.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reset_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset Route Indices — reset_index","text":"","code":"reset_index(routes)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reset_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset Route Indices — reset_index","text":"routes Routes data frame object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reset_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset Route Indices — reset_index","text":"data frame updated route IDs.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate BirdFlow routes — route","title":"Generate BirdFlow routes — route","text":"route() projects bird positions time based probabilities embedded BirdFlow model. output linear, stochastic routes.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate BirdFlow routes — route","text":"","code":"route(bf, n = 1, x_coord = NULL, y_coord = NULL, from_marginals = FALSE, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate BirdFlow routes — route","text":"bf BirdFlow object. n sampling starting positions (x_coord, y_coord NULL). Generate many samples.  Otherwise x_coord y_coord positions duplicated n times. x_coord, y_coord Optional, NULL starting points drawn species distribution initial timestep. from_marginals Use FALSE (default) use distributions derived directly eBird Status Trends sampling starting locations. Set TRUE sample distributions derived fitted model parameters stored marginals. Passed get_distr(). ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate BirdFlow routes — route","text":"BirdFlowRoutes object columns: x, y Coordinates point along route. date Date associated point. timestep Timestep associated point. route Unique ID route individual. Location index point (see i_to_xy()). stay_id Within route sequential id locations. stay_len many timesteps Bird point stay (minimum 1). also experimental attributes: geom, species, dates geom, species, dates components BirdFlow object routes derived . metadata metadata component parent BirdFlow object, one additional item route_type = \"synthetic\".","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate BirdFlow routes — route","text":"","code":"bf <- BirdFlowModels::amewoo rts <- route(bf, 10, season = \"prebreeding\")  if (FALSE) { # \\dontrun{ plot_routes(rts) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","title":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","text":"function now deprecated eventually deleted. Please transition using  route() can now generate starting locations sampling distributions bf use season name specify time period route .  adjustment needs made use season argument route() place migration argument route_migration().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","text":"","code":"route_migration(bf, n, migration = \"prebreeding\", season_buffer = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","text":"bf BirdFlow model n number routes generate migration \"prebreeding\", \"pre\", \"spring\" prebreeding migration; \"postbreeding\", \"post\", \"fall\" postbreeding migration. season_buffer buffer timesteps (likely weeks) add beginning end season. default 1 means start week metadata suggests season starts continue one week past end.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","text":"BirdFlowRoutes object columns: x, y Coordinates point along route. date Date associated point. timestep Timestep associated point. route Unique ID route individual. Location index point (see i_to_xy()). stay_id Within route sequential id locations. stay_len many timesteps Bird point stay (minimum 1). also experimental attributes: geom, species, dates geom, species, dates components BirdFlow object routes derived . metadata metadata component parent BirdFlow object, one additional item route_type = \"synthetic\".","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample locations from a distribution — sample_distr","title":"Sample locations from a distribution — sample_distr","text":"Probabilistically sample one locations set distributions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample locations from a distribution — sample_distr","text":"","code":"sample_distr(distr, n = 1, bf, format = \"distr\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample locations from a distribution — sample_distr","text":"distr vector representing single distribution; matrix representing one distribution per column, (unlikely)  array first dimension represents locations. values distr treated relative probability species position. n used distr vector representing single model state, case model state sampled n times generate matrix representing n sampled locations distribution. bf BirdFlow object, required format \"latlon\" \"xy\", optional otherwise. format One \"distr\" (default), \"xy\", \"latlon, \"\" indicating format sample returned .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample locations from a distribution — sample_distr","text":"One location samples distributions distr format changes value offormat: distr Default. Return object dimensions distr weight distribution distr assigned single location containing 1 remaining locations 0's. xy x y coordinates locations, usually data frame 3D input array. latlon Return latitude (lat) longitude (lon) coordinates WGS 1984 sampled locations, usually data frame 3D input array. Return location index sampled locations.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample locations from a distribution — sample_distr","text":"","code":"bf <- BirdFlowModels::amewoo d <- get_distr(bf, 5)  # default format \"distr\" returns an object similar to the input # in which all the weight for each distribution has been concentrated # in a single location one_hot <- sample_distr(d) all(one_hot %in% c(0, 1)) #> [1] TRUE sum(one_hot) #> [1] 1  # Sample 10 times from a single distribution and return x and y coordinates. xy <- sample_distr(d,  10, format = \"xy\", bf = bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"shorten and expand distance matrices — shorten_distance_matrix","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"functions facilitate storing just non-duplicated elements distance matrix vector hdf5 file. Since distance matrix symmetrical zero's diagonal distances can stored vector contains fewer half values full matrix.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"","code":"shorten_distance_matrix(dm)  expand_distance_matrix(vals)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"dm distance matrix, symmetrical n x n, matrix contains distances among n locations. vals values lower triangle distance matrix row major order.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"shorten_distance_matrix() returns vector values. expand_distance_matrix() returns full matrix given vector.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"shorten_distance_matrix() extracts lower triangle column major order distance matrix. expand_distance_matrix() reassemble full distance matrix purpose halve number values stored hdf5 file. 5 x 5 distance matrix values corresponding numbered cells . Due symmetry distance matrix equivalent upper triangle row major order - probably treated python.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"","code":"if (FALSE) { # \\dontrun{ x <- runif(5, 1, 100) y <- runif(5, 1, 100) dm <- as.matrix(dist(cbind(x, y))) a <- shorten_distance_matrix(dm) dm2 <- expand_distance_matrix(a) all.equal(dm, dm2, check.attributes = FALSE) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shrink_birdflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Shrink BirdFlow extent — shrink_birdflow","title":"Shrink BirdFlow extent — shrink_birdflow","text":"Shrink BirdFlow extent","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shrink_birdflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shrink BirdFlow extent — shrink_birdflow","text":"","code":"shrink_birdflow(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shrink_birdflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shrink BirdFlow extent — shrink_birdflow","text":"x single BirdFlow object, one paths BirdFlow objects stored either hdf5 rds files.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shrink_birdflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shrink BirdFlow extent — shrink_birdflow","text":"x extended BirdFlow model, see extend_birdflow()thanshrink_birdflow()` returns model original extent. x path one BirdFlow models files shrunk original extent logical vector length returned TRUE success.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shrink_birdflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shrink BirdFlow extent — shrink_birdflow","text":"","code":"bf <- BirdFlowModels::amewoo  # Define extended extent for example e <-  ext(bf) buffer <- 3 * res(bf) e[1] <- e[1] - buffer[1] e[2] <- e[2] + buffer[1] e[3] <- e[3] - buffer[2] e[4] <- e[4] + buffer[2]  bf2 <- extend_birdflow(bf, e)  bf3 <- shrink_birdflow(bf2)  # Compare extents data.frame(item = names(as.vector(ext(bf))),             initial = as.vector(ext(bf)),             extended = as.vector(ext(bf2)),             shrunk = as.vector(ext(bf3))) #>      item  initial extended   shrunk #> xmin xmin -2550000 -3000000 -2550000 #> xmax xmax  2100000  2550000  2100000 #> ymin ymin -1650000 -2100000 -1650000 #> ymax ymax  1650000  2100000  1650000  if (FALSE) { # \\dontrun{ # Plot library(terra) plot_distr(get_distr(bf, 1), bf) plot_distr(get_distr(bf2, 1), bf2) plot_distr(get_distr(bf3, 1), bf3)   } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shrink_geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Shrink geometry component of a BirdFlow object — shrink_geom","title":"Shrink geometry component of a BirdFlow object — shrink_geom","text":"internal helper function called twice shrink_birdflow() adjusts nrow, ncol, ext, mask elements geom component BirdFlow model original extent, preserving number, location, alignment unmasked cells - thus nothing else object needs change. geometry extended (shrink_birdflow(), extend_geom()) returned .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shrink_geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shrink geometry component of a BirdFlow object — shrink_geom","text":"","code":"shrink_geom(geom)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shrink_geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shrink geometry component of a BirdFlow object — shrink_geom","text":"geom geometry component BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shrink_geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shrink geometry component of a BirdFlow object — shrink_geom","text":"shrunk (original) geometry","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/snap_to_birdflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign cells and timesteps to coordinates and dates — snap_to_birdflow","title":"Assign cells and timesteps to coordinates and dates — snap_to_birdflow","text":"function aligns bird movement data location date information BirdFlow model's cells timesteps. Optionally,aggregate multiple points track within week single point date prior determining location ID.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/snap_to_birdflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign cells and timesteps to coordinates and dates — snap_to_birdflow","text":"","code":"snap_to_birdflow(   d,   bf,   x_col = \"lon\",   y_col = \"lat\",   date_col = \"date\",   id_cols = \"id\",   crs = \"EPSG:4326\",   aggregate = NULL )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/snap_to_birdflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign cells and timesteps to coordinates and dates — snap_to_birdflow","text":"d data frame bird movement data must columns specified x_col, y_col, date_col, id_cols.  default values first three  \"lon\", \"lat\", \"date\". bf BirdFlow model x_col name column holds x longitude coordinates. Default \"lon\". y_col name y latitude column, default \"lat\". date_col Name date column, defaults \"date\" id_cols name identification columns. One columns collectively define unique track. aggregate NULL along timestep (calculated date_col) used define groups.  aggregate NULL columns used retained output. crs coordinate reference system used x_col y_col. default \"EPSG:4326\" corresponds WGS 1984 aggregate Leave default NULL aggregation - row d processed separately represented returned object. aggregate set one values locations (rows) d fall week track (see id_cols) aggregated together one location per week track. possible values aggregate : mean mean \"x\", \"y\", \"date\" columns used week. median median \"x\", \"y\", \"date\" columns  used week. midweek observation closest middle week used represent week. ties observation occurs first used. random One observation randomly selected week. Pending ideas, yet implemented: gmedian geometric median central point closest centroid points used represent week.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/snap_to_birdflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign cells and timesteps to coordinates and dates — snap_to_birdflow","text":"data frame columns id_cols columns identified id_cols retained leftmost. date column information date_col retain name original formatting. aggregate NULL input dates retained, date vary aggregation method represent dates went summary mid-week date associated timestep. input date_col date-time class output date column well. example aggregate = \"mean\" date average date points week. timestep model timestep associated date. x, y x y coordinates point. always crs(bf) represent original aggregated location cell center. location index cell associated x y bf.  See i_to_xy(). n number rows d contributed output row. aggregate NULL every value 1. error TRUE error. message NA error message. possible messages : \"err_date\" - date parsed lubridate::as_date() \"err_truncated\" - bf truncated date falls outside portion year model covers. \"err_coords\" - coordinates transformed crs(bf) thus likely corrupt way. \"err_not_active\" - location fall within active cell defined static mask. \"err_dynamic\" - location fall within dynamic mask associated date. \"err_sparse\" - location falls within dynamic mask location date combination eliminated sparsification. function always return error message appears first list, even though cases multiple errors can triggered. aggregation first three errors prevent row used dropped prior aggregation warning.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/snap_to_birdflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign cells and timesteps to coordinates and dates — snap_to_birdflow","text":"aggregate NULL row output correspond row input.  aggregation rows can lost two ways (1) coordinates timestep resolved (first three errors list) row dropped prior aggregation. (2) via aggregation rows within week track collapsed one. aggregated locations can still trigger three errors list. location id assigned location valid location model associated date.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/snap_to_birdflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign cells and timesteps to coordinates and dates — snap_to_birdflow","text":"","code":"bf <- BirdFlowModels::rewbla |> add_dynamic_mask() obs <- BirdFlowModels::rewbla_observations a <- snap_to_birdflow(obs, bf, id_cols = \"bird_id\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sort_by_id_and_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort Routes by ID and Date — sort_by_id_and_dates","title":"Sort Routes by ID and Date — sort_by_id_and_dates","text":"Sorts Routes data frame object route ID date.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sort_by_id_and_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort Routes by ID and Date — sort_by_id_and_dates","text":"","code":"sort_by_id_and_dates(routes)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sort_by_id_and_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort Routes by ID and Date — sort_by_id_and_dates","text":"routes Routes data frame object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sort_by_id_and_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort Routes by ID and Date — sort_by_id_and_dates","text":"sorted data frame.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":null,"dir":"Reference","previous_headings":"","what":"sparsify BirdFlow models — sparsify","title":"sparsify BirdFlow models — sparsify","text":"Set low values zero BirdFlow model marginals reduce object size.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sparsify BirdFlow models — sparsify","text":"","code":"sparsify(x, method, p = 0.99, fix = TRUE, p_protected = 0.1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sparsify BirdFlow models — sparsify","text":"x BirdFlow model. method One “\"conditional\", \"marginal\"`, `\"model\"`. See \"Methods\" section details. p Required control proportion probability density retained sparsification process. See \"Methods\" . fix TRUE call fix_dead_ends() eliminate dead ends sparse model, honored method produces dead ends. p_protected used \"conditional method. proportion cells row column protected zeroed .  value p_protected 0 protects non-dynamically-masked (NDM) locations dropped model. default value 0.10 means NDM location always transitions retained least 10% next timestep's NDM locations.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sparsify BirdFlow models — sparsify","text":"BirdFlow object values marginals set zero. metadata also updated sparsification statistics. marginals standardized sum 1.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sparsify BirdFlow models — sparsify","text":"BirdFlow model fitting algorithm predict complete zero, however many marginal values close zero little impact model predictions. sparsify() forces small values zero goal saving memory, reducing file size, decreasing run time. Marginals stored sparse matrices (Matrix::Matrix(x , sparse = TRUE) ) non-zero values consume memory.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"sparsify BirdFlow models — sparsify","text":"three sparsification methods based proportion. use p control amount sparsification; p target proportion density retain eliminating values (calculated) threshold. thresholds calculated applied either whole model (model)  repeatedly components (conditional, marginal). model model sparsification values marginals pooled threshold chosen entire model zeroing values threshold results target proportion, p, model's density remaining. marginal threshold chosen applied separately marginal model.  Ultimately, p achieved model whole threshold cells set zero varies across marginals. conditional method targets (1 - p) forward backward conditional probabilities zeroed also guarantees least p_protected proportion cells row column zeroed . method thresholds chosen independently row column marginal prior zeroing cells fall either row column thresholds set zero long within  p_protected proportion cells (highest value cells) protected zeroing based either row column. p_protected thus prevents number transitions sparse model state falling given proportion transitions full model.  default value means every location every timestep least 10% transitions locations next timestep retained. method hit target p density retained. theory twice much density p implies cut model cells targeted based row column overlap, much p retained high values p_protected","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sparsify BirdFlow models — sparsify","text":"","code":"if (FALSE) { # \\dontrun{ # Full models are huge so we don't distribute them. # Assuming you have an hdf5 file with a full model you could run: bf <- import_birdflow(hdf5_path) sbf <- sparsify(bf, method = \"marginal+state\", p = 0.99) } # }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve species information from a BirdFlow model — species_info","title":"Retrieve species information from a BirdFlow model — species_info","text":"species_info() species() return species data stored BirdFlow model. differ species() returns common name default provides succinct way get species name.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve species information from a BirdFlow model — species_info","text":"","code":"species_info(x, what)  species(x, what)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve species information from a BirdFlow model — species_info","text":"x BirdFlow model. \"\" information (list) name (see details) desired information. omitted species() defaults \"common_name\" species_info() defaults \"\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve species information from a BirdFlow model — species_info","text":"element named , unless \"\" case list species information.  omitted species() return common name species, species_info() return complete list.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve species information from a BirdFlow model — species_info","text":"argument takes column names used ebirdst::ebirdst_runs input (descriptions ebirdst): convenience following short versions also accepted:","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"dropped-items","dir":"Reference","previous_headings":"","what":"Dropped items","title":"Retrieve species information from a BirdFlow model — species_info","text":"8 variables ebirdst::ebirdst_runs dropped BirdFlow model thus can retrieved species_info(). Four variables track whether full range covered eBird must TRUE BirdFlow model fit dropped: resident verified FALSE model fit. three related variables dropped:","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/suppress_specific_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppress warnings that match one or more regular expressions — suppress_specific_warnings","title":"Suppress warnings that match one or more regular expressions — suppress_specific_warnings","text":"suppress_specific_warnings() suppress warnings match regular expression patterns supplied via patterns argument, without suppressing warnings match patterns.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/suppress_specific_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppress warnings that match one or more regular expressions — suppress_specific_warnings","text":"","code":"suppress_specific_warnings(x, patterns = NULL)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/suppress_specific_warnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suppress warnings that match one or more regular expressions — suppress_specific_warnings","text":"x expression. patterns One patterns check warning messages .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/suppress_specific_warnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suppress warnings that match one or more regular expressions — suppress_specific_warnings","text":"Possibly output x","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/target_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Target Columns for Data Frames — target_columns","title":"Get Target Columns for Data Frames — target_columns","text":"collection internal utility functions retrieve required column names Routes, BirdFlowRoutes, BirdFlowIntervals objects. functions ensure consistency data frame structures across different processing steps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/target_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Target Columns for Data Frames — target_columns","text":"","code":"get_target_columns_Routes(type = \"input\")  get_target_columns_BirdFlowRoutes(type = \"input\")  get_target_columns_BirdFlowIntervals(type = \"input\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/target_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Target Columns for Data Frames — target_columns","text":"type character string specifying context columns. Either 'input' (default) required input columns 'output' columns expected processing.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/target_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Target Columns for Data Frames — target_columns","text":"character vector containing expected column names.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/target_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Target Columns for Data Frames — target_columns","text":"functions return expected column names Routes, BirdFlowRoutes BirdFlowIntervals data classes. Columns may vary depending whether context input output processing: Input Columns: Columns required validation initial data ingestion. Output Columns: Columns expected processing transformation.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/target_columns.html","id":"functions-included-","dir":"Reference","previous_headings":"","what":"Functions Included:","title":"Get Target Columns for Data Frames — target_columns","text":"get_target_columns_Routes(): Returns column names Routes objects. get_target_columns_BirdFlowRoutes(): Returns column names BirdFlowRoutes objects. get_target_columns_BirdFlowIntervals(): Returns column names BirdFlowIntervals objects.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":null,"dir":"Reference","previous_headings":"","what":"convert a marginal into a transition matrix — transition_from_marginal","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"internal function generate transition matrix marginal","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"","code":"transition_from_marginal(m, direction)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"m marginal direction desired transition direction, either \"forward\" \"backward\"","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"transition matrix formulated multiply matrix distribution project distribution.  See get_transition() details.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"called get_transition(). point decide store transitions rather marginals also called import_birdflow().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate the timespan of a BirdFlow model — truncate_birdflow","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"truncate_birdflow() Eliminates marginals /transitions BirdFlow model adjusts aspects model covers part year.  intent reduce object size processing time part year interest.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"","code":"truncate_birdflow(bf, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"bf BirdFlow object. ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"BirdFlow model contains information transitions subset year specified ....","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"model timesteps always numbered 1 n_timesteps() likely consistent weeks year truncated model. Currently possible truncate fitted model model produced preprocess_species() yet create way export preprocessed model truncating (independently preprocess_species()) truncate preprocessing. currently utility limited reducing size fitted models. possible truncate model year boundary routes generated model plot correctly recommended; see issue #120.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ts_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to determine timestep sequence direction and whether it crosses year boundary — ts_info","title":"Internal function to determine timestep sequence direction and whether it crosses year boundary — ts_info","text":"assumes lags adjacent steps cross year boundary either -1 1.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ts_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to determine timestep sequence direction and whether it crosses year boundary — ts_info","text":"","code":"ts_info(ts)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ts_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to determine timestep sequence direction and whether it crosses year boundary — ts_info","text":"ts sequence timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ts_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to determine timestep sequence direction and whether it crosses year boundary — ts_info","text":"list : direction Either \"forward\" \"backward\". loops TRUE sequence crosses year boundary, FALSE .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to validate a BirdFlow object — validate_BirdFlow","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"Throw error BirdFlow object malformed incomplete.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"","code":"validate_BirdFlow(x, error = TRUE, allow_incomplete = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"x BirdFlow object. error TRUE throw error problems FALSE return problems data.frame. allow_incomplete TRUE allow BirdFlow object missing marginals transitions (components). allows checking output preprocess_species().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"error = FALSE function returns data.frame describing errors columns: problem character description problems. type problem type, either \"error\" \"incomplete.\" Otherwise, problems similar data.frame rows returned invisibly.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"preprocess_species() creates BirdFlow object lacks marginals transitions thus used make projections. validate_BirdFlow() tags absence type \"incomplete\". missing malformed components tagged \"error\". Since marginals can used calculate distributions transition matrices, BirdFlow object can complete marginals; transitions distributions. redundancy three considered error. Currently metadata species information checked completeness. Currently dead end transitions permitted.  See find_dead_ends() checking .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate geom component of a BirdFlow or related object — validate_geom","title":"Validate geom component of a BirdFlow or related object — validate_geom","text":"called validate_BirdFlow, well route interval validation functions","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate geom component of a BirdFlow or related object — validate_geom","text":"","code":"validate_geom(geom, n_active, throw_error = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate geom component of a BirdFlow or related object — validate_geom","text":"geom geom list n_active number active cells model see n_active() also stored bf$metadat$n_active throw_error TRUE throw errors found. false return problem data frame. throw_error = FALSE compatibility validate_BirdFlow","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate geom component of a BirdFlow or related object — validate_geom","text":"problem data frame","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/weight_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign weights to points based on how close they are to the great circle line associated with each transition — weight_between","title":"Assign weights to points based on how close they are to the great circle line associated with each transition — weight_between","text":"internal function used create betweenness weights array dimensions n_active(bf), n_active(bf), length(points). first two dimensions represent cells possible connections  pairs locations within BirdFlow model n_active() elements. third dimension represents reference points might connection. Cell values weight use adding transition probabilities reference point flux.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/weight_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign weights to points based on how close they are to the great circle line associated with each transition — weight_between","text":"","code":"weight_between(   bf,   weight_fun = NULL,   points = NULL,   radius = NULL,   n_directions = 1,   skip_unconnected = TRUE,   batch_size = 1e+05,   ... )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/weight_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign weights to points based on how close they are to the great circle line associated with each transition — weight_between","text":"bf BirdFlow model points points evaluate betweenness . NULL cell centers raster cells within BirdFlow model active cells model used. calculated comparing cell centers buffered convex hull around active cell centers. radius probability density along transect perpendicular line intersecting point summed interval within radius meters point. radius defaults half cell size (mean(res(bf))/2). n_directions number (equally spaced) directional bins classify bearings .  Currently 1 supported. skip_unconnected TRUE connections exist bf evaluated, matrix erroneously indicate weights associated transitions used always 0. resulting array can still used model built missing connections always zero probability. batch_size controls number movement lines processed time. smaller batch_size conserve memory slight performance cost.  number batches less equal n_active(bf)^2 / batch_size.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/weight_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign weights to points based on how close they are to the great circle line associated with each transition — weight_between","text":"list : array dimensions representing \"\" location, \"\" location, points. Cells weights non-zero radius around point intersects 1.96 standard deviations normal distribution probabilities around great circle line. points data,frame points define third dimension .  identical input points NULL. Otherwise data frame columns x, y, corresponding third dimension . NA points within mask fall active cells. radius radius circle meters.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/weight_between.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign weights to points based on how close they are to the great circle line associated with each transition — weight_between","text":"points  NULL default center cells within BirdFlow extent fall active cells. includes cell centers within convex hull (spherical coordinates) around active cells bf thus almost always just active cells. weight_between() is_between() differ slightly results calculated model. 1, number included reference points may differ. 2. betweenness array real weights 0 1 weight_between() logical is_between()","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109074","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9074","title":"BirdFlowR 0.1.0.9074","text":"2025-05-13 Update compatabality ebirdst 3.2023.0, released 2025-05-07. BirdFlowR work either 2022 2023 versions package. BirdFlow models retain species metadata distributions trained don’t rely version ebirdst installed make predictions routes. distribution data species metadata changed new release different. dates defining seasons species changed lot well.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"changes-to-birdflowr-0-1-0-9074","dir":"Changelog","previous_headings":"","what":"Changes to BirdFlowR","title":"BirdFlowR 0.1.0.9074","text":"Update lookup_species_metadata() works 3.2023.0 well 3.2022.x. returned metadata change two versions though, (model release date etc.), metadata items names stay BirdFlow models. New internal function ebirdst_version_supported() reports whether ebirdst version supported different components BirdFlowR optionally throws error aren’t. now called preprocess_species() lookup_species_metadata(). mainly convience maintaining package. Testing routes intervals now uses full species object reference BirdFlow model. means tests aren’t calling lookup_species_metadata() agnostic ebirdst version. NA values $metadata now converted empty string prior writing hdf5 export_birdflow() empty string converted back NA reading import_birdflow(). approach used species information long time now required metadata access_end_date longer defined ebirdst NA models trained 3.2023.0. Cleaned Notes generated checking package.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"changes-in-ebirdst-0-1-0-9074","dir":"Changelog","previous_headings":"","what":"Changes in eBirdst","title":"BirdFlowR 0.1.0.9074","text":"complete list changes encountered updating package. ebirdst::ebirdst_version() now uses status_version_year place old version_year drops access_end_date. metadata items retained BirdFlow still uses version_year pulls updated name. access_end_date still BirdFlow metadata NA new version ebirdst. Related ebirdst::ebirdst_runs new columns including \"status_version_year\" currently every model value of2003 table suggest future updates might different version years different species. preprocess_species() pull version year runs table happens. amewoo season dates changed substantially. ’m sure widespread date changes . release notes ebirdst say “Northern Goshawk species code incorrect” heads using model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109073","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9073","title":"BirdFlowR 0.1.0.9073","text":"2025-05-09 Routes() now works species eBird quality assessment low. Previously applied default quality checks used preprocess_species().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109072","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9072","title":"BirdFlowR 0.1.0.9072","text":"2025-04-28 Add timeout argument load_model() set default 10 minutes. Previously R’s global timeout option used defaults 1 minute. fix timeout issue users experienced load_model().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109071","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9071","title":"BirdFlowR 0.1.0.9071","text":"2025-04-16 * Add dmi_to_i() i_to_dmi() convert standard location indices () dynamic mask indices (dmi).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109070","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9070","title":"BirdFlowR 0.1.0.9070","text":"2025-04-16 update defines several classes storing real synthetic movement data functions work classes.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"new-classes-0-1-0-9070","dir":"Changelog","previous_headings":"","what":"New Classes","title":"BirdFlowR 0.1.0.9070","text":"three important classes defined update. Routes contain full-precision information bird movements standard format.Routes objects can contain information multiple birds can mix route types, object can contain information single species species. BirdFlowRoutes contain either synthetic real bird movements align cell week centers BirdFlow model contain one observation per week bird. BirdFlowIntervals represent sampled intervals BirdFlowRoutes. row within object contain movement starting ending location time. start end time locations can. BirdFlowIntervals intended used evaluate performance Bird Flow model. Thus flow data ","code":"bird_data |>   Routes(species = species) |>     # Routes   as_BirdFlowRoutes(bf = bd) |>    # BirdFlowRoutes   as_BirdFlowIntervals(n = n) |>   # BirdFlowIntervals   calculate_interval_metrics()      # metrics"},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"new-public-functions-0-1-0-9070","dir":"Changelog","previous_headings":"","what":"New public functions","title":"BirdFlowR 0.1.0.9070","text":"Routes() creates Routes object bird movement data requires species name, data frame columns: route_id, date, lon, lat, route_type. as_BirdFlowRoutes() converts Routes BirdFlowRoutes. as_BirdFlowIntervals() samples BirdFlowRoutes make BirdFlowIntervals print() methods new classes. calculate_interval_metrics() calculates performance metrics BirdFlow model based movements BirdFlowInterals. prototype output format arguments may change.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"updated-functions-0-1-0-9070","dir":"Changelog","previous_headings":"","what":"Updated Functions","title":"BirdFlowR 0.1.0.9070","text":"route() now produces objects revised BirdFlowRoutes class. plot_routes() plot methods Routes BirdFlowRoutes use code updated work route classes. Note: adds new capability plotting bird tracking data plot_routes() previously wasn’t possible. Similarly animate_routes() now works Routes BirdFlowRoutes can also used real movement data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"breaking-changes-0-1-0-9070","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"BirdFlowR 0.1.0.9070","text":"route() now produces objects revised BirdFlowRoutes class. class based list object primary data within $data. Old route objects longer plot updated plot_routes() plot(). Anyone using plot_routes() plot data generated route() update objects. Use Routes() followed as_BirdFlowRoutes() convert data new classes. snap_to_birdflow() longer coerces date-time input dates aggregating, , input date-time output well. main","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109069","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9069","title":"BirdFlowR 0.1.0.9069","text":"2024-10-17 Add vignette calculating movement among polygons BirdFlow model. Drop Callaghan abundance data get_population(). Partners Flight data preferred, users encouraged get data directly .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109068","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9068","title":"BirdFlowR 0.1.0.9068","text":"2024-09-24 Move build_collection_index() BirdFlowPipeline","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109067","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9067","title":"BirdFlowR 0.1.0.9067","text":"2024-07-24","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"probabilistic-flux-0-1-0-9067","dir":"Changelog","previous_headings":"","what":"Probabilistic flux","title":"BirdFlowR 0.1.0.9067","text":"Note version adds machinery calculating probabilistic flux parameterization yet right likely need optimization run non-trivial models. Add weight_between() returns betweenness weights manner similar is_between(). Add calc_distance_weights(),calc_martern_variance() related helper functions support weight_between() Update calc_flux() argument weighted switches old binary betweenness linear paths new probabilistic flux weighted betweenness probability spreads middle transition path spreads longer paths. Add data-raw/martern_parameters.R helps visualize parameters functional forms affect weights.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109066","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9066","title":"BirdFlowR 0.1.0.9066","text":"2024-07-11 Add plot_loss() plot change total loss three loss components fitting. relies metadata added HDF5 file BirdFlowPy.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109065","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9065","title":"BirdFlowR 0.1.0.9065","text":"2024-06-14 Add trim_quantile argument preprocess_species() process_rasters() allow trimming values quantile values quantile’s value. E.g. trim_quantile = 0.99 value 99th percentile trimmed value 99th percentile. motivation trim high outliers believed artifacts S&T models eBird data. Robins good example. Closes #198 “Outliers”.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109064","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9064","title":"BirdFlowR 0.1.0.9064","text":"2024-06-14 Fix #191 Date lookup now works seasons start end day.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109063","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9063","title":"BirdFlowR 0.1.0.9063","text":"2024-06-12 Fix #168 – allow NA species date fields Magnificent Frigate bird. Replace NA $species empty string writing HDF5 export_birdflow() Replace empty string NA reading $species items import_birdflow(). Throw meaningful error within lookup_season_timesteps() required date bf$species NA. affects lots functions allow specifying date ranges season =. includes predict(), route(), lookup_timestep_sequence(), truncate_birdflow().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109062","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9062","title":"BirdFlowR 0.1.0.9062","text":"2024-06-07 Updated code coverage github action attempt fix broken upload codecov.io despite coverage action running generating coverage data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109061","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9061","title":"BirdFlowR 0.1.0.9061","text":"2024-06-05 Add suppress_specific_warnings() internal function. Update plot_distr(), plot_route(), plot_flux() work BirdFlow models extent overlap coast. bcrfin, Brown-capped Rosy-Finch one example. Add transform argument plot_flux() plot_distr() allow log (\"log\") square route (\"sqrt\") transformations prior applying color scale. allow differentiating smaller differences better. think square route transformation might way go.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109060","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9060","title":"BirdFlowR 0.1.0.9060","text":"2024-05-15 Update preprocess_species() crs argument accepts objects class crs produced [sf::st_crs()]. Fix bug preprocess_species() prevented clipping irregular polygons.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109059","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9059","title":"BirdFlowR 0.1.0.9059","text":"2024-05-15 Added callaghan_abundance dataset species populations. Added get_population() function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109058","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9058","title":"BirdFlowR 0.1.0.9058","text":"2024-05-07 Fixed bug prevented knitting example collection index without passed parameters.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109057","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9057","title":"BirdFlowR 0.1.0.9057","text":"2024-04-17 import_birdflow() now works preprocessed hdf5 files. See #177 bf$geom$ext now unnamed vector objects either function. Previously one named vector. ext(bf) return object unchanged. distr, dynamic_mask, uci, lci now always NULL rownames \"t<timestep>\" column names, names two dimensions \"\" \"time\". import_birdflow() longer drops two metadata items losing : ebirdst_version birdflowr_preprocess_version exist old .hdf5 files old .rds files. compare_lists() (internal helper) return format changed slightly. import_birdflow() export_birdflow() now work sparse models. Marginals models converted standard matrices writing benefits sparsification lost writing hdf5 files - compression probably mitigate somewhat. Sparse Matrices re-created sparse models re-imported.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109056","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9056","title":"BirdFlowR 0.1.0.9056","text":"2024-04-04","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"flux-iii-0-1-0-9056","dir":"Changelog","previous_headings":"","what":"Flux III","title":"BirdFlowR 0.1.0.9056","text":"is_between() now uses SparseArray::SparseArray() logical array. reduce memory usage Labeling updates plot_flux() animate_flux().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109055","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9055","title":"BirdFlowR 0.1.0.9055","text":"2024-03-29","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"flux-ii-0-1-0-9055","dir":"Changelog","previous_headings":"","what":"Flux II","title":"BirdFlowR 0.1.0.9055","text":"Flux values now divided radius standardize units P/km/week/ P proportion population. Add tests calc_flux() is_between() Add analysis flux radius parameter’s affect flux values. ’s \"test-calc_flux.R\". Add limit radius argument calc_flux() ability bypass check_radius argument. Modified is_between() calculate result transitions non-zero (timestep) bf. provides slight performance benefit standard models large one sparse models. is_betweeen() now processes connection lines batches, controlled batch_size argument calc_flux(). memory management.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"flux-i-0-1-0-9054","dir":"Changelog","previous_headings":"","what":"Flux I","title":"BirdFlowR 0.1.0.9054","text":"Non-directional , additional changes pending","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"changes-0-1-0-9054","dir":"Changelog","previous_headings":"Flux I","what":"Changes","title":"BirdFlowR 0.1.0.9054","text":"first argument lookup_date() now x instead timestep timestep added deprecated third argument old usage work. lookup_dates() now works transition names (e.g. “T_01-02”) marginal names (“M_02-03”), character timesteps (“T1”, “T2”), , , numeric timesteps. Marginal transition dates midpoint two timesteps, falls squarely two dates left base::mean.Date() resolve , rounding . Add internal function is_between() determines set points great circles connecting every possible pair active cells BirdFlow model. used calculate flux. Currently non-directional. Add get_marginal() Add calc_flux(), plot_flux(), animate_flux() currently calculate work non-directional flux / net movement.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"pending-flux-changes-0-1-0-9054","dir":"Changelog","previous_headings":"Flux I","what":"Pending flux changes","title":"BirdFlowR 0.1.0.9054","text":"Test is_between() Test calc_flux() Test get_marginal() Test plot_flux() animate_flux() Normalize? See Dan’s comment issue. Directional is_between() Directional calc_flux()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109053","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9053","title":"BirdFlowR 0.1.0.9053","text":"2024-03-15 New shrink_birdlfow() reverses extend_birdflow(), returning model ’s original extent. extend_birdflow()now can “extend” BirdFlow models smaller extents already extended new extent still larger original.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109052","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9052","title":"BirdFlowR 0.1.0.9052","text":"2024-03-14 export_birdflow() gets new arguments control output file names. Default values mimic old behavior.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109051","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9051","title":"BirdFlowR 0.1.0.9051","text":"2024-02-28 Add get_mask() Add extend_bird_flow() Add internal read_geom() Add internal extend_geom() Make export_birdflow() public function. Update import_birdflow() can re-import BirdFlow model. Previously viable workflow preprocess_birdflow(), fit model BirdFlowPy, thenimport_birdflow() (). wrote model .rda files. Now ’s possible save new hdf5 : export_birdflow() (hdf5) import import_birdflow(). Note, however, file structure re-exported hdf5 match output python, b/c first import R updates bunch data structures - instance renaming marginals adding marginal index, re-exported model retains updates. Thus, need modify import_birdflow() behave appropriately file structures.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109050","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9050","title":"BirdFlowR 0.1.0.9050","text":"2024-02-22 Add test preprocess_species() non-default CRS.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109049","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9049","title":"BirdFlowR 0.1.0.9049","text":"2024-01-11","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"drop-_clip-0-1-0-9049","dir":"Changelog","previous_headings":"","what":"Drop “_clip”","title":"BirdFlowR 0.1.0.9049","text":"Drop “_clip” name clipping preprocess_species() See issue #165, note haven’t added extra metadata item yet.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"zero-abundance-for-some-timesteps-0-1-0-9049","dir":"Changelog","previous_headings":"","what":"Zero abundance for some timesteps","title":"BirdFlowR 0.1.0.9049","text":"validate_birdflow() thus also preprocess_species() now throw errors distribution doesn’t sum 1 dynamic mask excludes cells timestep. addresses problem discovered attempting fit models species: “antnig” (Antillean Nighthawk) timesteps abundance grids status trends zero. Prior change possible preprocess Antillean Nighthawk fitting BirdFlowPy confusing errors thrown. change can observed : {r} preprocess_species(\"antnig\", res = 150, hdf5 = FALSE,                      skip_quality_checks = TRUE)`","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109048","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9048","title":"BirdFlowR 0.1.0.9048","text":"2023-12-22 Now works date column names “date” Consistently re-formats dates lubridate::as_date() standardizes return date column “date” now handles empty data frame input gracefully returning empty data frame appropriate column names classes. Fix export_rasters() bugs exporting TIFF files (combinations arguments)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109047","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9047","title":"BirdFlowR 0.1.0.9047","text":"2023-12-22 Fix snap_to_birdflow() now works preprocessed (fit) models.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109046","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9046","title":"BirdFlowR 0.1.0.9046","text":"2023-12-21 New functions: snap_to_birdflow() snap movement data BirdFlow model week cells optionally aggregate data week (unique bird track). lookup_date() convert timesteps dates. Changes lookup_timestep() gains new argument allow_failure. FALSE, default mimics prior behavior. Set TRUE return NA date looked .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109045","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9045","title":"BirdFlowR 0.1.0.9045","text":"2023-12-18 New function combine_transitions() combines transition matrices series timesteps single transition matrix encodes transition probabilities starting ending timesteps single multi-week transition matrix. New BirdFlowExtras package uses combine_transitions() calculate migratory connectivity. package hold esoteric uses BirdFlow models, functions rely packages either CRAN Bioconductor.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109044","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9044","title":"BirdFlowR 0.1.0.9044","text":"2023-12-16 test tweaking - changes invisible users. Sped tests, mostly using truncated models slow tests. local_quiet() - Sets verbose FALSE within test scope local_test_dir() - Creates temporary directory deleted automatically test completion. Eliminated almost messages output testing improve test result legibility.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109043","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9043","title":"BirdFlowR 0.1.0.9043","text":"2023-12-15 tests cleaner message handling. Users unaffected, might see fewer messages birdflow_options(\"verbose\") TRUE. New test build_collection_index() New internal bf_msg() now used messages BirdFlowR functions. New internal bf_suppress_msg() wrap calls packages messages suppressed verbose false.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109042","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9042","title":"BirdFlowR 0.1.0.9042","text":"2023-12-14 Updated sparsification work dynamically masked models Added new parameter p_protected sparsify(). used conditional sparsification specify proportion transitions every location won’t zeroed . Added tests sparsify() related functions. Added n_states statistic distribution_performance() thus also $metadata$sparse$stats reports total number non-zero values marginal derived distributions time steps model. number states (locations time space) birds can occupy model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109041","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9041","title":"BirdFlowR 0.1.0.9041","text":"2023-12-12 Dropped ability import pre-dynamic-mask models. announced 0.1.0.9040 done. Fix spelling minor documentation edits Fix bug n_parameters() fitted models. birdflow_options() now accepts list option names new values, well previously accepted argument forms. Improve validate_BirdFlowR() error reporting. Date lookup preprocessed fitted models. Closes #147. n_paramaters() load_model() load_collection_index() route_migration() marginal_stats(), calc_pct_zero(), sum_marginals() find_threshold() print() BirdFlow BirdFlowRoutes objects. cache_path() compare_geom() birdflow_options() build_transitions(), drop_transitions() preprocess_species() validate_BirdFlow()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109040","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9040","title":"BirdFlowR 0.1.0.9040","text":"2023-12-11","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"support-for-ebirdst-added-0-1-0-9040","dir":"Changelog","previous_headings":"","what":"Support for ebirdst 3.2022.0 added.","title":"BirdFlowR 0.1.0.9040","text":"BirdFlowR can now fit models based eBird 2022 data 2021 data preprocess using whichever version ebirdst loaded. types fitted models can used BirdFlowR. testing run either version ebirdst installed CRAN checks pass new version due references objects don’t exist old version.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"breaking-0-1-0-9040","dir":"Changelog","previous_headings":"","what":"Breaking","title":"BirdFlowR 0.1.0.9040","text":"get_dates() Models fit using ebirdst 2.2021 $dates columns: \"interval\", \"date\", \"midpoint\", \"start\", \"end\", \"doy\", \"week\". Models fit ebirdst 3.2022 $dates columns: \"timestep\", \"date\", \"label\", \"julian\", \"week\". Regardless $dates format model object get_dates() returns newer columns: \"timestep\", \"date\", \"label\", \"julian\", \"week\". Previously returned older columns. Users replace bf$dates get_dates() use new column names. Inconsistent weeks. eBird changed way dates assigned weeks 2022 version. See notes get_dates() details. BirdFlowR honors date scheme used eBird data model built thus dates assigned different week 2021 model 2022 model affect lookup_timestep(), lookup_timestep_sequence(), many functions rely . Importing (old) BirdFlow models fit without dynamic mask longer supported. Predicting . Use BirdFlowR 0.1.0.39 want import old hdf5 file saved saveRDS(). Dynamic masks added 0.1.0.9001 (April 2023) models fit (imported) affected.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"new-0-1-0-9040","dir":"Changelog","previous_headings":"","what":"New","title":"BirdFlowR 0.1.0.9040","text":"preprocess_species() works ebirdst 3.2022.0 2.2021.3. use whichever version loaded models fit either eBird version year can used BirdFlow. New metadata items birdflowr_preprocess_version: version BirdFlowR used preprocessing. ebirdst_version: ebirdst version used preprocessing.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"updates-0-1-0-9040","dir":"Changelog","previous_headings":"","what":"Updates","title":"BirdFlowR 0.1.0.9040","text":"number internal changes made preprocess_species() work ebirdst v. 3.2022 species can set either \"example_date\" \"yeseb-example\" triggering using ebirdst example data. BirdFlowR silently switch two accommodate ebirdst. ebirdst version >= 3.2022 quality species model checked using <x>_season_quality values instead dropped <x>_range_modeled information error thrown value less new min_season_quality argument defaults 3. ebirdst 2.2021 quality still checked <x>_range_modeled. ebirdst >= 3.2022 new trends columns dropped ebirdst_runs creating species data. data available via species_info() ($species) unchanged. new dates format now used 2022 models. Date lookup code overhauled throughout package. use $dates dropped favor get_dates() handle two date formats use. preprocess_species() snapshot tests updated use eBird 2022 derived snapshots skipped older versions ebirdst loaded, preprocess_species() tests still run. Several internal functions documented ebirdst-compatibility help insulate BirdFlowR changes ebirdst API facilitate working versions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109039","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9039","title":"BirdFlowR 0.1.0.9039","text":"2023-11-21 Updated tests work new example data ebirdst 3.2022.0 Updated tests new amewoo model BirdFlowModels (R package) v. 0.0.2.9002 Added formal dependency BirdFlowModels >= 0.0.2.9002. Updates pass CRAN checks preprocess ebirdst 3.2022.0 * Added ebird/ebirdst remotes (force installing development version). Revert changes ebirdst 47bbdfc87 CRAN * Add skip_if_unsupported_ebirdst_version() preprocess species tests currently ebirdst 3.2022.0. * Add copy ebirdst_weeks BirdFlowR internal data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109038","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9038","title":"BirdFlowR 0.1.0.9038","text":"2023-11-16 Trying pass CI checks still using ebirdst 2.2021 Added version dependency <= 2.2021.3 ebirdst (imports) avoid version 3.2022 BirdFlowR updated significant changes ebirdst Removed call ebirdst::abundance_palette() replaced resulting values. ebirdst imports. also dodges dealing function name change v. 3.2022.0. Dropped code dealt older version $dates.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109037","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9037","title":"BirdFlowR 0.1.0.9037","text":"2023-11-14 Checked spelling package documentation vignettes. Added inst\\WORDLIST (extending dictionary valid words). check package spelling use devtools::spell_check() Added section spelling ./.github/CONTRIBUTING.html export_tif() renamed export_rasters() extended export PNG well GeoTIFF files optionally convert small floating point numbers larger integers export integer datatypes. Unit tests added.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109036","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9036","title":"BirdFlowR 0.1.0.9036","text":"2023-11-14 Documentation editing.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109035","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9035","title":"BirdFlowR 0.1.0.9035","text":"2023-11-01 Existing code affected way update. New functionexport_tif() facilitates exporting TIFF files BirdFlow model’s distributions dynamic masks. used replace functionality used preprocess_species(), motivation adding use Avian Flu modeling. New function pad_timestep() converts numeric timestep character padded leading zeros appropriate. Given 1 returns \"01\". now used internally anywhere timestep marginal names padded. ’s also used export_tif() file naming exporting single band TIFF files.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109034","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9034","title":"BirdFlowR 0.1.0.9034","text":"2023-10-17 preprocess_species now adds week column $dates component BirdFlow objects. Initially identical interval column. However, truncation intervals renumbered 1:n_active() weeks always reference week year. Closes #132. linted package - fixed issues flagged lintr::lint_package()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109033","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9033","title":"BirdFlowR 0.1.0.9033","text":"2023-10-10 Minor update build_collection_index() works regardless whether BirdFlowR loaded devtools::load_all() library(BirdFlowR).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109032","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9032","title":"BirdFlowR 0.1.0.9032","text":"2023-09-20 Old \"time\" now \"label\" ordered factor derived column names distribution often always dates. Old \"density\" now \"value\". plot_distr() animate_distr()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109031","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9031","title":"BirdFlowR 0.1.0.9031","text":"2023-09-08 New function as_distr() converts raster (terra::SpatRaster) point (sf::sfor data frames) data distributions. Rasters projected cells align BirdFlow object’s cells cropped masked. default settings resulting values normalized sum 1 NA values replaced 0. Points converted distribution point density placed cell corresponding point. Projection sf SpatRasters done automatically. Data dataframes assumed match coordinate reference system (CRS) BirdFlow object unless crs argument used define CRS. Addresses #116. bug fix xy_to_latlon() caused fail y omitted.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109030","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9030","title":"BirdFlowR 0.1.0.9030","text":"2023-07-27","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"preprocess_species-0-1-0-9030","dir":"Changelog","previous_headings":"","what":"preprocess_species()","title":"BirdFlowR 0.1.0.9030","text":"update major overhaul preprocess_species() two primary goals. Adding support preprocessing truncated models - models cover part year. Cleaning simplifying code dropping outdated parameters breaking function several functions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"dropped-arguments-breaking-change-0-1-0-9030","dir":"Changelog","previous_headings":"preprocess_species()","what":"Dropped arguments Breaking change","title":"BirdFlowR 0.1.0.9030","text":"tiff - Prior default FALSE now always used TIFF export abundance data longer option. treat_na_as_zero prior default TRUE now always used. dummy_dynamic_mask prior default FALSE now always used. three little anachronistic. TIFF output original used place including abundance data hdf5. two arguments added updates allow simulating older behavior testing update, cases ’ve decided like newer behavior. Although breaking changes previously supported arguments dropped, new behavior mimics old default behavior expect cases values set differently default. Note: Although TIFF output abundances longer directly supported preprocess species model’s abundance can exported TIFF :","code":"r <- rast(bf) terra::writeRaster(r, \"abundance.tif\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"refactoring-0-1-0-9030","dir":"Changelog","previous_headings":"preprocess_species()","what":"Refactoring","title":"BirdFlowR 0.1.0.9030","text":"shouldn’t effect users. preprocess_species() broken four functions. three new functions internal helper functions. : determine_resolution() surprisingly tricky work figuring resolution yields desired number fitted parameters model. process_rasters() generates resampled aggregated rasters used model eBird S&T rasters. export_birdflow() exports BirdFlow model hdf5 (optionally .Rds)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"truncation-new-0-1-0-9030","dir":"Changelog","previous_headings":"preprocess_species()","what":"Truncation New","title":"BirdFlowR 0.1.0.9030","text":"preprocess_species() gains ... argument used determine model truncation, combination parameters supported lookup_timestep_sequence() works (e.g. season = prebreeding start = 5, end = 10). result non-cyclical preprocessed mode covers transitions given time period. Truncation affect resolution determination - resolution selected full model meets desired number parameters GPU RAM. means resolution isn’t dependent truncation - facilitating possible later stitching back together several truncated models species.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109029","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9029","title":"BirdFlowR 0.1.0.9029","text":"2023-07-25 Minor edits vignettes collection index.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109028","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9028","title":"BirdFlowR 0.1.0.9028","text":"2023-07-18 Added BirdFlowOverview vignette @dsheldon. Minor updates BirdFlowR vignette.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109027","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9027","title":"BirdFlowR 0.1.0.9027","text":"2023-07-17 Added size column collection index. Made model download explicitly binary (windows). load_model() related functions now work without trailing slash collection URL. build_collection_url() re-uses metadata .Rds file hasn’t changed thus retains release date.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109026","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9026","title":"BirdFlowR 0.1.0.9026","text":"2023-07-14 Fixed bug ‘make_cache_readme()’","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109025","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9025","title":"BirdFlowR 0.1.0.9025","text":"2023-07-11 Added support model collections New Functions: load_model() User facing function load model cache - downloading first necessary. build_collection_index() Run directory model files add index files convert directory collection. cache_path() helper function. Returns path (local) cache directory model files saved. specific collection url. make_cache_readme() helper function make readme files collection specific cache directory ’s parent BirdFlowR cache directory. writes date last cache update well run anytime new files saved cache. Updated: collection_url: base url collection. cache: URL BirdFlowR cache directory holds collection specific cache directories.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109024","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9024","title":"BirdFlowR 0.1.0.9024","text":"2023-07-03 update focused allowing partial year models (#39). bulk work required goal done, however, integrated preprocess_species(), practice ’s useful yet. ’ve also split internal code additional helper functions makes package code little cleaner doesn’t affect users. one change might affect users ability subset fitted model date range truncate_birdflow(). New function truncate_birdflow() truncates dates BirdFlow model covers. works fitted preprocessed models, yet integrated preprocessing, logistically currently useful fitted models. New function as_transitions() converts ordered sequence timesteps names transitions connect . Used predict(), route(), lookup_transitions(), truncate_birdflow() New public,get_dates() returns $dates component BirdFlow object, replacing old private function longer used. Fixes #121. New metadata item timestep_padding tracks much timesteps padded transition marginal names. preprocess_species() new_BirdFlow() updated produce . New internal function get_timestep_padding() retrieves , older models figures model structure. New internal function make_marginal_index() derived code previously import_birdflow() used import_birdflow() truncate_birdflow() New internal function ts_info() determines timestep sequence forward backwards whether crosses year boundary.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109023","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9023","title":"BirdFlowR 0.1.0.9023","text":"2023-06-20","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"overview-0-1-0-9023","dir":"Changelog","previous_headings":"","what":"Overview","title":"BirdFlowR 0.1.0.9023","text":"update shouldn’t break anything change default behaviors functions: 1. preprocess_species() Models preprocessed update different older models. lookup_timestep_sequence() now allows looking cyclical sequence represents full year transitions season = returns one timestep used c(1:52, 1)). code distribution_performance() unchanged default behavior affected change lookup_timestep_sequence(). now includes transition last first timesteps calculations default time arguments.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"details-0-1-0-9023","dir":"Changelog","previous_headings":"","what":"Details","title":"BirdFlowR 0.1.0.9023","text":"Fixed bug preprocess_species() caused sometimes create BirdFlow models pixels didn’t align origin. ’s nothing wrong previous behavior modeling standpoint always aligning origin logistical benefits original intent. Fixed bug reformat_distribution_labels() 3 dimensional input erroneously change second dimension name \"time\". caused predict() produce confusing dimension labels called multiple distributions . lookup_timestep_sequence() now allows full cycle sequence returns full cycle sequences season = \"\". means including timesteps repeating first timestep. also allows setting start end timestep well (loop whole year). change results distr_performance() whole year models. preprocess_species() gains new argument default behavior. now replaces NA values distributions zero prior transforming changing resolution, uses bilinear interpolation place nearest neighbor. Set treat_na_as_zero FALSE old behavior. new way seems better though. See detailed explanation Issue #12.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109022","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9022","title":"BirdFlowR 0.1.0.9022","text":"2023-06-15","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"overview-0-1-0-9022","dir":"Changelog","previous_headings":"","what":"Overview","title":"BirdFlowR 0.1.0.9022","text":"update merges route_migration() route() can now everything either functions previously least one thing couldn’t (#88). returned object route() also changed: $lines dropped $points now returned new S3 class BirdFlowRoutes. plot_routes() don’t think returning lines useful . lines can recreated sf:st_as_sf(rts). closes #103 #88 Details follow.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"breaking-changes-to-route-0-1-0-9022","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES to route()","title":"BirdFlowR 0.1.0.9022","text":"Dropped row col arguments. x_coord y_coord sufficient think preferred users. Renamed n_each argument n. Renamed x argument bf. Changed order arguments. Added from_marginals = TRUE argument controls distributions used sampling starting locations; expect users use argument. Specifying starting locations (via x_coord y_coord) now optional. arguments NULL (default) n starting positions sampled species distribution starting timestep. sampling previously done route_migration(). route() now returns aBirdFlowRoutes object, extension data frame almost always behaves like data frame. $lines component previously returned list dropped, modified version $points returned. Use new st_as_sf() method theBirdFlowRoutes object produce sf lines. old points$route column renamedroute_id Experimental returned BirdFlowRoutes object attributes contain much ancillary data parent BirdFlow object: geom, species, metadata, dates. Additionally, new item added metadata: route_type = \"synthetic\". may useful also create BirdFlowRoute objects tracking data. want insulate experimental aspects call .data.frame() returned routes.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"non-breaking-changes-0-1-0-9022","dir":"Changelog","previous_headings":"","what":"Non-breaking changes","title":"BirdFlowR 0.1.0.9022","text":"Edits vignettes readme. route_migration() deprecated. arguments unchanged work now throws warning. Please transition using route() season argument. returned object changed - see changes route() . new method st_as_sf() convert BirdFlowRoutes objects sf objects either points lines. Use st_as_sf(rts) lines st_as_sf(rts, type = \"point\") convert sf points object. New plot() method BirdFlowRoutes objects dispatches plot_routes(). Experimental: plot_route() plot(BirdFlowRoutes) now require BirdFlow object - long attributes added route() present. bf argument used supersedes route attributes including make code less likely break change BirdFlowRoutes class. kind nice though: route(bf, 5, season = \"prebreeding\") |> plot() new print method BirdFlowRoutes mostly hide attributes printing - also new header line states species object . plot_routes() gains additional arguments control line widths dot sizing. animate_routes() access via ....","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"a-note-about-the-new-birdflowroutes-class-0-1-0-9022","dir":"Changelog","previous_headings":"","what":"A note about the new BirdFlowRoutes class.","title":"BirdFlowR 0.1.0.9022","text":"class much work progress. ’s stand. ’m committed route() returning data frame like object contains data formerly inrts$points think columns fairly stable point. ’m fairly committed making S3 “BirdFlowRoutes” object , minimum, including CRS somewhere attributes. ’m less committed including additional attributes. @slager working making BirdFlowRoutes like objects tracking data hope together can figure data object look like. Right now extra information class used three places: plot_routes() related plot(BirdFlowRoutes) st_as_sf(BirdFlowRoutes) print(BirdFlowRoutes) ways behave like data frame. data frame manipulations preserve attributes class. Many result standard data.frame.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109021","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9021","title":"BirdFlowR 0.1.0.9021","text":"Added logo","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109020","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9020","title":"BirdFlowR 0.1.0.9020","text":"update fixes bugs cleans things . shouldn’t break existing code. Fixed bug distribution_performance() caused error metrics = \"md_traverse_cor\" added tests. Removed tests/testthat/Rplots.pdf version control added .gitignore. Added gifski imports, moved rnaturalearthdata suggests imports. make installation smoother prevent gganimate::animate writing lots image files working directory. Closes #102. interval_log_likelihood() now returns zero row data.frame intervals observations zero rows. Care taken return column names data types returned data. Previously zero row input resulted unhelpful error. Closes #95.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109019","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9019","title":"BirdFlowR 0.1.0.9019","text":"2023-06-07","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"breaking-changes-to-timestep-sequence-arguments-0-1-0-9019","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES to timestep sequence arguments","title":"BirdFlowR 0.1.0.9019","text":"lookup_timestep_sequence() gains new season parameter second argument. Previously season specified via start confusing, especially called via ... functions. lookup_timestep_sequence() n argument renamed n_steps. functions allow specifying sequence timesteps (date range) now use ... passed lookup_timestep_sequence() . Previously predict() route() explicit arguments passed individually lookup_timestep_sequence() Affected functions impacts calls functions pass arguments lookup_timestep_sequence(): lookup_timestep_sequence() (directly) lookup_transitions() predict() route() distribution_performance() animate_movement_vectors() Broken usage Code passed season names explicitly start broken: lookup_timestep_sequence(bf, start = \"prebreeding\") . Code relied position start end pass dates timesteps also fail: lookup_timestep_sequence(bf, 1, 5). Use n argument, need updated n_steps Unaffected usage Passing dates timesteps start end name unaffected: lookup_timestep_sequence(bf, start = 1, end = 5). Passing season position works changes: lookup_timestep_sequence(bf, \"prebreeding\") general rule going forward use argument names beyond first two arguments (x season). Default values Default values lookup_timestep_sequence() switched missing NULL - similar changes made preprocess_species() BirdFlowR 0.1.0.9009. shouldn’t affect users make setting arguments programmatically slightly easier. arguments BirdFlow object passed lookup_timestep_sequence() return timesteps. consistent change BirdFlowR 0.1.0.9017. default now inherited affected functions listed . affected functions change prior behavior throwing error time sequence specified. unlikely affect existing code.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109018","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9018","title":"BirdFlowR 0.1.0.9018","text":"2023-06-06 sample_distr() new argument format allows specifying distr, xy, latlon, (location index) output format. default distr mimics previous behavior. response comment issue #88, \"xy\" return format greatly simplifies calling route() sample distribution. BirdFlow vignette updated use sample_distr(format = \"xy\") use plot_routes(). Bug fixed xy_to_latlong() column order returned object backwards. Index conversion functions previously returned two column matrix now return two column data.frame: xy_to_latlon(), latlon_to_xy(), i_to_rc(), i_to_xy(). found often wanted refer columns name making data.frame format easier.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109017","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9017","title":"BirdFlowR 0.1.0.9017","text":"2023-06-05","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"revamping-performance-metrics-0-1-0-9017","dir":"Changelog","previous_headings":"","what":"Revamping performance metrics","title":"BirdFlowR 0.1.0.9017","text":"DEPRECATED evaluate_performance() now deprecated. Use distribution_performance() instead. traverse_coris replaced two similar metrics st_traverse_cor md_traverse_cor. first bug free version old traverse_cor(). second identical except makes predictions starting marginal rather status trends distribution. *_traverse_cor metrics now utilize dynamic mask filter cells used correlation calculation. ... arguments passed lookup_timestep_sequence() allow calculating metrics just part year. sparsify() (still isn’t updated dynamic masking) now uses distribution_performance() instead evaluate_performance(). lookup_transitions() (private function) now one formal argument (x) arguments now passed lookup_timestep_sequence() via ... arguments unchanged though calling shouldn’t change. lookup_timestep_sequence() now default value start = \"\" previously default. mostly make use functions via ... easier common default calling functions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109016","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9016","title":"BirdFlowR 0.1.0.9016","text":"2023-06-03 Edited Contributing guide preprocess_species() now throws better errors problems species argument (NA, NULL, unresolvable species names). Additional tests forpreprocess_species() error conditions test file output.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109015","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9015","title":"BirdFlowR 0.1.0.9015","text":"2023-06-02 * Added tests add_dynamic_mask() #101 * Added RMarkdown README. #104 * Now README.md file generated README.Rmd file (edit .Rmd) * Added example plots README. * Added contributing guide. #97","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109014","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9014","title":"BirdFlowR 0.1.0.9014","text":"2023-05-25 Works year boundary Color bar shows used date range. Additional arguments control appearance:use_seasonal_colors, pal, barheight Updated animate_routes() added … argument passed onto plot_routes() control appearance.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109013","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9013","title":"BirdFlowR 0.1.0.9013","text":"2023-05-22 New animate_routes() #93 Added dot stay = 1 segment end points visibly marked. Subtle changes code support animation. Updated documentation [route()] [route_migration()] full describe additional columns added 0.1.0.9012","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109012","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9012","title":"BirdFlowR 0.1.0.9012","text":"2023-05-17 Fixed bug route() route_migration() prevented routing year boundary. plot_routes() plotting routes ggplot2. compareGeom() methods BirdFlow objects, possibly mixed terra::SpatRaster objects. See terra::compareGeom() proportion_of_year() (internal function) converts date number 0 1. flatten_raster() supports multiple input formats #23 rasterize_distr() supports multiple output formats #23 route() route_migration() output return additional columns points item. expand_distr() now internal function. Users can use rasterize_distr( format = \"numeric\") instead.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109011","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9011","title":"BirdFlowR 0.1.0.9011","text":"2023-05-11 Minor change interval_log_likelihood() clearer code avoid warning tibbles used.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109010","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9010","title":"BirdFlowR 0.1.0.9010","text":"2023-05-09 Dockerfile: Bump rocker image R 4.3.0 error build package installation failure","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109009","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9009","title":"BirdFlowR 0.1.0.9009","text":"2023-05-09 preprocess_species() now defaults res parameter NULL, making easier script around preprocess_species() Tweaked tests better run across different development environments","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109008","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9008","title":"BirdFlowR 0.1.0.9008","text":"2023-05-09 import_birdflow() now converts logical hyperparameters masquerading factors logical. Addresses #81. Dropped legacy import functions: import_birdflow_v1() models predate R Package, import required first converting pickle file hdf5 importing TIFF file distributions. import_prototype() models includes prototype shiny app.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109007","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9007","title":"BirdFlowR 0.1.0.9007","text":"Fixed URL.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109006","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9006","title":"BirdFlowR 0.1.0.9006","text":"Cleaned bad formatting _pkgdown.yml.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109005","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9005","title":"BirdFlowR 0.1.0.9005","text":"Added argument n lookup_timestep_sequence(), alternative end, n indicates many transitions resulting sequence. route(), lookup_transitions(), predict(), animate_movement_vectors() gained either explicit n parameter access via .... Breaking change: pre-existing n parameter route() renamed n_each avoid conflict new n parameter passed lookup_timestep_sequence(). Closes #76.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109004","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9004","title":"BirdFlowR 0.1.0.9004","text":"Made changes support pkgdown. Added links .yml Added “BugReports” field DESCRIPTION file Added second link URL field DESCRIPTION file linking github repo Switched development mode .yml unreleased. auto wasn’t working version 0.0.1.x. first formal release switched back auto.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109003","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9003","title":"BirdFlowR 0.1.0.9003","text":"evaluate_performance() now exported. evaluate_performance() now uses dynamic mask calculating correlations (excluding masked cells). means bunch cells essentially forced zero sides correlation aren’t included calculation. Correlations get lower effect pronounced lower correlations.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"added-movement-vector-visualizations-0-1-0-9002","dir":"Changelog","previous_headings":"","what":"Added movement vector visualizations","title":"BirdFlowR 0.1.0.9002","text":"functions calculate visualize average movement cell BirdFlow model particular transition. New Functions calc_movement_vectors() returns data frame information average movement cell model given timestep. plot_movement_vectors() plots movement vectors directly BirdFlow model given timestep. Returns ggplot object. animate_movement_vectors() creates animation vectors series timesteps. Returns gganim object.","code":""},{"path":[]},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"summary-0-1-0-9001","dir":"Changelog","previous_headings":"Switch to Dynamic masking","what":"Summary","title":"BirdFlowR 0.1.0.9001","text":"Dynamic masking major overhaul package cells model acts change time limited cells non-zero value eBird S&T distributions. means marginal dimensions vary time, often square. intent isolate user changes. particular output input distribution objects still contain active cells public function arguments unchanged. Functions interact marginals now convert internally standard distributions covering active cells, dynamically masked distributions conform marginal dimensions. predict(), route(), import_birdflow() substantial updates. BirdFlow objects gained great circle distance dynamic mask, created preprocessing, variable marginals transitions dimensions. great circle distance used python dropped (python) fitted model, ’s fairly large easy recalculate great_circle_distances().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"detailed-changes-0-1-0-9001","dir":"Changelog","previous_headings":"Switch to Dynamic masking","what":"Detailed changes","title":"BirdFlowR 0.1.0.9001","text":"New /distances/ contains values distance matrix great circle distances km pair locations - converted vector non duplicated values shorten_distance_matrix() full matrix can recreated expand_distance_matrix() added export HDF5 preprocess_species() retained fitted models, distances can recreated great_circle_distances(). New /geom/dynamic_mask matrix row active cell model (see n_active()) column timestep. cells one one relationship cells `/distr’ TRUE cell included model timestep FALSE otherwise. /metadata/birdflow_version now 3. New /metdata/birdflowr_version stores package version preprocess_species() /called. New metadata/hyperparameters metadata/loss_values contain information generated python model fitting. get_dynamic_mask() similar get_distr() dynamic mask data. add_dynamic_mask() updates old BirdFlow object (R session) adding dynamic mask. mainly facilitate transition allow testing package old models. has_dynamic_mask() returns logical. import_birdflow_v3() internal function called import_birdflow() version 3 BirdFlow HDF5 files. great_circle_distances() creates great circle distance matrix encoding distance (km) every pair cells BirdFlow object. now works version 2 3 BirdFlow HDF5 files (added version 3, dropped version 1) reads dynamic mask reads metadata/hyperparameters read metadata/loss_values get_distr() from_marginals = TRUE now expand truncated distribution calculated marginal full distribution. predict() route() map full distributions, truncated distributions applying transition , expand back full output. validate_birdflow() now checks dimensions marginals transition matrices dynamic mask cell counts timestep. now calls great_circle_distances() shorten_distance_matrix()create “/distances” component HDF5 adds “geom/dynamic_mask” logical matrix indicating cells “/distr” non-zero timestep. updated heuristic set resolution based number parameters given dynamic masking. new argument dummy_dynamic_mask() adds dynamic mask TRUE force fitting prior style BirdFlow object. sparsify() updated work dynamic masks, now throw error telling try use BirdFlow object dynamic mask.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009075","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9075","title":"BirdFlowR 0.0.0.9075","text":"2023-04-18 Added BirdFlow methods generics defined sf * st_crs() returns object class crs used sf define coordinate reference systems (CRS). * st_bbox() returns object class bbox containing extent CRS BirdFlow object. Can passed st_as_sfc() convert polygon.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009074","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9074","title":"BirdFlowR 0.0.0.9074","text":"2023-04-13 get_naturalearth() related functions now default crop buffer transforming Natural Earth data returned object extent matches extent x. Whether cropping occurs now controlled keep_buffer defaults FALSE. Previously controlled match_extent.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009073","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9073","title":"BirdFlowR 0.0.0.9073","text":"2023-04-11 lookup_timestep() timestep lookup throughout package now consistent ebirdst::date_to_st_week() wasn’t previously true. dates near edges week breaks end classified different timestep previously. preprocess_species() now saves breakpoints ebirdst::ebirdst_weeks start end instead week_start week_end. lookup_timestep_sequence() workhorse function processing date range input functions. Generate forward backward sequences timesteps, dates, season name input, possibly season buffer. lookup_season_timesteps() narrowly focused helper, returns forward timestep sequences associated season possibly buffer (timesteps) beyond edge season. lookup_transitions() route() route_migration() predict() get_distr() Fixes bug #66 date lookup forward across year boundary failed. Addresses #68 providing function lookup timestep series based season names (adds buffer ability). Closes #56 time now processed mostly lookup_timestep() points time, lookup_timestep_sequence() date ranges. Point lookup now uses findInterval breaks derived ebirdst::ebirdst_weeks rather .min() difference center nominal day week. also make time lookup compatible partial year BirdFlow models.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009072","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9072","title":"BirdFlowR 0.0.0.9072","text":"2023-04-11 Fixed bug introduced ebirdst 2.2021.1 converted columns ebirdst_runs character. preprocess_species() now defensively forces columns () logical logical, numeric numeric.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009071","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9071","title":"BirdFlowR 0.0.0.9071","text":"2023-04-06 Added functions latlon_to_xy() xy_to_latlon() convert WGS84 (EPSG:4326) x y coordinates BirdFlow objects CRS. Fixes #64. CHANGED behavior bunch index conversion functions, previously, many threw errors NA input values range. now return NA situations. made sense context #61.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009070","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9070","title":"BirdFlowR 0.0.0.9070","text":"2023-04-06 Switching development version number scheme. now increment development version one every change main branch (merged pull request). Previously version issue number. Fixed #61 (added test). Now interval_log_likelihood() sets exclude not_active columns TRUE either involved observations entirely outside extent BirdFlow object. Previously locations outside extent resulted error.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009054","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9054","title":"BirdFlowR 0.0.0.9054","text":"2023-03-30 New interval_loglikelihood() calculates log likelihood banding tracking data given BirdFlow model. new supporting functions: drop_transitions() is_location_valid(), is_distr_valid() test whether locations distributions valid inputs predict() route() lookup_timestep()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009022","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9022","title":"BirdFlowR 0.0.0.9022","text":"2023-03-27 get_naturalearth() related functions now throw helpful warning extent empty, , , return empty sf object. get_naturalearth() improved, robust way processing vector data works specific projections. Currently used Mollweide (“moll”) Lambert Equal Area (“laea”) based CRSs. get_naturalearth() new argument match_extent set TRUE causes result clipped precise extent input object (x). Use TRUE plotting ggplot2 Natural Earth data doesn’t result expanded plot extent. default, FALSE appropriate base R plotting Natural Earth Data runs beyond edge plot regardless whether aspect ratio x matches plot window’s. get_naturalearth() new argument use_old_method , TRUE forces less robust method regardless projection. testing function left default uses.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009044","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9044","title":"BirdFlowR 0.0.0.9044","text":"new function build_transitions(x) populate x$transitions forward backwards transitions. recommended repeated forecast() predict calls avoids repeatedly making transitions fly. triple memory usage BirdFlow object probably done sparse BirdFlow models. currently work throws warning BirdFlow model sparse. previously transitions_from_marginal() produced standard matrix. Now, marginal sparse conversion uses preserves sparse matrix. Similarly, transition matrix sparse predict() route() calculate sparse objects. speed two functions significantly.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009036","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9036","title":"BirdFlowR 0.0.0.9036","text":"replaced forecast() BirdFlow method predict().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009033","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9033","title":"BirdFlowR 0.0.0.9033","text":"end result time stuff enumerated (1) can set time format, (2) possible time associated distribution stored dim names, (3) ’s single distribution thus possible store time dim names new \"time\" attribute added object store time associated distribution. new birdflow_options() allows setting global options persist session. Currently two options verbose time_format. time_format option controls labeling distributions either column names 1 distribution via “time” attribute (See ) ’s single distribution. affects get_distr(), predict(), rast(). get_distr() now adds attribute \"time\" returning single distribution vector. Multiple distributions already used matrix column names record time associated distribution. Similarly, expand_distr() called single distribution preserve \"time\" attribute output matrix, flatten_raster() called single distribution’s raster (matrix) also preserve “time” attribute output vector. rasterize_distr() thus also rast() now convert \"time\" attribute layer name output raster single distribution. previously still distribution column names multiple distributions. names column dimension distribution matrices changed “timestep” “time” internal, stored object returned objects get_distr() forecast(). fix_dead_ends(), preprocess_species(), sparsify() now honor birdflow_options(\"verbose\") - printing progress information TRUE.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009034","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9034","title":"BirdFlowR 0.0.0.9034","text":"Changed preprocess_species() gb argument gpu_ram.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009035","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9035","title":"BirdFlowR 0.0.0.9035","text":"sparsify() longer throws confusing warning (#35) First argument sparsify() changed bf x (consistent #19)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009038","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9038","title":"BirdFlowR 0.0.0.9038","text":"Updated docker file work Apple silicon use cached github repos. (commit #37) Updated installation instructions Docker (commit #37) Route output snapshot testing longer depends print(lines) check novel points points component return value. fix issue currently failing CRAN check sf:: changed slightly prints summary SF object screen also make snapshot test little less hair trigger.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009028","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9028","title":"BirdFlowR 0.0.0.9028","text":"2023-03-08 New vignette(\"Preprocess\") covers preprocessing, importing, sparsification New vignette(\"Installation\") covers R, RStudio, package installation; installing Docker container. Updated installation instructions everywhere use remotes instead devtools re-install packages unnecessarily. Expanded “Learn ”” section README.md link vignettes well BirdFlow paper.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009021","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9021","title":"BirdFlowR 0.0.0.9021","text":"2023-03-03 Now downloads files needs #21 Slight adjustment resolution heuristic, take fewer steps find right resolution. Added additional tests cover error conditions clipping","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009019","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9019","title":"BirdFlowR 0.0.0.9019","text":"2023-03-01 collapse_distr(x, bf) -> collapse_raster(raster, bf) evaluate_performance(bf) -> evaluate_performance(x) expand_distr(x, bf) -> expand_distr(distr, bf) get_distr(, bf, from_marginals) -> get_distr(x, , from_marginals) get_transition(x, bf) -> get_transition(x, transition) lookup_transitions(start, end, bf, direction) -> lookup_transition(x, start, end, direction) sample_distr(x, bf) -> sample_distr(distr, bf) evaluate_performance() find_dead_ends() find_threshold() fix_dead_ends() import_prototype() lookup_transitions() new_BirdFlow() transition_from_marginal() Added “@keyword internal” documentation non-exported functions. removes documentation package manual index, ’s still accessible ?function_name.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009016","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9016","title":"BirdFlowR 0.0.0.9016","text":"2023-02-27 Added package . Starting use semantic versioning.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009017","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9017","title":"BirdFlowR 0.0.0.9017","text":"2023-02-27 Fix bug introduced ebirdst 2.2021.0 (switch raster terra) #17.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009003","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9003","title":"BirdFlowR 0.0.0.9003","text":"2023-02-27 Updated installation instructions. Closing #11. Added docker file. Usage instructions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009002","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9002","title":"BirdFlowR 0.0.0.9002","text":"2023-02-23 Added “biocViews:” “Imports:” DESCRIPTION devtools can find install rhdf5 (Bioconductor) installing packages BirdFlowR needs. #13 Vignette now attempts load rnaturalearthdata utils::install.packages() instead devtools::install_cran() attempt fix #11 Updated get_naturalearth() handles cases previously failed. particular extents span 180 deg longitude, extents cross 180 deg. meridian defines edge WGS84 projection now work. function still doesn’t handle polar projections global extents projections. Fixes #14","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009001","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9001","title":"BirdFlowR 0.0.0.9001","text":"2023-02-21 Switched order package installation readme added installation rnaturalearthdata vignette #11 Added NEWS.md file track changes package.","code":""}]
