[{"path":"https://birdflow-science.github.io/BirdFlowR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to BirdFlowR","title":"Contributing to BirdFlowR","text":"welcome contributions suggestions!","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/CONTRIBUTING.html","id":"proposing-changes","dir":"","previous_headings":"","what":"Proposing changes","title":"Contributing to BirdFlowR","text":"Feel free propose changes submitting issues regardless whether intend submit pull request. intend submit pull request submitting issue good way get early feedback ideas write code.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to BirdFlowR","text":"’ve documented complete process given small size paucity pull requests aren’t sticklers consider pull request useful code even include everything . Fork clone package onto computer. haven’t done can use usethis::create_from_github(\"birdflow-science/BirdFlowR\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). can use: usethis::pr_init(\"brief-description--change\") preferred git tools. Edit code. See also Code style section . Create update documentation. BirdFlowR uses roxygen2 document functions structured comments function code. adding new function start documenting (RStudio) positioning cursor function body selecting “Insert Roxygen Skeleton” “Code” menu. Currently functions except trivial helper functions documented Roxygen comments. function meant public delete “@export” Roxygen comment block add “@keywords internal”. Add tests. Tests use testthat package stored “/tests/testhat/” file starts “test-” code’s file name (usually function name). easiest way (RStudio) new file open active Source Editor Pane console run usethis::usetest() create appropriate file open example test can edit (open file already exists). pull request addresses bug issue may want creat failing test demonstrates issue make changes package. can run tests package devtools::test() (RStudio) test currently open file “Run Tests” button upper right source editor. Tests also run checking package. Rebuild documentation either using “Document” item “” menu within “Build” tab RStudio.. Ctr+Shift+D, devtools::document(). convert Roxygen comments .Rd files within “man/”. .Rd files never edited directly. Increment version DESCRIPTION file. Add news bullets top NEWS.md new heading current version. ’s good idea use “preview” button top code verify rendered correctly. Lint function example lintr::lint(\"R/function_name.R\"). Please lint unrelated code make harder see pull request . Check package devtools::check(). Commit git, create pull request. One way running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Optionally check code coverage 10 minuntes submitting pull request branch appear near top “Branch Context” drop coverage page. new code covered tests consider adding additional tests pushing new commit pull request branch - update pull request rerun coverage.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code style","title":"Contributing to BirdFlowR","text":"Code follow tidyverse style guide. use lintr::lint() lint files new code. lint otherwise unchanged code. general function stored file matches name. rule can broken closely related sets exported functions helper functions. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept. first draft document created usethis::use_tidy_contributing(). heavily edited text still direct copy resulting tidyverse contributing guidelines. usethis BirdFlowR released MIT license.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 BirdFlowR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"BirdFlow Model Overview, Uses, and Limitations","text":"BirdFlow infers species migrate weekly distribution estimates produced eBird Status Trends project. ’s example input data BirdFlow, Status Trends animation weekly relative abundance American Woodcock: can clearly see “movement” population week week, explicit information individual birds moved. BirdFlow uses weekly relative abundance information Status Trends create model species migrates. model can generate synthetic routes predict individual birds likely move. example, synthetic routes American Woodcock:  example forecasts future locations bird particular location week January 4: plot shows forecasted distribution future locations given week bird starts green square week January 4. Scientists can use BirdFlowR package generate routes, make forecasts, using models provided BirdFlow team.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How it Works","title":"BirdFlow Model Overview, Uses, and Limitations","text":"understand appropriate uses limitations BirdFlow, ’s helpful understand little works. (Much information paper.) Formally, BirdFlow model probability distribution routes. image , saw 10 routes generated sampling probability distribution BirdFlow model. reasonable way think probability distribution, hence BirdFlow model, routes generates. example, sampled million routes learn nearly statistical properties distribution, routes start, end, much zig-zag, . properties want distribution—routes—? BirdFlow model learned fit adjusting probability distribution balance several criteria encoded loss function: locations birds week match Status Trends distribution week. example one million routes, take location along route week June 28, million locations match Status Trends relative abundance map week June 28. routes biologically realistic, example, zig-zag map move unrealistically far one week. achieved component loss function based distance migratory transitions. routes appropriately “dispersed”. Birds one location shouldn’t go exactly next location, fly completely random directions. BirdFlow uses entropy term loss function encourage enough dispersion.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"memorylessness","dir":"Articles","previous_headings":"","what":"“Memorylessness”","title":"BirdFlow Model Overview, Uses, and Limitations","text":"important property BirdFlow models “memoryless”: generating route, bird’s next location depends current location, full sequence past locations. words, “state” “memory” bird ’s current location. example, model track bird’s energetic reserves intended destination. Mathematically, model Markov chain. good computational statistical reasons choice, limits use ways describe . future, intend try different types models, always tension model complexity available data—fine-grained behavior hard learn Status Trends data. fact, memoryless model optimal BirdFlow loss function captures criteria described .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"interpretation-and-uses","dir":"Articles","previous_headings":"","what":"Interpretation and Uses","title":"BirdFlow Model Overview, Uses, and Limitations","text":"BirdFlow’s routes forecasts interpreted? ’s important remember synthetic routes routes real tracked birds. guarantee put together many synthetic routes, match population-level properties Status Trends data. , tune model routes biologically plausible: don’t travel farther needed, don’t zig-zag much, etc. BirdFlow models also tuned tracking data dispersion movements roughly matches tracked birds species—example, take real tracked bird forecast distribution next location, 90% time actual next location fall within 90% probability region forecasted distribution. BirdFlow exciting can synthesize forecast migration routes many species across entire range without needing extensive tracking data. general, expect BirdFlow capture coarse-scale properties species’ migration well, exciting potential uses: Provide synthetic migration routes match observed population-level properties Quantify broad-scale directionality movement Inform birds given location likely go next, came , example, help understand spread diseases like avian influenza Explore hypotheses migratory connectivity Compare statistics movement across species","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowOverview.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"BirdFlow Model Overview, Uses, and Limitations","text":"’s also important understand limitations BirdFlow. primary evidence used fit BirdFlow models Status Trends data. many different models (think: sets migration routes) match Status Trends data well. example, might choose one model birds migrate medium distance, another model birds migrate short distance others migrate long distance might match Status Trends equally well. BirdFlow fitting process parameters control types routes selected (e.g., many short hops vs. fewer longer hops, amount dispersion routes). paper tuned parameters match real routes tracked birds 11 species well possible, resulting models predicted movements tracked birds significantly better baseline model. However, expect BirdFlow’s synthetic routes forecasts match real movements every detail. specific limitations : Details individual routes number hops, length stopovers, lengths hops may may match real routes. Due memorylessness, BirdFlow routes don’t typically site fidelity (bird returns location year year). reason currently recommend using BirdFlow generate routes make forecasts period less one year, example, single migration season. Due memorylessness, BirdFlow distinguish subpopulations different migration strategies; instead mix two subpopulations. think major issue species subpopulations separated space time, BirdFlow users aware limitation consider light intended use. BirdFlow’s time step weekly model movements finer time scale, daily movements. BirdFlow uses grid represent locations model movements spatial scale finer grid resolution. BirdFlow uses Status Trends relative abundance data input requires adequate Status Trends coverage species’ range create model. models provide judged adequate coverage, can’t currently create models every species. Status Trends relative abundance estimates great, perfect. BirdFlow reproduce inaccuracies present Status Trends estimates.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"install-packages","dir":"Articles","previous_headings":"Setup","what":"Install packages","title":"BirdFlowR","text":"","code":"installed <- rownames(installed.packages()) if (!\"remotes\" %in% installed)   install.packages(\"remotes\") if (!\"rnaturalearthdata\" %in% installed)   install.packages(\"rnaturalearthdata\") remotes::install_github(\"birdflow-science/BirdFlowModels\") remotes::install_github(\"birdflow-science/BirdFlowR\", build_vignettes = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"load-libraries","dir":"Articles","previous_headings":"Setup","what":"Load libraries","title":"BirdFlowR","text":"","code":"library(BirdFlowModels) library(BirdFlowR) library(terra) #> terra 1.7.39 library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"load-model","dir":"Articles","previous_headings":"Setup","what":"Load model","title":"BirdFlowR","text":"BirdFlow Science team shared collection fitted models use BirdFlowR package. website includes reports species. can also access collection index package. can load model collection based model column index.Note: vignette block isn’t executed. loads smaller example model instead efficiency package building testing, use one science!","code":"# Load and print index index <- load_collection_index() #> Downloading collection index print(index[ , c(\"model\", \"common_name\")]) #>                model        common_name #> 1 amewoo_prebreeding  American Woodcock #> 3 buwtea_prebreeding   Blue-winged Teal #> 4 lobcur_prebreeding Long-billed Curlew #> 5 swahaw_prebreeding    Swainson's Hawk # Load a specific model bf <- load_model(\"amewoo_prebreeding\") # caches locally and loads from cache bf <- BirdFlowModels::amewoo # example and test dataset"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"access-basic-information","dir":"Articles","previous_headings":"","what":"Access basic information","title":"BirdFlowR","text":"dim(), nrow(), ncol() report raster dimensions associated model. n_active total number cells BirdFlow model can route birds subset cells raster.n_transitions() n_distr() report temporal dimensions. model is_cyclical(), equal.","code":"# Methods for base R functions: dim(bf) #> [1] 45 51 c(nrow(bf), ncol(bf)) #> [1] 45 51 bf # same as print(bf) #> American Woodcock BirdFlow model #>   dimensions   : 45, 51, 52  (nrow, ncol, ntimesteps) #>   resolution   : 79995.7798343748, 79995.8424586389  (x, y) #>   active cells : 1706 #>   size         : 19 Mb  # BirdFlowR functions n_active(bf) #> [1] 1706 n_transitions(bf) #> [1] 51 n_timesteps(bf) #> [1] 52  # Contents has_marginals(bf) #> [1] TRUE has_distr(bf) #> [1] TRUE has_transitions(bf) #> [1] FALSE is_cyclical(bf) #> [1] FALSE"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"species-information-and-metadata","dir":"Articles","previous_headings":"","what":"Species information and metadata","title":"BirdFlowR","text":"species_info() get_metadata() take BirdFlow object first argument. optional second argument allows specifying specific item, omitted list returned available information. species(bf) shortcut species_info(bf, \"common_name\") Use ?species_info() see descriptions available information. Dates associated migration resident seasons likely useful.","code":"species(bf) #> [1] \"American Woodcock\" species(bf, \"scientific\") #> [1] \"Scolopax minor\" species_info(bf, \"prebreeding_migration_start\") #> [1] \"2021-01-18\" si <-  species_info(bf) # list with all species information md <- get_metadata(bf)  # list with all metadata get_metadata(bf, \"birdflow_model_date\") # date model was exported from python #> [1] \"2023-01-02 10:03:05.256454\"  validate_BirdFlow(bf)  # throws error if there are problems"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"spatial-aspects","dir":"Articles","previous_headings":"","what":"Spatial aspects","title":"BirdFlowR","text":"BirdFlow models based raster representation time series species distributions contain spatial information necessary recreate distributions define raster positioned space. BirdFlowR uses terra package import raster data provides BirdFlow methods functions defined terra package - can use functions BirdFlow objects. crs() returns coordinate reference system - useful need project data match BirdFlow object. res(), xres(), yres() describe dimensions individual cells model. ext() returns terra extent object.compare_geom() tests extent, resolution, CRS two objects . BirdFlowR includes methods compare BirdFlow models terra objects. BirdFlow objects also play nicely sf package.","code":"# Methods for terra functions: a <- crs(bf) # well known text (long) crs(bf, proj = TRUE)  # proj4 string #> [1] \"+proj=moll +lon_0=-90 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs\" res(bf) #> [1] 79995.78 79995.84 c(xres(bf), yres(bf)) # same as res(bf) #> [1] 79995.78 79995.84 ext(bf) #> SpatExtent : -1564958.2138293, 2514826.55772382, 2822153.67510416, 6421966.58574292 (xmin, xmax, ymin, ymax) c(xmin(bf), xmax(bf), ymin(bf), ymax(bf)) # same as ext(bf) #> [1] -1564958  2514827  2822154  6421967  # Compare geometries - do they have the same CRS, extent, and cell size compareGeom(bf, rast(bf))   #> [1] TRUE bb <- sf::st_bbox(bf) crs <- sf::st_crs(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"retrieve-and-plot-distributions","dir":"Articles","previous_headings":"","what":"Retrieve and plot distributions","title":"BirdFlowR","text":"distribution BirdFlow stored vector values correspond active cells (n_active()) model. Multiple distributions stored matrices n_active() rows column distribution. can retrieve distributions format get_distr(). Use timestep, character dates, date objects, “” specify distributions retrieve. Retrieve first distribution compare length number active cells. Get 5 distributions, result matrix column distribution row active cell. can also specify distributions dates, use “” retrieve distributions. Use rasterize_distr() convert distribution SpatRaster defined terra package. second argument, BirdFlow model, needed spatial information contains. Alternatively convert directly BirdFlow SpatRast rast(). second (optional) argument accepts inputs get_distr().  BirdFlowR provides convenience wrappers functions rnaturalearth load vector data crop transform make suitable plotting BirdFlow output. Note: rnaturalearth fully transitioned away legacy packages may see warning , BirdFlowR use legacy packages data formats .","code":"d <- get_distr(bf, 1) # get first timestep distribution length(d)  # 1 distribution so d is a vector #> [1] 1706 n_active(bf)  # its length is the the number of active cells in the model #> [1] 1706 d <- get_distr(bf, 26:30) dim(d) #> [1] 1706    5 head(d, 3) #>       time #> i      June 28 July 5 July 12 July 19 July 26 #>   [1,]       0      0       0       0       0 #>   [2,]       0      0       0       0       0 #>   [3,]       0      0       0       0       0 d <- get_distr(bf, \"2022-12-15\") # from character date d <- get_distr(bf, \"all\")  # all distributions d <- get_distr(bf, Sys.Date())  # Using a Date object d <- get_distr(bf, c(1, 26)) # winter and summer r <- rasterize_distr(d, bf) # convert to SpatRaster r <- rast(bf) # all distributions r <- rast(bf, c(1, 26))  # 1st, and 26th timesteps. plot(r) r <- rast(bf, species_info(bf, \"prebreeding_migration_start\")) plot(r) coast <- get_coastline(bf)  # lines #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) plot(coast, add = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"forecasting","dir":"Articles","previous_headings":"","what":"Forecasting","title":"BirdFlowR","text":"section sample single starting location winter distribution project forward. generate distribution predicted breeding grounds birds wintered starting location. Set predict parameters.","code":"start <- 1     #  winter     end <-  26     # summer"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"sample-starting-distribution","dir":"Articles","previous_headings":"Forecasting","what":"Sample starting distribution","title":"BirdFlowR","text":"sample_distr() sample one input distribution select single location per distribution. result one distributions ones selected location(s) zero elsewhere.","code":"set.seed(0) d <- get_distr(bf, start) location <- sample_distr(d)  print(i_to_xy(which(as.logical(location)), bf))  # starting coordinates #>           x       y #> 1 -5040.507 3982093"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"project-forward-from-this-location-to-summer","dir":"Articles","previous_headings":"Forecasting","what":"Project forward from this location to summer","title":"BirdFlowR","text":"predict() returns distribution time matrix one column per timestep. plot shows birds winter particular location likely year progresses ultimately might spend summer. probability density spreads weeks progress.  Additionally, can calculate difference projected distribution distribution species whole timestep.","code":"f <- predict(bf, distr = location, start = start, end = end,              direction = \"forward\")  r <- rasterize_distr(f[, c(1, 7, 14, 19)], bf) plot(r) projected <- f[, ncol(f)]  # last projected distribution diff <-  projected - get_distr(bf, end) plot(rasterize_distr(diff, bf))"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"generate-synthetic-routes","dir":"Articles","previous_headings":"","what":"Generate synthetic routes","title":"BirdFlowR","text":"sample locations American Woodcock winter distribution generate routes summer grounds. Set route parameters.","code":"n_positions <-  15 # number of starting positions start <- 1         # starting timestep (winter) end <- 26          # ending timestep (summer)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"generate-starting-locations","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Generate starting locations","title":"BirdFlowR","text":"First extract winter distribution, use sample_locations() n = n_positions sample input distribution repeatedly. result matrix column single ‘1’ representing sampled location. Plot starting (winter) distribution sampled locations.","code":"d <- get_distr(bf, start) locations  <- sample_distr(d, n = n_positions, bf = bf, format = \"xy\") x <- locations$x y <- locations$y winter <- rasterize_distr(d, bf) plot(winter) points(x, y)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"generate-routes","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Generate routes","title":"BirdFlowR","text":"route() generate synthetic routes starting position. route() returns BirdFlowROutes object ’s core data frame row timestep route, also includes additional spatial temporal information BirdFlow object. route() function can sample starting locations distribution starting timestep following equivalent preceeding two sections. can specify date range arguments supported lookup_timestep_sequence() alternative slightly different start end dates use season argument. route prebreeding migration.","code":"rts <- route(bf, x_coord = x, y_coord = y, start = start, end = end) head(rts$points, 4) #> NULL rts2 <- route(bf,  n = n_positions,  start = start, end = end ) rts3 <- route(bf, n = n_positions, season = \"prebreeding\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"using-base-r-plotting-to-plot-routes","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Using base R plotting to plot routes","title":"BirdFlowR","text":"Plot route lines summer distribution along points starting ending positions.","code":"d <- get_distr(bf, end) summer <- rasterize_distr(d, bf)  line_col <- rgb(0, 0, 0, .2) pt_col <- rgb(0, 0, 0, .5)  plot(summer) points(x, y, cex = .4, col = pt_col, pch = 16) # starting points  lines <- sf::st_as_sf(rts, type = \"line\")  # convert to sf lines #> Set crs based on geom attribute. plot(lines, add = TRUE, col = line_col)  # routes  end_pts <- rts[rts$timestep == end, ]  # end points points(x = end_pts$x, y = end_pts$y,        cex = 0.4, pch = 12, col = pt_col)  title(main = species(bf))"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"or-use-plot_routes","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Or use plot_routes()","title":"BirdFlowR","text":"plot_routes() visualize time color gradient using ggplot2 stop point dots indicate long bird stopping point.","code":"plot_routes(rts, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"standard-install","dir":"Articles","previous_headings":"","what":"Standard install","title":"Detailed installation instructions","text":"uses R RStudio installed directly system installed skip step 3. Install R CRAN - follow links system upper right. ’m currently using R version 4.3.1 (2023-06-16) think 4.2.x work. Install RStudio IDE isn’t strictly necessary, RStudio significant upgrade R’s standard GUI. Install required R packages. Open RStudio run following console. Package dependencies can pain. doesn’t work can also try alternative method , also executed RStudio console. neither methods work last option try specific troublesome packages use RStudio’s “Install Packages” top “Tools” menu.","code":"installed <- rownames(installed.packages()) if(!\"remotes\" %in% installed)   install.packages(\"remotes\") if(!\"rnaturalearthdata\" %in% installed)   install.packages(\"rnaturalearthdata\") remotes::install_github(\"birdflow-science/BirdFlowModels\")   remotes::install_github(\"birdflow-science/BirdFlowR\", build_vignettes = TRUE) installed <- rownames(installed.packages()) if(!\"pak\" %in% installed)   install.packages(\"pak\")  pak::pkg_install(\"rnaturalearthdata\", ask = FALSE) pak::pkg_install(\"birdflow-science/BirdFlowModels\", ask = FALSE, ) pak::pkg_install(\"birdflow-science/BirdFlowR\", ask = FALSE,                   dependencies = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"docker","dir":"Articles","previous_headings":"","what":"Docker","title":"Detailed installation instructions","text":"Alternatively can install Dockerfile ’s one can use Dockerfile Linux/MacOS (Windows similar). Download install Docker Desktop. computer Apple Silicon chip (e.g., M1 M2), Docker Desktop go Settings > General ensure “Use Virtualization Framework” checked, go Features Development > check “Use Rosetta x86/amd64 emulation Apple Silcon”. Apply settings restart Docker Desktop needed. Ensure Docker Desktop running. Clone BirdFlowR package GitHub. Go top level BirdFlowR directory, build image Dockerfile, tag image ‘birdflow’. take long time first time need download rocker/geospatial: image Docker Hub, starting point install custom packages via Dockerfile. future builds machine, rocker/geospatial already cached Docker, needs re-install custom packages. build step really needs happen want use newer version BirdFlowR repo. See also: https://rocker-project.org/images/versioned/rstudio.html Launch Docker container image, launch RStudio Server instance container. ’re locally computer, can use version skip password. Specifying IP address way make accessible computer, according Rocker page. ’re computers, make sure include ports, require authentication: see message saying services started, point web browser localhost:8787/ use RStudio image. ’re done, go back terminal window started docker services, hit Control-C. send kill signal container supporting RStudio server process. Rocker webpage shows ways persist directories settings container host well, don’t lose Rstudio settings local work time launch/close container.","code":"cd ~/BirdFlowR docker build -t birdflow . --no-cache docker run --platform linux/amd64 --rm -ti -e DISABLE_AUTH=true -p 127.0.0.1:8787:8787 birdflow docker run --platform linux/amd64 --rm -ti -e PASSWORD=yourpassword -p 8787:8787 birdflow"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"ebirdst","dir":"Articles","previous_headings":"","what":"ebirdst","title":"Detailed installation instructions","text":"want preprocess species model fitting need ebirdst access code must request via online form. code run (R RStudio console): “XXXXX” access key. restart R.","code":"library(ebirdst) set_ebirdst_access_key(\"XXXXX\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"test","dir":"Articles","previous_headings":"","what":"Test","title":"Detailed installation instructions","text":"Run lines see see ’ve installed two BirdFlow packages dependencies.","code":"library(BirdFlowModels) library(BirdFlowR) library(terra) bf <- BirdFlowModels::amewoo print(bf) plot(rast(bf, 1)) #> American Woodcock BirdFlow model #>   dimensions   : 45, 51, 52  (nrow, ncol, ntimesteps) #>   resolution   : 79995.7798343748, 79995.8424586389  (x, y) #>   active cells : 1706 #>   size         : 19 Mb"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"load-r-packages-and-set-species-","dir":"Articles","previous_headings":"","what":"Load R packages and set species.","title":"Preprocess and sparsify","text":"“example_data” allows processing ebirdst example data, doesn’t require access code. plan preprocessing species sure setup ebirdst access code. ’ll also setup destination folder purpose vignette ’m going use temporary folder. optionally set directory choice somewhere permanent accessible. code add BirdFlowModels directory home directory, use model output. block run building vignette.","code":"library(BirdFlowR) library(ebirdst) library(terra) species <- \"example_data\"  # optionally, set species here dir <- tempdir() dir <- \"~/BirdFlowModels\" dir.create(dir, showWarnings = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"preprocess","dir":"Articles","previous_headings":"","what":"Preprocess","title":"Preprocess and sparsify","text":"Now can preprocess species. gb parameter one way setting resolution; specifies amount ram available machine intend fit BirdFlow model - python Jax, probably cluster. , set gb small value keep file size memory requirements small.","code":"# Note: #   amewoo 100km resolution is equivalent to gpu_ram = 1 #   amewoo 75 km resolution is equivalent to gpu_ram = 2.9  bf <- preprocess_species(species, dir, gpu_ram = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"fit-models","dir":"Articles","previous_headings":"","what":"Fit models","title":"Preprocess and sparsify","text":"python. Come back ’re done.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"import","dir":"Articles","previous_headings":"","what":"Import","title":"Preprocess and sparsify","text":"rest vignette predicated .hdf5 file fitted model. Set path file import .","code":"model_file <- file.path(dir, \"fitted.hdf5\") bf <- import_birdflow(model_file)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"sparsify","dir":"Articles","previous_headings":"","what":"Sparsify","title":"Preprocess and sparsify","text":"’s good idea sparsify immediately importing reduce memory usage processing time models. state method eliminates transitions model states (locations space time) ebirdst distribution zero. states thus removed model. can read sparsification methods help sparasify().","code":"bf <- sparsify(bf, method = \"state\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"save-sparse-model","dir":"Articles","previous_headings":"","what":"Save sparse model","title":"Preprocess and sparsify","text":"Saving sparse model save time disk space want use later. write serialized R object fast efficient portable software. later session read . See vignette('BirdFlowR') examples routing forecasting BirdFlow objects.","code":"sparse_file <- file.path(dir, \"sparse.Rds\")  # change  saveRDS(bf, file = sparse_file) bf <- readRDS(sparse_file)"},{"path":"https://birdflow-science.github.io/BirdFlowR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Plunkett. Author, maintainer. Daniel Sheldon. Author.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Plunkett E, Sheldon D (2023). BirdFlowR: Predict Visualize Bird Movement. https://birdflow-science.github.io/BirdFlowR/, https://github.com/birdflow-science/BirdFlowR.","code":"@Manual{,   title = {BirdFlowR: Predict and Visualize Bird Movement},   author = {Ethan Plunkett and Daniel Sheldon},   year = {2023},   note = {https://birdflow-science.github.io/BirdFlowR/, https://github.com/birdflow-science/BirdFlowR}, }"},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"birdflowr-","dir":"","previous_headings":"","what":"Predict and Visualize Bird Movement","title":"Predict and Visualize Bird Movement","text":"R package predict changes bird distributions generate synthetic migration routes based BirdFlow models. package development yet formally released. Function names arguments may change.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Predict and Visualize Bird Movement","text":"Install just package: install example data vignette: See vignette(\"Installation\") troubleshooting installation options.","code":"if(!require(\"remotes\"))   install.packages(\"remotes\")  remotes::install_github(\"birdflow-science/BirdFlowR\") installed <- rownames(installed.packages()) if(!\"remotes\" %in% installed)   install.packages(\"remotes\") if(!\"rnaturalearthdata\" %in% installed)   install.packages(\"rnaturalearthdata\") remotes::install_github(\"birdflow-science/BirdFlowModels\") remotes::install_github(\"birdflow-science/BirdFlowR\", build_vignettes = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Predict and Visualize Bird Movement","text":"two primary functions predict() project distributions route() generate synthetic routes. route_migration() wrapper route() automates sampling locations distribution start migration setting start end dates route migration window. can use create synthetic routes species.  Visualize movement BirdFlow model timestep.","code":"library(BirdFlowR) library(BirdFlowModels)  bf <- amewoo   species(bf) #> [1] \"American Woodcock\"  # Generate routes for the prebreeding migration  rts <- route(bf, n = 10, season = \"prebreeding\")  # Plot routes plot_routes(rts, bf) plot_movement_vectors(bf, start = 12)"},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Predict and Visualize Bird Movement","text":"vignette(\"BirdFlowR\") longer introduction package, use predict() route() project bird distributions movement. vignette(\"Installation\") detailed installation instructions. vignette(\"Preprocess\") covers downloading formatting data model fitting preprocess_species(), importing fitted models import_birdflow(), reducing model size sparsify(). BirdFlow: Learning Seasonal Bird Movements Citizen Science Data Miguel Fuentes, Benjamin M. Van Doren, Daniel Fink, Daniel Sheldon bioRxiv 2022.04.12.488057; doi: https://doi.org/10.1101/2022.04.12.488057","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"dynamic mask logical matrix dimensions distr matrix bf holding TRUE cells corresponding location (row) time (column) included model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"","code":"add_dynamic_mask(bf, dummy_mask = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"bf BirdFlow object dummy_mask TRUE mask addded object, mask TRUE every cell. yields BirdFlow object works current mask dependent version package mimics old BirdFlow model.  Note old model included state based sparsification predictions identical even dummy_mask = FALSE (default).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"BirdFlow object dynamic_mask component marginals includes transitions cells dynamically masked.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"","code":"bf <- add_dynamic_mask(BirdFlowModels::amewoo)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate movement vectors — animate_movement_vectors","title":"Animate movement vectors — animate_movement_vectors","text":"animate_movement_vectors() produces gganim object frame map vectors showing average modeled movement birds cell landscape given timestep. analogous series images created plot_movement_vectors().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate movement vectors — animate_movement_vectors","text":"","code":"animate_movement_vectors(bf, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate movement vectors — animate_movement_vectors","text":"bf BirdFlow object ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate movement vectors — animate_movement_vectors","text":"gganim object. print() plot default options, use animate() set options. See example recommended settings.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Animate movement vectors — animate_movement_vectors","text":"arrow represents average transitions single cell. tail arrow center cell, head average location following timestep birds start cell. timestep /date label starting timestep transition displayed format depends birdflow_options(\"time_format\") Thicker lines less transparency (darker shading) indicate higher density eBird S&T distribution beginning timestep displayed transition. recommend using \"ragg_png\" device rendering animations example code.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate movement vectors — animate_movement_vectors","text":"","code":"bf <- BirdFlowModels::amewoo a <- animate_movement_vectors(bf) #> Creating vector fields #> \t................................................... #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal)  if (FALSE) {  # Animate, display, and save #   Note: \"ragg_png\" is considerably faster and produces cleaner output than #         the default device. gif <- gganimate::animate(a, fps = 1, device = \"ragg_png\",                           width = 6, height = 5,                           res = 150, units = \"in\") print(gif)  # Save gif_file <- tempfile(\"animation\", fileext = \".gif\") gganimate::save_animation(gif, gif_file) file.remove(gif_file) # cleanup }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate routes — animate_routes","title":"Animate routes — animate_routes","text":"Animate synthetic routes produced route() route_migration(), producing dynamic version plot_routes().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate routes — animate_routes","text":"","code":"animate_routes(routes, bf, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate routes — animate_routes","text":"routes output route() similarly structured data frame. bf BirdFlow object ... Arguments passed plot_routes facet TRUE use ggplot2::facet_wrap() show route separate subplot. max_stay_len Used scale stay length dots. NULL (default) set maximum \"stay_len\" value routes. Set manually keep dot scaling consistent across multiple plots. use_seasonal_colors TRUE color scale uses blues, greens, yellows, reds, winter, spring, summer, fall used consistent mapping dates colors regardless range dates plotted. FALSE data plotted using full color scale. pal color palette use plotting whe use_seasonal_cols FALSE. Defaults viridisLite::viridis(n = 5). barheight height color gradient legend bar.  Passed ggplot2::guide_colorbar() barheight argument. Depending output resolution plot size may need adjusted. Can take number output ggplot2::unit(). route_linewidth Line width used routes. coast_linewidth Line width used coastlines. dot_sizes Two numbers indicating smallest largest dot sizes used represent stay length.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate routes — animate_routes","text":"gganim object. print() plot default options, use animate() set options. See example recommended settings.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Animate routes — animate_routes","text":"Note rendering early frames (minimum first) one point per route, resulting message: \"geom_path(): group consists one observation. ℹ need adjust group aesthetic?\" possibly repeated individuals remain one location. can safely ignored. error thrown rendering within animate_routes()` suppress .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate routes — animate_routes","text":"","code":"bf <- BirdFlowModels::amewoo rts <- route_migration(bf, 10) #> Warning: route_migration() is deprecated please transition to route() instead. Change the migration argument to season. anim <- animate_routes(rts, bf)  if (FALSE) {   # example render   timesteps <- unique(rts$points$timestep)   gif <- gganimate::animate(anim,                             device = \"ragg_png\", # ragg_png is fast and pretty                             width = 7, height = 6,                             res = 150, units = \"in\",                             nframes = length(timesteps) * 4, fps = 8)    # Display   print(gif)    # Save   gif_file <- tempfile(\"animation\", fileext = \".gif\")   gganimate::save_animation(gif, gif_file)   file.remove(gif_file) # cleanup }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","title":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","text":"Convert sequence timesteps sequence transition names","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","text":"","code":"as_transitions(timesteps, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","text":"timesteps valid sequence timesteps. See lookup_timestep_sequence(). bf BirdFlowR model, used determine much padding needed around timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/as_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a sequence of timesteps into a sequence of transition names — as_transitions","text":"directional sequence transitions connect timesteps","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"birdflow_crs — birdflow_crs","title":"birdflow_crs — birdflow_crs","text":"defines coordinate reference system (crs, AKA projection) used default BirdFlow models. customized Mollweide projection, longitude origin set -90 deg. centering western hemisphere.  St Louis, Missouri close longitude -90 deg. Mollweide projection preserves area, shapes distortion increases distance longitude origin.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"birdflow_crs — birdflow_crs","text":"","code":"birdflow_crs"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"birdflow_crs — birdflow_crs","text":"string defining custom mollweide projection centered western hemisphere well known text","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"birdflow_crs — birdflow_crs","text":"projection similar : https://spatialreference.org/ref/sr-org/7399/ crs(\"ESRI:54009) longitude origin 0, centered Greenwich, England.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"birdflow_crs — birdflow_crs","text":"https://epsg.io/54009","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"birdflow_crs — birdflow_crs","text":"","code":"cat(birdflow_crs) #> PROJCRS[\"Western Mollweide\", #>     BASEGEOGCRS[\"WGS 84\", #>         DATUM[\"World Geodetic System 1984\", #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"Western Mollweide\", #>         METHOD[\"Mollweide\"], #>         PARAMETER[\"Longitude of natural origin\",-90, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Not known.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]]] crs(birdflow_crs, proj = TRUE) #> [1] \"+proj=moll +lon_0=-90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and retrieve BirdFlowR options — birdflow_options","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"arguments BirdFlowR options returned list. Use single character value retreive value single option. Use one named arguments set options.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"","code":"birdflow_options(...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"... One : (1) one named arguments name option value new setting e.g. verbose = FALSE ; (2) single unnamed argument stating option retrieve e.g. \"verbose\" option retrieve; (3) arguments, indicating options current settings returned list.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"arguments used options returned list. single, unnamed argument character value indicating option value option returned. Otherwise, arguments indicate new option settings nothing returned.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"time_format Indicates time format use label dimensions distribution tables layers raster objects returned get_distr(), rast(), rasterize_distr(), predict().  affect internally stored distribution column labels (always t1, t2, etc.). Default \"month_day\". Valid values : \"timestep\" uses timestep integer appended \"t\" e.g. \"t1\");  \"date\" uses date format year-month-day (numbers) e.g. \"2022-11-23; \"month_day\" uses name month followed day month e.g. \"November 23\" verbose Defaults TRUE printing progress information process functions.  Set FALSE turn printing. max_param_per_gpu_gb Controls many parameters can fit BirdFlowPy per gigabyte GPU Ram.  conservative estimate based empirical testing.  See preprocess_species() cache local directory store downloaded model files.  Defaults tools::R_user_dir(\"BirdFlowR\", \"data\"). base cache directory within one collection specific directories, turn hold BirdFlow model files index. collection_url base URL collection model files associated index.  default standard BirdFlowR model collection.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"","code":"bf <- BirdFlowModels::amewoo birdflow_options() # print current settings #> $cache #> [1] \"/home/runner/.local/share/R/BirdFlowR\" #>  #> $collection_url #> [1] \"https://birdflow-science.s3.amazonaws.com/collection/\" #>  #> $max_param_per_gpu_gb #> [1] 23224801 #>  #> $time_format #> [1] \"month_day\" #>  #> $verbose #> [1] TRUE #>  original_format <- birdflow_options(\"time_format\") birdflow_options(time_format = \"date\") head(get_distr(bf, 1:3)) #>       time #> i      2019-01-04 2019-01-11 2019-01-18 #>   [1,]          0          0          0 #>   [2,]          0          0          0 #>   [3,]          0          0          0 #>   [4,]          0          0          0 #>   [5,]          0          0          0 #>   [6,]          0          0          0 birdflow_options(time_format = original_format)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_collection_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a directory of BirdFlow models into a collection — build_collection_index","title":"Convert a directory of BirdFlow models into a collection — build_collection_index","text":"BirdFlow model collection consists 1 BirdFlow objects saved single .Rds file, index.Rds file index.html file index_md5.txt file. function converts directory model .Rds files collection. needs run locally R session likely resulting directory syncronized server created.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_collection_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a directory of BirdFlow models into a collection — build_collection_index","text":"","code":"build_collection_index(dir, collection_url)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_collection_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a directory of BirdFlow models into a collection — build_collection_index","text":"dir local directory containing BirdFlow models saved .Rds files. base file name used model name metadata extracted BirdFlow object. collection_url final URL BirdFLow collection (served).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_collection_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a directory of BirdFlow models into a collection — build_collection_index","text":"primarily intended use BirdFlow team exported package anyone can use .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"add or drop transition matrices — build_transitions","title":"add or drop transition matrices — build_transitions","text":"Given BirdFlow object marginals without transitions build_transitions() return BirdFlow object marginals transitions, drop_tansitions() reverse process.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add or drop transition matrices — build_transitions","text":"","code":"build_transitions(x, rebuild = FALSE)  drop_transitions(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add or drop transition matrices — build_transitions","text":"x BirdFlow object rebuild set TRUE rebuild transitions already present.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add or drop transition matrices — build_transitions","text":"BirdFlow object transition matrices","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add or drop transition matrices — build_transitions","text":"","code":"if (FALSE) { bf1 <- BirdFlowModels::amewoo bf2 <- build_transitions(bf) bf2  bf3 <- drop_transitions(bf2) bf3 }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/cache_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to get the local path to the cache for the current\nmodel collection. — cache_path","title":"Internal function to get the local path to the cache for the current\nmodel collection. — cache_path","text":"Use birdflow_options(\"cache\") get main cache directory (parent collection directory) birdflow_options(\"collection_url\") current model collection url.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/cache_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to get the local path to the cache for the current\nmodel collection. — cache_path","text":"","code":"cache_path(collection_url = birdflow_options(\"collection_url\"))"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/cache_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to get the local path to the cache for the current\nmodel collection. — cache_path","text":"collection_url url collection. path base directory (index.html file).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/cache_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to get the local path to the cache for the current\nmodel collection. — cache_path","text":"Path local cache current collection including trailing delimiter.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"Calculate total number parameters occupied area timestep abundance raster.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"","code":"calc_abundance_stats(x, circular = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"x multilayer spatRaster relative abundances timestep circular TRUE (default) use first timestep abundance ending abundance.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"list n_params number parameters model fit x count vector number cells occupied timestep area vector area (sq m) included cells timestep res resolution raster km","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"helper preprocess_species()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"calc_movement_vectors() calculates average modeled movement birds location single transition BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"","code":"calc_movement_vectors(bf, start, direction = \"forward\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"bf BirdFlow model start starting timestep transition modeled direction \"forward\" default. Set \"backward\" calculate vectors transition backwards time.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"data frame columns: location index starting location.  row distribution matrix corresponds location. start starting timestep transition. end ending timestep transition. start_x x coordinate starting cell transition. start_y y coordinate starting cell transition. end_x weighted average destination x coordinate transitions starting cell, weights set transition probability destination. end_y weighted average destination y coordinate. weight proportion population starting cell eBird S&T distribution starting timestep. width range rescaling weight used plot_movement_vectors(), animate_movement_vectors() set line width arrows.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"practice row transition matrix represents single starting location (start_x start_y) values row represent transition probability number destination cells. probabilities used weights calculate average destination x y coordinates (end_x, end_y).  ending coordinates arrow represented expected average destination birds start cell.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"","code":"bf <- BirdFlowModels::amewoo mv <- calc_movement_vectors(bf, 7)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate year number from a sequence of timesteps — calc_year_number","title":"Calculate year number from a sequence of timesteps — calc_year_number","text":"internal function assigns sequential year observation based whether sequence passed presumed year boundary started . sequence backwards passes boundary result start 2 (later year) end 1 (earlier year).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate year number from a sequence of timesteps — calc_year_number","text":"","code":"calc_year_number(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate year number from a sequence of timesteps — calc_year_number","text":"x sequence integers representing timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate year number from a sequence of timesteps — calc_year_number","text":"sequence year numbers either 1 2 depending whether corresponding value x first second year x.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_year_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate year number from a sequence of timesteps — calc_year_number","text":"used plot_routes() calculating half proportional years.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compareGeom-BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"BirdFlow compareGeom methods — compareGeom","title":"BirdFlow compareGeom methods — compareGeom","text":"methods terra::compareGeom() work one arguments BirdFlow objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compareGeom-BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BirdFlow compareGeom methods — compareGeom","text":"","code":"# S4 method for BirdFlow,BirdFlow compareGeom(x, y, ...)  # S4 method for SpatRaster,BirdFlow compareGeom(x, y, ...)  # S4 method for BirdFlow,SpatRaster compareGeom(x, y, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compareGeom-BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BirdFlow compareGeom methods — compareGeom","text":"x BirdFlow SpatRaster object y BirdFlow SpatRaster object ... Arguments passed terra::compareGeom","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":null,"dir":"Reference","previous_headings":"","what":"compare names of two nested lists — compare_list_item_names","title":"compare names of two nested lists — compare_list_item_names","text":"Look difference list item names nested level. Used internally verify BirdFlow object structure","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare names of two nested lists — compare_list_item_names","text":"","code":"compare_list_item_names(x, y, map = \"x\", differences)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare names of two nested lists — compare_list_item_names","text":"x list y reference list map used recursion tracking x differences found differences used recursion collecting differences","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare names of two nested lists — compare_list_item_names","text":"data frame difference columns 0 rows differences found.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine BirdFlow model resolution                                     #### — determine_resolution","title":"Determine BirdFlow model resolution                                     #### — determine_resolution","text":"Internal function determine resolution use creating BirdFlow model.  called preprocess_species() nowhere else, complicated enough justify function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine BirdFlow model resolution                                     #### — determine_resolution","text":"","code":"determine_resolution(   sp_path,   res,   max_params,   gpu_ram,   clip,   crs,   download_species,   project_method )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine BirdFlow model resolution                                     #### — determine_resolution","text":"sp_path species path used ebirdst download load data res target resolution BirdFlow model kilometers. res NULL (default) resolution results less max_params parameters used, also minimizing resolution limiting number significant digits. max_params maximum number fitted parameters BirdFlow model contain. Ignored res NULL.  Otherwise resolution chosen yields many fitted parameters. See gpu_ram default way setting max_params res. Note: reduction paramters resulting truncation (see ...) factored calculation. gpu_ram Gigabytes ram GPU machine fit models. res NULL max_params NULL used estimate max_paramswhich , turn, used determine resolution. Ignored either res max_params set. clip polygon path file containing polygon. must CRS either SpatVector() object produce one called vect(clip) crs coordinate reference system (CRS) use.  Defaults custom projection eBird assigned species - see ebirdst::load_fac_map_parameters()). interpreted terra::crs() generate well known text representation CRS. download_species species code used ebirdst might \"example_data\" otherwise real species code. project_method method used reproject local variable set within preprocess_species.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine BirdFlow model resolution                                     #### — determine_resolution","text":"resolution km either set directly user derived max_params gpu_ram.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/determine_resolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine BirdFlow model resolution                                     #### — determine_resolution","text":"user specifies resolution resolution used creating model. res argument NULL heuristic attempts set gpu_ram parameter specifies GB ram available machine used fit models. turned really hard anticipate many cells contain data resolution change. code estimates calculating area non-zero cells current resolution figures resolution number cells required cover area matches target number parameters. However, poor estimate ignores fact coarse cells along edges overlap fine cells contain mix data data. code makes estimate applies correction factor adjust estimate bias, resamples estimate, evaluates new number non-zero cells (thus parameters), repeats estimate converges number parameters 90 100 % target number. results rather precise resolution can fit given number parameters rounded (reducing parameters) cleaner number.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensions of a BirdFlow object — BirdFlow dimensions","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"Functions return BirdFlow model dimensions basic information","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"","code":"# S3 method for BirdFlow nrow(x)  # S3 method for BirdFlow ncol(x)  # S3 method for BirdFlow dim(x)  n_timesteps(x)  n_distr(x)  n_transitions(x)  n_active(x)  # S4 method for BirdFlow crs(x, proj = FALSE, describe = FALSE, parse = FALSE)  # S4 method for BirdFlow ext(x)  # S4 method for BirdFlow res(x)  # S4 method for BirdFlow xres(x)  # S4 method for BirdFlow yres(x)  # S4 method for BirdFlow xmin(x)  # S4 method for BirdFlow ymin(x)  # S4 method for BirdFlow xmax(x)  # S4 method for BirdFlow ymax(x)  is_cyclical(x)  n_parameters(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"x BirdFlow object proj logical. TRUE crs returned PROJ-string notation describe logical. TRUE name, EPSG code, name extent area use returned known parse logical. TRUE, wkt parts parsed vector (line becomes element)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"nrow() returns number rows raster extent BirdFlow model ncol() number columns raster extent dim() number rows columns raster extent. n_timesteps() number timesteps distributions. n_distr() number distributions n_transitions() number transitions, model circular time equal n_timesteps(). n_active() number active cells (locations). crs() coordinate reference system, character well known text (wkt) default, see arguments. ext() SpatExtent object, contains xmin, xmax, ymin, ymax extent. res() two numbers, cell width height (x y resolution). xres() width cells (x resolution). yres() height cells (y resolution). xmin() minimum x coordinate extent. ymin() minimum y coordinate extent. xmax() maximum x coordinate extent. ymax() maximum y coordinate extent. is_cyclical() returns TRUE BirdFlow model transition last timestep first FALSE otherwise. n_parameters() number parameters BirdFlow model contains contain. number cells marginal matrices + sum dynamic mask first timestep (number un masked cells first timestep).  model dynamically masked equivalent n_active(x)^2 * n_transitons(x) + n_active(x)","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"Calculate correlation model derived distributions eBird Status Trend distributions used train BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"","code":"distribution_performance(x, metrics = NULL, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"x BirdFlow object metrics NULL calculate metrics.  Otherwise set subset metric names calculate metrics. ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"mean_step_cor Indicating average well model projects single timestep, mean_step_cor mean correlation, across timesteps, training (eBird Status Trends) distribution projected forward one timestep, training distribution projected timestep. min_step_cor Indicates quality worst single step projection. minimum correlation (across timesteps) single step projection training distribution training distribution projected timestep. mean_distr_cor Indicates average well marginal preserves training distributions. mean correlation training distributions distributions calculated marginals. min_distr_cor Indicates well poorest marginal preserves training distribution. minimum observed correlation marginal training distribution. st_traverse_cor, md_traverse_cor Indicates well model projects distribution multiple timesteps. correlation last distributionin series projected iteratively forward fist distribution; ebird Status Trends (training) distribution last timestep. st_traverse_cor starts first timestep Status Trends (st) distribution, md_traverse_cor starts marginal distribution timestep;  versions compare projected distribution eBird Status Trends distribution timestep.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"BirdFlow models trained eBird Status Trends distributions (\"Training distributions\"). \"Marginal distribution\" describes distribution calculated row column sums marginal, joint probability matrix (also part model). \"Projected distribution\" used describe distribution multiplied transition matrix (derived marginal distribution) project forward one timestep multiplied repeatedly series transition matrices project forward multiple timesteps Correlations calculated non-dynamically masked cells. ... argument can used define subset time evaluate case metrics calculated subset. default use timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/distribution_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a BirdFlow models ability to recreate training distributions — distribution_performance","text":"","code":"bf <- BirdFlowModels::amewoo distribution_performance(bf) #> $min_step_cor #> [1] 0.9726291 #>  #> $mean_step_cor #> [1] 0.9918336 #>  #> $min_distr_cor #> [1] 0.9478764 #>  #> $mean_distr_cor #> [1] 0.9890949 #>  #> $st_traverse_cor #> [1] 0.9863106 #>  #> $md_traverse_cor #> [1] 0.9865082 #>   # Just for prebreeding_migration distribution_performance(bf, season = \"prebreeding_migration\") #> $min_step_cor #> [1] 0.9810752 #>  #> $mean_step_cor #> [1] 0.9926383 #>  #> $min_distr_cor #> [1] 0.9742299 #>  #> $mean_distr_cor #> [1] 0.9905897 #>  #> $st_traverse_cor #> [1] 0.9547394 #>  #> $md_traverse_cor #> [1] 0.9554332 #>"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate BirdFlow model performance — evaluate_performance","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"DEPRECATED FUNCTION.  Please use distribution_performance() instead.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"","code":"evaluate_performance(x, distr_only = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"x BirdFlow object distr_only set TRUE calculate mean_distr_cor min_distr_cor metrics.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"mean_step_cor Indicates average well model project single timestep. mean correlation, across timesteps, training (ebirdst) distribution projected forward one timestep, training distribution projected timestep. min_step_cor Indicates quality worst single step projection. minimum correlation (across timesteps) single step projection training distribution training distribution projected timestep. traverse_cor Indicates well model project timesteps. correlation last distribution projected iteratively fist training distribution; last training distribution. mean_distr_cor Indicates average well marginal preserves training distributions. mean correlation training distributions distributions calculated marginals. min_distr_cor Indicates well poorest marginal preserves training distribution. minimum observed correlation marginal training distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"Calculate several correlation projected distributions ebirdst distributions used train BirdFlow model. \"Training distribution\" used describe ebirdst distributions used train BirdFlow models.  \"Marginal distribution\" describes distribution calculated row column sums marginal, joint probability matrix. \"Projected distribution\" used describe training distribution multiplied transition matrix (derived marginal distribution) project forward one timestep; multiplied repeatedly transition matrices project forward multiple timesteps. Correlations calculated non-dynamically masked cells.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"","code":"bf <- BirdFlowModels::amewoo evaluate_performance(bf) #> Warning: evaluate_performance is deprecated. Please use distribution_performance() instead. #> $mean_step_cor #> [1] 0.9918336 #>  #> $min_step_cor #> [1] 0.9726291 #>  #> $traverse_cor #> [1] 0.9863106 #>  #> $mean_distr_cor #> [1] 0.9890949 #>  #> $min_distr_cor #> [1] 0.9478764 #>"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"function converts collapsed distribution first (possibly ) dimension represents locations model expanded, raster state first two dimensions represent locations cell physical space (row, col) thus suitable plotting conversion spatial objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"","code":"expand_distr(distr, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"distr Either vector representing single distribution one value per location model matrix column vector. Higher dimensions allowed (unlikely); cases first dimension locations model. bf BirdFlow model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"expanded version distr one additional dimension, first two dimensions rows columns space (raster) replace first dimension input.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"collapsed form single distribution stored vector. value can interpreted relative abundance probability finding bird corresponding location. special case vector mostly 0's single 1 case represents single position bird group birds, concentrated distribution. Additional dimensions can represent multiple timesteps /multiple individual birds, model runs etc. location information collapsed distribution easily accessible position vector ordered based row-major ordered unmasked cells extent, R uses column-major order. May 2023 now internal function replaced rasterize_distr(format = \"numeric\").","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","title":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","text":"function determine threshold values preserves given proportion value.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","text":"","code":"find_threshold(x, p)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","text":"x vector values p proportion x wish retain","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","text":"threshold values x dropping everything smaller threshold retains least proportion p total x","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix the dead ends currently present in the model — fix_current_dead_ends","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"internal function fix_current_dead_ends() zeros row column marginal leads current dead ends, eliminating transitions existing dead end states.  tends create new dead ends process called iteratively fix_dead_ends().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"","code":"fix_current_dead_ends(bf, de)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"bf BirdFlow model de (optional) output find_dead_ends()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"BirdFlow model selected marginal rows columns zeroed .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":null,"dir":"Reference","previous_headings":"","what":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"sparsification (sparsify()) possible create models dead ends -  states can entered exited. occurs one marginal encodes transitions state next marginal transitions . functions find fix states.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"","code":"find_dead_ends(x)  fix_dead_ends(bf, max_attempts = 100)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"x BirdFlow model bf BirdFlow model max_attempts maximum number iterations try giving ","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"`find_dead_ends() returns data.frame columns: row dead end state, dead ends found empty (zero row) data.frame returned. fix_dead_ends() returns BirdFlow model additional marginal row columns zeroed . successful dead ends. also adds data.frame  fix_stats bf$metadata$sparse.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"Consider two adjacent marginals; rows second columns first correspond species distribution timestep . every location model timestep four possibilities (1) first marginal's column non-zero values second marginal's row zero: forward transition state forward transition forward dead end; (2) situation reversed first marginals column zeros second marginal's corresponding row non-zero values, backward dead end (encountered projecting backwards time); (3) zeros: model fine state dropped; (4) non-zero values corresponding state valid can reached exited projecting forward backwards. Dead ends result lost density predict() errors entered route(). Based initial testing transitions dead end often low probability routing may work time occasionally fail. error occur subsequent iteration attempting sample bunch zero probability states.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"function converts raster representation data rows columns indicate position space vector representation contains active (masked) cells row major order - starting top left proceeding left right along row.  collapsed form used projecting flow model expanded form used export, import, visualize data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"","code":"flatten_raster(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"x Either matrix representing single bird distribution array representing multiple distributions dimensions: row, col, distribution. bf BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"Either vector representing single distribution collapsed form , x represents multiple distributions,  matrix one distribution per column.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve dates component of a BirdFlow model — get_dates","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"get_dates() retrieves dates component BirdFlow model.  resulting data derived ebirdst::ebirdst_weeks added model object   preprocess_species().  truncate_birdflow() creates models subset intervals renames 1:[n_timesteps()] truncated model used data may differ ebirdst::ebirdst_weeks().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"","code":"get_dates(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"bf BirdFlow object retrieve dates .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve dates component of a BirdFlow model — get_dates","text":"data frame interval interval timestep associated date. range 1 n_timesteps().  full models equivalent week year truncated models may . date date associated interval's midpoint midpoint, star, end midpoint, start, end interval proportion total year elapsed. doy day year associated midpoint interval.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"extract distributions from BirdFlow models — get_distr","title":"extract distributions from BirdFlow models — get_distr","text":"get_distr return one distributions flattened form. single distribution returned vector; multiple columns matrix.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract distributions from BirdFlow models — get_distr","text":"","code":"get_distr(x, which = \"all\", from_marginals = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract distributions from BirdFlow models — get_distr","text":"x BirdFlow model indicates timesteps return. Can one integers indicating timesteps; character dates format year-month-day e.g. \"2019-02-25\"; Date objects;    \"\" return distributions timesteps. from_marginals TRUE x marginals distribution marginals even x also distributions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract distributions from BirdFlow models — get_distr","text":"either vector distribution single timestep matrix column distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"extract distributions from BirdFlow models — get_distr","text":"BirdFlow object stored distributions training distributions returned default unless from_marginals = TRUE case distributions calculated marginal returned. training distributions distributions calculated marginal similar.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"BirdFlow object dynamic mask controls subset active cells model active given timestep.  derived eBird Status Trends (S&T) distributions; cells zero S&T data timestep excluded model timestep, tracked dynamic mask.  dynamic mask dimensions distributions (see get_distr()) either vector n_active() single timestep matrix n_active() rows one timestep. values logical TRUE corresponding cells part model (given timestep).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"","code":"get_dynamic_mask(x, which = \"all\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"x BirdFlow object indicates timesteps return. Can one integers indicating timesteps; character dates format year-month-day e.g. \"2019-02-25\"; Date objects;    \"\" return distributions timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"vector matrix elements rows corresponding active cells model indicating whether cell included model given timestep.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"","code":"library(terra) # For plotting of spatRaster #> terra 1.7.39 bf <- BirdFlowModels::amewoo |> add_dynamic_mask() dm <- get_dynamic_mask(bf, c(1,  10, 21, 31, 42, 52)) r <- rasterize_distr(dm, bf) plot(r, legend = FALSE, mar = c(1.3, 1.3, 1.3, .3)  )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve BirdFlow metadata — get_metadata","title":"retrieve BirdFlow metadata — get_metadata","text":"get_metadata retreives information BirdFlow model: created, version eBird Status & Trends data used, whether sparsified,  etc.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve BirdFlow metadata — get_metadata","text":"","code":"get_metadata(x, what)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve BirdFlow metadata — get_metadata","text":"x BirdFlow model Indicates metadata return. defualt \"\" returns complete list. Options described details.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve BirdFlow metadata — get_metadata","text":"Metadata BirdFlow model. Potentially list.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"retrieve BirdFlow metadata — get_metadata","text":"may used options:","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve BirdFlow metadata — get_metadata","text":"","code":"library(BirdFlowModels) get_metadata(amewoo) #> $has_marginals #> [1] TRUE #>  #> $has_transitions #> [1] FALSE #>  #> $has_distr #> [1] TRUE #>  #> $n_transitions #> [1] 51 #>  #> $n_active #> [1] 1706 #>  #> $n_timesteps #> [1] 52 #>  #> $ebird_version_year #> [1] NA #>  #> $ebird_release_year #> [1] NA #>  #> $ebird_access_end_date #> [1] NA #>  #> $birdflow_preprocess_date #> [1] NA #>  #> $birdflow_model_date #> [1] \"2023-01-02 10:03:05.256454\" #>  #> $birdflow_version #> [1] 2 #>  #> $is_sparse #> [1] TRUE #>  #> $sparse #> $sparse$fix_stats #>   step pct_lost n_dead_ends #> 1    0 6.354389         172 #> 2    1 6.376854          83 #> 3    2 6.383977          37 #> 4    3 6.385986           9 #> 5    4 6.386376           1 #> 6    5 6.386384           0 #>  #> $sparse$method #> [1] \"conditional\" \"state\"       #>  #> $sparse$arguments #> $sparse$arguments$p #> [1] 0.99 #>  #>  #> $sparse$stats #>    model pct_zero pct_density_lost mean_step_cor min_step_cor traverse_cor #> 1   full  0.00000         0.000000     0.9947801    0.9831586    0.9484126 #> 2 sparse 98.94806         6.354389     0.9945607    0.9823753    0.9465323 #> 3  fixed 98.95086         6.386384     0.9945142    0.9823376    0.9464339 #>   mean_distr_cor min_distr_cor #> 1      0.9919662     0.9689286 #> 2      0.9927087     0.9685167 #> 3      0.9927038     0.9684455 #>  #> $sparse$pct_zero #> [1] 98.95086 #>  #> $sparse$pct_density_lost #> [1] 6.386384 #>  #>  get_metadata(amewoo, \"is_sparse\") #> [1] TRUE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve, crop, and transform Natural Earth data — get_naturalearth","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"convenience wrappers rnaturalearth functions. retrieve, crop, format, project Natural Earth data facilitate plotting BirdFlow spatial objects. output desired data coordinate reference system (CRS) extent x.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"","code":"get_naturalearth(   x,   type,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   country,   keep_buffer = FALSE,   force_old_method = FALSE,   ... )  get_states(   x,   country,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   keep_buffer = FALSE )  get_coastline(   x,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   keep_buffer = FALSE )  get_countries(   x,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   keep_buffer = FALSE )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"x BirdFlow, terra::SpatRaster, sf::sf, object can call terra::ext() terra::crs(). type type data retrieve. One \"coastline\", \"country\", \"states\" data included rnaturalearth; value accepted ne_download(). scale scale data return. Ignored type \"states\", otherwise passed one ne_download(). ne_coastline(), ne_countries(). Valid values 110, 50, 10, 'small', 'medium', 'large'. buffer buffer degrees (latitude longitude) add extent x prior cropping Natural Earth data WGS84. needed transformation CRS x data cover extent x. keep_attributes FALSE, default, attribute columns dropped facilitate clean plotting. country retrieving states get_states() get_naturalearth(type = \"states\") used select country. omitted, states countries returned. keep_buffer FALSE, default, transforming Natural Earth data cropped precise extent x. Set  TRUE keep buffer - useful overlaying Natural Earth data existing base R plot. force_old_method internal testing. default best uses.  TRUE use back transformed bounding box method even projection covered \"new\" cut seam method. ... arguments passed ne_download(). Possibly want use category = \"physical\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"sf object Natural Earth data CRS x.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"get_naturalearth() work called functions. two distinct calculation methods. Mollweid, Lambert Azimuthal Equal Area,  Albers Equal Area, Lambert Conformal Conic projections cut seam: Find longitude projection center (lon_0 proj4 string) determine longitude seam. Clip narrow (1 m) strip Natural Earth data transforming (WGS84) seam. Transform CRS x. now artifact free object containing global data set minus narrow strip seam. Crop destination extent x, keep_buffer = TRUE, extent plus approximate equivalent buffer. work well extent (including global) CRS based covered projections. projections back transform bounding box clip: Convert corners bounds x object WGS84. adds buffer (buffer) converted corners important guarantee still cover extent transform. Check see bounds wrap seam (180 deg meridian) break bounding box two . Crop bounding box boxes. Project cropped section x's CRS. Combine pieces one object. keep_buffer = FALSE crop exact extent x. steps usually prevent artifacts caused polygons lines shifted across bounds CRS. However, work extents projections particular unlikely work polar projections extents cover entire globe. cases fails setting buffer zero may easy solution. many projections method 1 variant work. may eventually cover projections first method. encounter use case work may submit issue; please include output crs(x) ext(x). get_states() requires rnaturalearthhires. Install : install.packages(\"devtools\") # already  devtools::install_github(\"ropensci/rnaturalearthhires\")","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"","code":"bf <- BirdFlowModels::amewoo  coast <- get_coastline(bf)   if (FALSE) {  library(terra)  library(sf)  plot(rast(bf, 1))  plot(coast, add = TRUE)   }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to determine how much padding to use with transition\nnumbers. — get_timestep_padding","title":"Internal function to determine how much padding to use with transition\nnumbers. — get_timestep_padding","text":"Return level padding used timestep numbers transition marginal names.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to determine how much padding to use with transition\nnumbers. — get_timestep_padding","text":"","code":"get_timestep_padding(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to determine how much padding to use with transition\nnumbers. — get_timestep_padding","text":"bf","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to determine how much padding to use with transition\nnumbers. — get_timestep_padding","text":"integer indicating much pad numbers transtion names.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_timestep_padding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function to determine how much padding to use with transition\nnumbers. — get_timestep_padding","text":"far (June 2023) BirdFlow models padding used timesteps marginal transition names always 2, necessary support 52 weeks (e.g. T_01-02) , date, determined number timesteps model. idea constrain models less 100 transitions hypothetical future decided say, , 3 day timesteps instead weekly. June 2023 added ability truncate models (part year), want change level padding truncating, instead decided store padding metadat$timestep_padding. function designed work model regardless whether padding stored metadata.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a transition matrix from a BirdFlowR model — get_transition","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"function retrieves transition matrix BirdFlow object, possibly calculating marginal.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"","code":"get_transition(x, transition)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"x BirdFlow object transition transition code, e.g. \"T_01-02\"","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"transition matrix","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"get_transition() construct transition matrix marginals x transitions, return relevant stored transition matrix . format transition code \"T_[]-[]\" [] [] timesteps padded zeros. Direction important; \"T_03-04\" represents transition backward time. transition matrices structured multiply matrix distribution project either forward backwards. one distribution projected stored columns matrix dimensions(n_active(), n_distr()). Given marginal cell [, j] represents probability bird state prior timestep state j next, generate forward transition matrix divide row marginal sum transpose. Backwards transitions matrices generated dividing column sum, without transposing.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"function calculates square, distance matrix n_active() cells side. cell represents distance row index colum index treated locations state space; e.g. cell  [3, 8] represents distance locations 3 8 state space vector.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"","code":"great_circle_distances(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"n x n matrix containing pairwise distances kilometers every active cell BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"","code":"# Calculate great circle distance matrix library(terra) bf <- BirdFlowModels::rewbla gs <- great_circle_distances(bf)  # The above is all you need to use the function. # The rest of this is an exercise to visualize the error in CRS distances  # Compare to euclidean distances in projected CRS space i <- seq_len(n_active(bf)) xy <- as.data.frame(i_to_xy(i, bf)) eu <- as.matrix(dist(xy)) / 1000  # euclidean in CRS (km)  error_prop <- abs(gs - eu) / gs error_prop[is.nan(error_prop)] <- 0  mean_error <- apply(error_prop, 1, mean) # mean error for cell max_error <-  apply(error_prop, 1, max)  # max error for cell  # Calculate maximum error lines for each cell mel <- data.frame(i1 = 1:n_active(bf), i2 = apply(error_prop, 1, which.max)) xs <- t(cbind(i_to_x(mel$i1, bf), i_to_x(mel$i2, bf))) ys <- t(cbind(i_to_y(mel$i1, bf), i_to_y(mel$i2, bf)))  # Plot maximum error for each cell and a line to the cell where the distance # had that error. plot(rasterize_distr(as.numeric(max_error), bf)) title(main = \"Max proportional error\") matlines(xs, ys, col = rgb(0, 0, 0, .25), lty = 1, lwd = 1) mtext(\"lines connect cells to the cell for there is the greatest proportional error in distance\",      line = 0, cex = 0.7)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a BirdFlow object have certain compoenents — has","title":"Does a BirdFlow object have certain compoenents — has","text":"functions return information contents BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a BirdFlow object have certain compoenents — has","text":"","code":"has_marginals(x)  has_transitions(x)  has_distr(x)  has_dynamic_mask(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a BirdFlow object have certain compoenents — has","text":"x BirdFlow model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a BirdFlow object have certain compoenents — has","text":"logical indicating BirdFlow model relevant element","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Import BirdFlow models from HDF5 files — import_birdflow","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"function imports BirdFlow model HDF5 (Hierarchical Data Format version 5) file. workflow first use preprocess_species() download format data model fitting, producing HDF5 file; use BirdFlow Python software fit model add marginals hyperparameters HDF5 file; , finally import model import_birdflow().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"","code":"import_birdflow(hdf5, ..., version)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"hdf5 Path HDF5 file containing fitted BirdFlow model. ... Arguments passed version specific internal function. Likely used version 1 takes two additional arguments: tiff Path model geotiff species eBird species code.  appear species_code column data.frame returned auk::get_ebird_taxonomy() version (optional) force reading BirdFlow models particular version. Normally, determined metadata HDF5 file.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"importing may want call sparsify() reduce object size.  plan many calls route() predict() call build_transitions() well.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"hdf-file-version","dir":"Reference","previous_headings":"","what":"HDF5 file version","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"HDF5 BirdFlow model files internal version number incremented major changes HDF5 file structure. file version retained imported object. Version 1 predates BirdFlowR preprocessing contains marginals python objects, importing requires associated TIFF file extent distribution data. version number (1) kept \"/version\" within HDF5 file. Version 2 first version includes preprocessing BirdFlowR. include dynamic masking.  version number (2) stored  \"/metadata/birdflow_version\".  version 2 files include hyper parameters HDF5 read R. Version 3 marks transition dynamic masking, HDF5 created preprocessing gained \"/geom/dynamic_mask\" \"/distances\"  (great circle distance matrix).  version 2 version stored \"/metadata/birdflow_version\" unlike previous versions R package version preprocessing saved character format \"/metdata/birdflowr_version\". version 3 files imported R model fits hyperparameters saved $metadata$hyperparameters (list).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"import BirdFlow model from an hdf5 file — import_birdflow_v2","title":"import BirdFlow model from an hdf5 file — import_birdflow_v2","text":"function imports BirdFlow model data HDF5 file written python. works version 2 hdf5.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import BirdFlow model from an hdf5 file — import_birdflow_v2","text":"","code":"import_birdflow_v2(hdf5)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import BirdFlow model from an hdf5 file — import_birdflow_v2","text":"hdf5 Path hdf5 file","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import BirdFlow model from an hdf5 file — import_birdflow_v2","text":"BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":null,"dir":"Reference","previous_headings":"","what":"import BirdFlow model from an hdf5 file — import_birdflow_v3","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"function imports BirdFlow model data HDF5 file written python. works version 2 hdf5.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"","code":"import_birdflow_v3(hdf5)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"hdf5 Path HDF5 file","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to convert among spatial indices — index conversions","title":"Functions to convert among spatial indices — index conversions","text":"functions convert among different ways referencing locations BirdFlow models output. convert among spatial coordinates (x y), raster row col indices, index along location vector. latlon_to_xy() xy_to_latlon() convert WGS 1984 latitude longitude x y coordinates BirdFlow object's coordinate reference system (CRS).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to convert among spatial indices — index conversions","text":"","code":"x_to_col(x, bf)  y_to_row(y, bf)  row_to_y(row, bf)  col_to_x(col, bf)  i_to_rc(i, bf)  i_to_row(i, bf)  i_to_col(i, bf)  i_to_x(i, bf)  i_to_y(i, bf)  i_to_xy(i, bf)  rc_to_i(row, col, bf)  xy_to_i(x, y, bf)  latlon_to_xy(lat, lon, bf)  xy_to_latlon(x, y, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to convert among spatial indices — index conversions","text":"x, y x y coordinates BirdFlow model's CRS. typically represents easting northing meters. functions require x y two column matrix data.frame containing x y columns order can passed x case y omitted. bf BirdFlow model row, col row column index cell BirdFlow model associated raster data. Alternatively, two column matrix data.frame containing row column indices columns 1 2 respectively can passed row case col argument omitted. index along state vector contains data unmasked cells. lat, lon latitude longitude WGS 1984 (EPSG:4326). two column matrix data frame can also passed lat.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to convert among spatial indices — index conversions","text":"x_to_col(x, bf) y_to_row(y, bf) return column row index x y coordinate falls within. row_to_y(row, bf) col_to_x(col, bf) return y x coordinate center row column. i_to_row(, bf) i_to_col(, bf) return row column index corresponding vector state index, . i_to_rc(, bf) returns two column matrix row column index raster corresponding index, vector state. i_to_x(, bf) i_to_y(, bf) return x y coordinate vector state index, . i_to_xy(, bf) returns two column matrix x y coordinates corresponding index, vector state space. rc_to_i(row, col, bf) xy_to_i(x, y, bf) return state space index corresponding x y coordinates row column indices. latlon_to_xy(lat, lon, bf) returns two column matrix x y coordinates corresponding supplied latitude longitude. output CRS bf (crs(bf)). xy_to_latlon(x, y, bf) returns two column matrix latitude longitude points WGS84 given coordinates BirdFlow object's CRS.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to convert among spatial indices — index conversions","text":"general made functions mirror NA input output; functions return rows, columns, index () return NA input within extent; () within active cells. CRSs longitude translates x coordinate latitude y coordinate. traditional order coordinates lat lon; row col, x y consistent, still used , .e. lat, row, y generally correlated, first, first, second argument order.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate log likelihoods of observed bird movements — interval_log_likelihood","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"function calculates log likelihoods inferred bird movement based two observation points (time space). second point must different timestep (week) first, location can remain .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"","code":"interval_log_likelihood(intervals, observations, bf, one_at_a_time = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"intervals data.frame describes intervals (movements stationary periods) log likelihood calculated referencing id column observations. observation id starting location date observation id ending location date ... additional columns included returned object used function. probably include interval ID. observations data.frame describing observations birds row individual bird, location, date. id Unique observation identifier lon , lat longitude latitude observation WGS84 (EPSG:4326) date date associated observation. See lookup_timestep() valid formats. ... columns allowed, ignored. bf BirdFlow object one_at_a_time Mainly debugging. FALSE, default, intervals start timestep processed together, otherwise interval processed separately. Results identical, TRUE uses less memory slower.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"intervals table returned  along new columns: log_likelihood model derived log likelihood interval null_ll log likelihood interval based null model assumes eBird S&T distribution species end point lag number timesteps (likely weeks) start end interval exclude TRUE log likelihood calculated interval, case also TRUE one remaining columns indicating . not_active TRUE start end point within model mask dynamic_mask TRUE ebirds S&T assigned zero probability start end point associated date therefore excluded dynamic mask state based sparsification sparse TRUE model assigned zero probability interval due reasons. likely due sparsification eliminating possible routes start end point. same_timestep TRUE start end timesteps , lag zero bad_date TRUE date parsed, bf partial model date falls uncovered portion year returned table rows 1:1 correspondence input intervals table.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"core function calling predict() distribution starting location hot (value 1) locations zero extracting probability ending week location. log probability returned log_likelihood column. null model assumes ebird S&T distribution thus null_ll column contains log probability density S&T distribution ending week location. observations intervals separated two tables allow flexibility assigning evaluating intervals.  tracking data frequency observations much greater weekly S&T data lot choices made function leaves decisions user.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"","code":"bf <- BirdFlowModels::rewbla observations <- BirdFlowModels::rewbla_observations intervals <- BirdFlowModels::rewbla_intervals intervals <- intervals[1:20, ] # toy example intervals  <- interval_log_likelihood(intervals, observations, bf) head(intervals, 3) #>           bird_id  from    to interval_id log_likelihood   null_ll lag exclude #> 1017 B19221769152  2223  2224        1017      -3.157935 -4.453952  47   FALSE #> 4775 B77724064244 10149 10150        4775      -3.429942 -4.870969  50   FALSE #> 2177 B29252852992  4625  4626        2177      -5.135462 -5.816720  21   FALSE #>      not_active dynamic_mask sparse same_timestep bad_date #> 1017      FALSE        FALSE  FALSE         FALSE    FALSE #> 4775      FALSE        FALSE  FALSE         FALSE    FALSE #> 2177      FALSE        FALSE  FALSE         FALSE    FALSE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Are locations and distributions covered by the model for the given time — is_location_valid","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"location time valid model non zero probability  movement location time. invalid state either zero probability movement , covered model . Similarly distributions valid probability cells movement modeled.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"","code":"is_location_valid(bf, i, x, y, timestep, date)  is_distr_valid(bf, distr, timestep, date, return_mask = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"bf BirdFlow object state space index (location) x x coordinates bf's CRS (crs(bf)) y y coordinate timestep timestep date date format accepted lookup_timestep() distr one distributions vector matrix form representing probability active cell model. return_mask TRUE return mask dimensions distr TRUE cells can valid non-zero values. conditioned timestep associated distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"logical vector, 'TRUEif validFALSEotherwise values input location distribution. Seereturn_mask` exception.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"is_location_valid() 2 ways inputting locations. one used: either vector location indices (see xy_to_i()), x y. functions time shold input either timestep date. number timesteps dates either 1 match number locations distributions; singular applied . location invalid following apply: location model extent location correspond active cell model; masked static mask. location valid state given timestep date; excluded dynamic mask state sparsification see sparsify(). timestep valid, date associated timestep. second applies BirdFlow models cover whole year. distribution invalid similar reasons applied locations non-zero values.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"","code":"bf <- BirdFlowModels::amewoo timestep  <- 3  # Sample two valid locations from a distribution distr <- get_distr(bf, timestep, from_marginals = TRUE) locs <- sample_distr(distr, n = 2) i <- apply(locs, 2, function(x) which(as.logical(x))) is_location_valid(bf, i, timestep = timestep) #> [1] TRUE TRUE  # Sample a few invalid locations i <- sample(which(distr == 0), 2) is_location_valid(bf, i, timestep = timestep) #> [1] FALSE FALSE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the index to a remote model collection — load_collection_index","title":"Load the index to a remote model collection — load_collection_index","text":"Load collection index current model collection.  function return --date index current BirdFlow collection. caches index locally update cached version --date.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the index to a remote model collection — load_collection_index","text":"","code":"load_collection_index(   update = TRUE,   collection_url = birdflow_options(\"collection_url\") )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the index to a remote model collection — load_collection_index","text":"update TRUE (default) index cached model file checked server's version make sure --date downloaded . FALSE neither index model checked. Set FALSE downloading model(s) need want make sure model change analysis (even updated server); working offline. collection_url url collection. path base directory (index.html file).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the index to a remote model collection — load_collection_index","text":"data frame row every model collection.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_collection_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load the index to a remote model collection — load_collection_index","text":"collection default main BirdFlow model collection users need set . local cache directory (collections) defaults birdflow_options(\"cache\") cache directory current collection subdirectory.  options can changed duration session birdflow_options(), defaults suitable users.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Load BirdFlow models from a collection — load_model","title":"Load BirdFlow models from a collection — load_model","text":"Load named model current (likely default) model collection. model exist local cache --date cache updated prior loading.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load BirdFlow models from a collection — load_model","text":"","code":"load_model(   model,   update = TRUE,   collection_url = birdflow_options(\"collection_url\") )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load BirdFlow models from a collection — load_model","text":"model model name load update TRUE (default) index cached model file checked server's version make sure --date downloaded . FALSE neither index model checked. Set FALSE downloading model(s) need want make sure model change analysis (even updated server); working offline. collection_url url collection. path base directory (index.html file).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load BirdFlow models from a collection — load_model","text":"designated BirdFlow model returned.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/load_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load BirdFlow models from a collection — load_model","text":"","code":"if (FALSE) {   index <- load_collection_index()  bf <- load_model(index$model[1])  }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"Retrieve timesteps associated season species modeled BirdFlow object, possibly buffer (timesteps) added . Seasons dates ebirdst::ebirdst_runs directly accessible species_info().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"","code":"lookup_season_timesteps(x, season, season_buffer = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"x BirdFlow object season one seasons returned species_info(), season alias,  \"\" timesteps model season_buffer number extra timesteps add beginning end season.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"series integers indicating timesteps correspond (possibly buffered) season.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"season-names-and-aliases","dir":"Reference","previous_headings":"","what":"Season names and aliases","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"season can '', one four seasons, alias listed .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"","code":"bf <- BirdFlowModels::rewbla lookup_season_timesteps(bf, \"breeding\", season_buffer = 0) #>  [1] 18 19 20 21 22 23 24 25 26 27 28 29 30 31"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":null,"dir":"Reference","previous_headings":"","what":"lookup timestep — lookup_timestep","title":"lookup timestep — lookup_timestep","text":"function returns timestep timesteps associated x particular BirdFlow model, x represents dates timesteps various formats.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lookup timestep — lookup_timestep","text":"","code":"lookup_timestep(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lookup timestep — lookup_timestep","text":"x character object representing date year-month-day e.g. \"2023-03-29\", date object (Date, POSIXct, POSIXlt), numeric timestep, character representing timestep e.g. \"t1\", \"\" timesteps model. bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lookup timestep — lookup_timestep","text":"vector timesteps corresponding elements x","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"lookup timestep — lookup_timestep","text":"far BirdFlow objects timesteps corresponding weeks year matching S&T timesteps. However, likely add ability make BirdFlow objects model part year. timestep values necessarily match weeks. example model covers Week 6, 20  timesteps 1 15. x numeric assumed already timestep. useful using function internally resolve arguments functions like route(), predict(), get_distr().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"lookup timestep — lookup_timestep","text":"","code":"bf <- BirdFlowModels::amewoo lookup_timestep(c(\"2001-3-23\", \"2022-12-05\"), bf) #> [1] 12 49"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup a sequence of timesteps — lookup_timestep_sequence","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"lookup_timestep_sequence() returns ordered vector timesteps, possibly crossing year boundary.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"","code":"lookup_timestep_sequence(   x,   season = NULL,   start = NULL,   end = NULL,   direction = NULL,   season_buffer = 1,   n_steps = NULL )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"x BirdFlow object season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"integer sequence timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"lookup_timestep_sequence() unlikely called directly arguments likely passed functions like predict() route(). Whether called directly via another function lookup_timestep_sequence() flexible function allows several ways defining sequence. Dates.  Input character dates (eg \"2023-06-21\") date objects start end. direction determined dates direction optional.  direction used error thrown conform direction implicit dates. Timesteps.  Use numeric start end indicate starting ending timestep.  Since many models circular direction used determine whether go forward backwards start end; direction default forward. Season. Input season name (alias) season.  \"\" can also used indicate timesteps, case cyclical models last timestep match first.  season used (\") season_bufffer indicates number timesteps extend season .  default 1 means sequence start 1 timestep (week) end 1 timestep dates season returned [species_info()]. direction followed defaults forward. Start offset. Use start timestep date input n_steps create sequence starts start proceeds n_steps direction default \"forward\". returned object n_steps + 1 timesteps sequence. Default season start NULL (omitted) default return timesteps model, equivalent season = \"\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"","code":"bf <- BirdFlowModels::rewbla  # 1. Dates - order of dates determines direction lookup_timestep_sequence(bf, start = \"2023-12-1\", end = \"2024-01-20\") #> [1] 48 49 50 51 52  1  2  3 lookup_timestep_sequence(bf, start = \"2024-01-20\", end = \"2023-12-1\") #> [1]  3  2  1 52 51 50 49 48  # 2. Timesteps - direction defaults to \"forward\" lookup_timestep_sequence(bf, start = 50, end = 3) #> [1] 50 51 52  1  2  3 lookup_timestep_sequence(bf, start = 50, end = 3, direction = \"backward\") #>  [1] 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 #> [26] 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  # 3. Season - direction defaults to \"forward\", season_buffer defaults to 1 lookup_timestep_sequence(bf, \"prebreeding_migration\") #>  [1]  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 lookup_timestep_sequence(bf, \"prebreeding_migration\", season_buffer = 0,                          direction = \"backward\") #>  [1] 17 16 15 14 13 12 11 10  9  8  7  6  5  # 4. start & n_steps  (start can be date or timestep) lookup_timestep_sequence(bf, start = \"2022-04-11\", n_steps = 5) #> [1] 15 16 17 18 19 20 lookup_timestep_sequence(bf, start = 10, n_steps = 5) #> [1] 10 11 12 13 14 15  # 5.  No time arguments, equivalent to season = \"all\" lookup_timestep_sequence(bf) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #> [51] 51 52  1 lookup_timestep_sequence(bf, season = \"all\", direction = \"backward\") #>  [1]  1 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 #> [26] 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4 #> [51]  3  2  1"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"private functionlookup_transitions() returns ordered vector transition names connect start end. start end dates order determines whether transitions flow forward backward time.  timesteps direction argument used indicate whether project \"forward\" \"backward\" time possibly passing year boundary.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"","code":"lookup_transitions(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"character vector named transitions required get start  end","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"Transitions named \"T_[]-[]\" [] [] timesteps padded zeros. Direction important; \"T_03-04\" represents transition backward time.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_cache_readme.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to create or update readme files within the local\nBirdFlow model cache. — make_cache_readme","title":"Internal function to create or update readme files within the local\nBirdFlow model cache. — make_cache_readme","text":"called anytime new files downloaded cache load_collection_index() load_model().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_cache_readme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to create or update readme files within the local\nBirdFlow model cache. — make_cache_readme","text":"","code":"make_cache_readme(collection_url = birdflow_options(\"collection_url\"))"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_cache_readme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to create or update readme files within the local\nBirdFlow model cache. — make_cache_readme","text":"Nothing returned","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"make_marginal_index() called [import_birdflow()] truncate_birdflow() add marginal index BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"","code":"make_marginal_index(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"data.frame facilitates looking marginals transition names.  columns: starting timestep transition (direction matters) ending timestep transition direction transition direction, either \"forward\", \"backward\" transition transition name e.g. \"T_02-02\" marginal marginal name e.g. \"M_01-02\", order matches forward transition order, smaller number generally first except last marginal circular model eg \"M_52-01\"","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_marginal_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function to make a marginal index for a BirdFlow object. — make_marginal_index","text":"n_transitions(), n_timesteps(), is_cyclical(), get_timestep_padding() need work object, means metadata$n_timesteps, metatdata$n_transitions, metadata$timestep_padding  properly set. marginals exist yet.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to determine the extent of data in eBird rasters. — make_mask","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"function returns logical single layer SpatRaster TRUE x non-zero values layer. NA count non-zero.  result cropped extent data x. used Birdflow preprocess data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"","code":"make_mask(x, count = FALSE, assume_no_na = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"x SpatRaster, typically multilayered containins distribution species time. count TRUE returned value count non-zero cells raster location (accross timesteps). Otherwise logical returned, TRUE indicate non-zero value. assume_no_na Set TRUE NA values raster slight efficiency improvement.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"single layer SpatRaster CRS, alignment, resolution x; cropped extent data x.  count = FALSE result logical TRUE non-zero cells layer x FALSE otherwise.  count = TRUE result integer count number timesteps cell appears (0 52 given weekly steps).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function to determine the extent of data in eBird rasters. — make_mask","text":"make_mask private function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_pyear_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate breakpoints in proportion of year values that correspond to nice\ndates — make_pyear_breaks","title":"Generate breakpoints in proportion of year values that correspond to nice\ndates — make_pyear_breaks","text":"internal function used plot_routes() determine set breaks (labels) color scale. color corresponds dates represented proportion year.  functions picks breaks map quarters year, first month, first fifteenth month, ebirds S&T nominal weeks. Choosing based method closest target number breaks (target_n).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_pyear_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate breakpoints in proportion of year values that correspond to nice\ndates — make_pyear_breaks","text":"","code":"make_pyear_breaks(range, bf, target_n = 8, hpy = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_pyear_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate breakpoints in proportion of year values that correspond to nice\ndates — make_pyear_breaks","text":"range range proportion year (PY) half proportion year (HPY) values breaks calculated. bf BirdFlow object (just used $dates component) target_n target number breaks as_hpy TRUE treat range HPY. FALSE PY.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_pyear_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate breakpoints in proportion of year values that correspond to nice\ndates — make_pyear_breaks","text":"sequence break points pyear units.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"marginal statistics — marginal_stats","title":"marginal statistics — marginal_stats","text":"Internal functions calculate sum marginals percent marginal values zero.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"marginal statistics — marginal_stats","text":"","code":"marginal_stats(bf)  sum_marginals(bf)  calc_pct_zero(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"marginal statistics — marginal_stats","text":"bf BirdFlowModel","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"marginal statistics — marginal_stats","text":"marginal_stats() returns list sum sum marginals pct_zero percent values across marginals zero. sum_marginals() returns sum marginals. calc_pct_zero() returns percent marginal values zero","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"marginal statistics — marginal_stats","text":"used sparsify fix_dead_ends.  marginal_stats slightly efficient calling two functions independently.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/new_BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","title":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","text":"Private function create empty shell BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/new_BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","text":"","code":"new_BirdFlow()"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/new_BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","text":"empty BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bird movement vectors — plot_movement_vectors","title":"Plot bird movement vectors — plot_movement_vectors","text":"plots mean movement every cell BirdFlow model given starting time, based transition probabilities following transition.  arrow starts cell center ends average location projected Birds cell. line width alpha (transparency) set arrows visual weight higher probability bird starting location time.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bird movement vectors — plot_movement_vectors","text":"","code":"plot_movement_vectors(bf, start = 1, direction = \"forward\", mv)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bird movement vectors — plot_movement_vectors","text":"bf BirdFlow object start starting timestep transition modeled direction \"forward\" default. Set \"backward\" calculate vectors transition backwards time. mv optional primarily internal use animate_movement_vectors() allows explicitly providing movement vectors data frame, case start direction ignored.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bird movement vectors — plot_movement_vectors","text":"object inherits classes gg ggplot can plotted print().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot bird movement vectors — plot_movement_vectors","text":"Importantly, visual representation transitions encoded model, average movement bird given cell given point time, involve birds starting cell birds passing starting locations.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bird movement vectors — plot_movement_vectors","text":"","code":"bf <- BirdFlowModels::amewoo plot_movement_vectors(bf, start = 7)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Routes: — plot_routes","title":"Plot Routes: — plot_routes","text":"Plot routes lines color indicating passage time dot size indicating length stay stop.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Routes: — plot_routes","text":"","code":"plot_routes(   routes,   bf,   facet = FALSE,   max_stay_len = NULL,   use_seasonal_colors = TRUE,   pal = NULL,   barheight = 8,   route_linewidth = 0.85,   dot_sizes = c(1.1, 3.5),   coast_linewidth = 0.25 )  # S3 method for BirdFlowRoutes plot(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Routes: — plot_routes","text":"routes output route() similarly structured data frame. bf, x BirdFlow object. facet TRUE use ggplot2::facet_wrap() show route separate subplot. max_stay_len Used scale stay length dots. NULL (default) set maximum \"stay_len\" value routes. Set manually keep dot scaling consistent across multiple plots. use_seasonal_colors TRUE color scale uses blues, greens, yellows, reds, winter, spring, summer, fall used consistent mapping dates colors regardless range dates plotted. FALSE data plotted using full color scale. pal color palette use plotting whe use_seasonal_cols FALSE. Defaults viridisLite::viridis(n = 5). barheight height color gradient legend bar.  Passed ggplot2::guide_colorbar() barheight argument. Depending output resolution plot size may need adjusted. Can take number output ggplot2::unit(). route_linewidth Line width used routes. dot_sizes Two numbers indicating smallest largest dot sizes used represent stay length. coast_linewidth Line width used coastlines. ... Passed plot_routes()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Routes: — plot_routes","text":"ggplot object. Use print() display .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Routes: — plot_routes","text":"plot.BirdflowRoutes calls plot_routes(). 6/13/2023 route() returns object class BirdFlowRoutes data frame extra attributes tacked . route() returns data frame like object contains data formerly points component columns described , think finalized. However, whether keep S3 class whether keep extra attributes experimental. want defensive use experimental aspects call .data.frame(rts) convert standard data.frame.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Routes: — plot_routes","text":"","code":"bf <- BirdFlowModels::amewoo n <- 10 rts <- route(bf, n, season = \"prebreeding\")  # Multiple routes on one plot plot_routes(rts, bf)   # One panel per route plot_routes(rts[rts$route_id %in% 1:4, ], bf, facet = TRUE)   # Returned plot object can be edited # Here we change the title and add an additional sf # layer with country boundaries library(ggplot2) p <- plot_routes(rts, bf) +  ggtitle(paste0(species(bf), \" (with countries)\")) +  geom_sf(data = get_countries(bf),  inherit.aes = FALSE,  fill = NA) +  coord_sf(expand = FALSE) #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. p  if (FALSE) { # Use alternate color palettes plot_routes(rts, bf,  use_seasonal_colors = FALSE )  plot_routes(rts, bf, use_seasonal_colors = FALSE, pal = c(\"red\", \"yellow\", \"blue\")) }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict bird distributions — predict.BirdFlow","title":"Predict bird distributions — predict.BirdFlow","text":"predict() projects bird distributions future past. Given initial distribution time period specified via ..., predict() generates probability distributions timestep.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict bird distributions — predict.BirdFlow","text":"","code":"# S3 method for BirdFlow predict(object, distr, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict bird distributions — predict.BirdFlow","text":"object BirdFlow model object distr starting distribution ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict bird distributions — predict.BirdFlow","text":"multiple starting distributions input matrix result array dimensions: location, distribution, time. one input distribution result matrix dimensions: location time.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":null,"dir":"Reference","previous_headings":"","what":"predict the number of parameters based on resolution — predict_params","title":"predict the number of parameters based on resolution — predict_params","text":"function called preprocess_species() predicts many parameters model likely different resolution given set stats number cells area timestep current resolution, calculated calc_abundance_stats()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predict the number of parameters based on resolution — predict_params","text":"","code":"predict_params(a_stats, res, adjustment = 0.4)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predict the number of parameters based on resolution — predict_params","text":"a_stats output calc_abundance_stats() used component area vector area square meters unmasked cells timestep. res cell (presumed square) resolution km. adjustment used","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predict the number of parameters based on resolution — predict_params","text":"estimated number parameters given resolution res","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"predict the number of parameters based on resolution — predict_params","text":"predict_params() calculates preliminary estimate based inaccurate assumption area covered cells two resolutions. However, changing resolution fine cells underlying occupied coarse cells occupied thus increasing resolution number cells underestimated decreasing resolution overestimated. amount bias depends configuration occupied cells fragmented occupied areas resulting greater bias. adjustment allows compensating bias. adjustment multiplied proportional change resolution: (res2 - res1)/res1 initial area based estimate (possibly negative) result added area based estimate. example doubling resolution proportional change 1  adjustment 0.35 end adding 35% initial estimate. Conversely halving resolution proportional change -.5 end subtracting 17.5% estimate.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"Write template BirdFlow object hdf5 file based distribution data downloaded ebirdst. object complete except marginals transitions.  Use ... truncate model part year.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"","code":"preprocess_species(   species = NULL,   out_dir = NULL,   res = NULL,   hdf5 = TRUE,   overwrite = TRUE,   crs = NULL,   clip = NULL,   max_params = NULL,   gpu_ram = 12,   skip_quality_checks = FALSE,   ... )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"species species format accepted ebirdst::get_species() out_dir output directory, files written . Required unless hdf5 FALSE.  File names created incorporate species code, resolution, eBird version year. res target resolution BirdFlow model kilometers. res NULL (default) resolution results less max_params parameters used, also minimizing resolution limiting number significant digits. hdf5 TRUE (default) hdf5 file exported. overwrite TRUE (default) pre-existing output files overwritten. FALSE pre-existing files result error. crs coordinate reference system (CRS) use.  Defaults custom projection eBird assigned species - see ebirdst::load_fac_map_parameters()). interpreted terra::crs() generate well known text representation CRS. clip polygon path file containing polygon. must CRS either SpatVector() object produce one called vect(clip) max_params maximum number fitted parameters BirdFlow model contain. Ignored res NULL.  Otherwise resolution chosen yields many fitted parameters. See gpu_ram default way setting max_params res. Note: reduction paramters resulting truncation (see ...) factored calculation. gpu_ram Gigabytes ram GPU machine fit models. res NULL max_params NULL used estimate max_paramswhich , turn, used determine resolution. Ignored either res max_params set. skip_quality_checks TRUE preprocess species even four ranges modeled (based ebirdst_runs()). ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"returns BirdFlow model object lacks marginals, otherwise complete.  suitable fitting BirdFlowPy.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"maximum-number-of-parameters","dir":"Reference","previous_headings":"","what":"Maximum number of parameters","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"maximum number parameters can fit machine dependent. 2023-02-10 tested different resolutions \"amewoo\" identified bounds maximum. number parameters number unmasked cells first timestep + total number cells marginals calculated dynamic mask. gpu_ram used (res max_parameters ) max_parameters set 23,224,801 * gpu_ram (lower two values table ). heuristic determine resolution given maximum number parameters must estimate number cells covered data different resolution, noisy process, iteratively tries find smallest resolution exceed max_params rounds slightly larger resolution (fewer parameters).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"","code":"if (FALSE) {   bf <- preprocess_species(\"amewoo\", tiff = FALSE, hdf5 = FALSE )  plot(rasterize_distr(get_distr( bf, c(1, 26)), bf))  # Create clip polgyon as an sf object # Use the extent rectangle but with western edge moved in # The clip can be anything that terra::vect will process into a polygon e <- ext(bf) e[1] <- -1500000 coords <- matrix(c(e[1], e[3],                    e[1], e[4],                    e[2], e[4],                    e[2], e[3],                    e[1], e[3]), ncol = 2, byrow = TRUE) sfc <- st_sfc(st_polygon(list(coords)), crs = crs(bf)) clip <- st_sf(data.frame(id = 1, geom = sfc))  bfc <- preprocess_species(\"amewoo\", tiff = FALSE,                          hdf5 = FALSE, clip = clip ) # clipped bird flow   plot(rasterize_distr(get_distr(bfc, 1), bfc))   }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Print BirdFlow models — print.BirdFlow","title":"Print BirdFlow models — print.BirdFlow","text":"print method BirdFlow objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print BirdFlow models — print.BirdFlow","text":"","code":"# S3 method for BirdFlow print(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print BirdFlow models — print.BirdFlow","text":"x BirdFlow object ... arguments passed methods","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print BirdFlow models — print.BirdFlow","text":"x returned invisibly unchanged","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlowRoutes.html","id":null,"dir":"Reference","previous_headings":"","what":"Print BirdFlow routes — print.BirdFlowRoutes","title":"Print BirdFlow routes — print.BirdFlowRoutes","text":"print method BirdFlowRouteq objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlowRoutes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print BirdFlow routes — print.BirdFlowRoutes","text":"","code":"# S3 method for BirdFlowRoutes print(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlowRoutes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print BirdFlow routes — print.BirdFlowRoutes","text":"x BirdFlowRoutes object ... arguments passed methods","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlowRoutes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print BirdFlow routes — print.BirdFlowRoutes","text":"x returned invisibly unchanged","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/process_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"process_rasters — process_rasters","title":"process_rasters — process_rasters","text":"Internal function process rasters ebirds status trends use BirdFlow model. Called preprocess_species() sufficiently complicated justify separate function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/process_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"process_rasters — process_rasters","text":"","code":"process_rasters(   res,   crs,   download_species,   sp_path,   clip,   project_method,   download_patterns )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/process_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process_rasters — process_rasters","text":"res Output resolution kilometers download_species species code used downloading ebirds S&T data, might \"example_data\" otherwise standard species code. sp_path path used downloading species data - passed ebirdst functions. clip polygon indicating area process NULL process entire species range. project_method Method use reprojecting. Set locally code within preprocess_species()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/process_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process_rasters — process_rasters","text":"list distr, uci, lci species distribution, upper lower condfidence intervals distribution flattened form. timestep stored column values unmasked cells . m mask stored logical matrix TRUE representing active cells model mask mask stored terra::SpatRaster","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to convert a BirdFlow object or distribution into a\nSpatRaster — rasterize","title":"Functions to convert a BirdFlow object or distribution into a\nSpatRaster — rasterize","text":"rasterize_distr() creates SpatRaster similar created terra::rast() one distributions compact vector form. rast() converts BirdFlow object directly SpatRaster.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to convert a BirdFlow object or distribution into a\nSpatRaster — rasterize","text":"","code":"rasterize_distr(distr, bf, format = \"SpatRast\")  # S4 method for BirdFlow rast(x, which = \"all\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to convert a BirdFlow object or distribution into a\nSpatRaster — rasterize","text":"distr distribution vector form matrix column represents different distribution. bf BirdFlow object. format One 'SpatRast' terra::SpatRaster object, 'numeric' matrix array, 'dataframe' raster data suitable plotting ggplot2::geom_raster() x BirdFlow object indicates timesteps return. Can one integers indicating timesteps; character dates format year-month-day e.g. \"2019-02-25\"; Date objects;    \"\" return distributions timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to convert a BirdFlow object or distribution into a\nSpatRaster — rasterize","text":"terra::SpatRaster object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"reformatt distr time labels based on birdflow_options(","title":"reformatt distr time labels based on birdflow_options(","text":"internal function change labels object containing distributions match time format user specified global options. Internally distributions stored generated labels based timestep (\"t1\"  etc.).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reformatt distr time labels based on birdflow_options(","text":"","code":"reformat_distr_labels(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reformatt distr time labels based on birdflow_options(","text":"x object containing bird distributions bf BirdFlow object (used date information)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reformatt distr time labels based on birdflow_options(","text":"x (potentially) new labels","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reformatt distr time labels based on birdflow_options(","text":"March 15, 2023 experimenting adding attribute \"time\" vector distribution keep track time label. one distribution stored matrix colnames store time associated distribution. function currently returns input object resolve labels.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":null,"dir":"Reference","previous_headings":"","what":"reformat timestep labels — reformat_timestep","title":"reformat timestep labels — reformat_timestep","text":"given vector timestep labels provide vector formatted labels based value birdflow_options(\"time_format\") (see function options.)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reformat timestep labels — reformat_timestep","text":"","code":"reformat_timestep(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reformat timestep labels — reformat_timestep","text":"x one (vector) (matrix) distributions, column lablels consisting \"t\" timestep. bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reformat timestep labels — reformat_timestep","text":"x update column labels, dictated birdflow_options(\"time_format\")","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reformat timestep labels — reformat_timestep","text":"Internally distributions labled \"t\" timestep integer. returning user reformat_distr_labels() called change format turn calls function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate BirdFlow routes — route","title":"Generate BirdFlow routes — route","text":"route() projects bird positions time based probabilities embedded BirdFlow model. output linear, stochastic routes.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate BirdFlow routes — route","text":"","code":"route(bf, n = 1, x_coord = NULL, y_coord = NULL, from_marginals = FALSE, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate BirdFlow routes — route","text":"bf BirdFlow object n sampling starting positions (x_coord, y_coord NULL). Generate many samples.  Otherwsise x_coord y_coord positions duplicated n times. x_coord, y_coord Optional, NULL starting points drawn species distribution initial timestep. from_marginals Use FALSE (default) use distributions derived directly eBird Status Trends sampling starting locations. Set TRUE sample distributions derived fitted model parameters stored marginals. Passed get_distr(). ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate BirdFlow routes — route","text":"BirdFlowRoutes object columns: x, y coordinates point along route date date associated point timestep timestep associated point route unique id route individual location index point (see i_to_xy()) stay_id within route sequential id locations stay_len many timesteps Bird point stay (minumum 1) also experimental attributes: geom, species, dates geom, species, dates components BirdFlow object routes derived . metadata metadata component parent BirdFlow object, one additional item route_type = \"synthetic\"","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate BirdFlow routes — route","text":"","code":"bf <- BirdFlowModels::amewoo rts <- route(bf, 10, season = \"prebreeding\")  if (FALSE) { plot_routes(rts) }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","title":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","text":"function now deprecated eventually deleted. Please transition using  route() can now generate starting locations sampling distributions bf use season name specify time period route .  adjustment needs made use season argument route() place migration argument route_migration().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","text":"","code":"route_migration(bf, n, migration = \"prebreeding\", season_buffer = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","text":"bf BirdFlow model n number routes generate migration \"prebreeding\", \"pre\", \"spring\" prebreeding migration; \"postbreeding\", \"post\", \"fall\" postbreeding migration. season_buffer buffer timesteps (likely weeks) add beginning end season. default 1 means start week metadata suggests season starts continue one week past end.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated function to generate migration routes from a BirdFlow model — route_migration","text":"BirdFlowRoutes object columns: x, y coordinates point along route date date associated point timestep timestep associated point route unique id route individual location index point (see i_to_xy()) stay_id within route sequential id locations stay_len many timesteps Bird point stay (minumum 1) also experimental attributes: geom, species, dates geom, species, dates components BirdFlow object routes derived . metadata metadata component parent BirdFlow object, one additional item route_type = \"synthetic\"","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample locations from a distribution — sample_distr","title":"Sample locations from a distribution — sample_distr","text":"Probabilistically sample one locations set distributions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample locations from a distribution — sample_distr","text":"","code":"sample_distr(distr, n = 1, bf, format = \"distr\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample locations from a distribution — sample_distr","text":"distr vector representing single distribution; matrix representing one distribution per column, (unlikely)  array first dimension represents locations. values distr treated relative probability species position. n used distr vector representing single model state, case model state sampled n times generate matrix representing n sampled locations distribution. bf BirdFlow object, required format \"latlon\" \"xy\", optional otherwise. format One \"distr\" (default), \"xy\", \"latlon, \"\" indicating format sample returned .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample locations from a distribution — sample_distr","text":"One location samples distributions distr format changes value offormat: distr Default. Return object dimensions distr weight distribution distr assigned single location containing 1 remaining locations 0's. xy x y coordinates locations, usually data frame 3D input array. latlon return latitude (lat) longitude (lon) coordinates WGS 1984 sampled locations, usually data frame 3D input array. return location index sampled locations","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample locations from a distribution — sample_distr","text":"","code":"bf <- BirdFlowModels::amewoo d <- get_distr(bf, 5)  # default format \"distr\" returns an object similar to the input # in which all the weight for each distribution has been concentrated # in a single location one_hot <- sample_distr(d) all(one_hot %in% c(0, 1)) #> [1] TRUE sum(one_hot) #> [1] 1  # Sample 10 times from a single distribution and return x and y coordinates. xy <- sample_distr(d,  10, format = \"xy\", bf = bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"shorten and expand distance matrices — shorten_distance_matrix","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"functions facilitate storing just non-duplicated elements distace matrix vector hdf5 file. Since distance matrix symetrical zero's diagonal distances can stored vector contains fewer half values full matrix.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"","code":"shorten_distance_matrix(dm)  expand_distance_matrix(vals)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"dm distance matrix, symetrical n x n, matrix contains distances among n locations. values values lower triangle distance matrix row major order.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"shorten_distance_matrix() returns vector values. expand_distance_matrix() returns full matrix given vector.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"shorten_distance_matrix() extracts lower triangle column major order distance matrix. expand_distance_matrix() reassemble full distance matrix purpose halve number values stored hdf5 file. 5 x 5 distance matrix values corresponding numbered cells . Due symmetry distance matrix equivalent upper triangle row major order - probably treated python.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"","code":"if (FALSE) { x <- runif(5, 1, 100) y <- runif(5, 1, 100) dm <- as.matrix(dist(cbind(x, y))) a <- shorten_distance_matrix(dm) dm2 <- expand_distance_matrix(a) all.equal(dm, dm2, check.attributes = FALSE) }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":null,"dir":"Reference","previous_headings":"","what":"sparsify BirdFlow models — sparsify","title":"sparsify BirdFlow models — sparsify","text":"Set low values zero BirdFlow model marginals reduce object size.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sparsify BirdFlow models — sparsify","text":"","code":"sparsify(x, method, p, fix = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sparsify BirdFlow models — sparsify","text":"x BirdFlow model method One \"state\", \"conditional\", \"marginal\", \"model\"; \"state\" paired one methods character vector (c(\"state\", \"marginal\")) single string (\"state+conditional\"). See \"Methods\" section details. p Required unless method = \"state\" control proportion probability density retained sparsification process. See \"Methods\" . fix TRUE call fix_dead_ends() eliminate dead ends sparse model. Defaults TRUE, unless method \"state\" case forced FALSE state method create dead ends.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sparsify BirdFlow models — sparsify","text":"BirdFlow object many values marginals set zero. metadata also updated sparsification statistics. marginals standardized sum 1.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sparsify BirdFlow models — sparsify","text":"BirdFlow model fitting algorithm predict complete zero, however many marginal values close zero little impact model predictions. sparsify() forces small values zero goal saving memory, reducing file size, decreasing run time. Marginals stored sparse matrices (Matrix::Matrix(x , sparse = TRUE) ) non-zero values consume memory.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"sparsify BirdFlow models — sparsify","text":"four sparsification methods. first \"state\" use parameters eliminates model states entirely. three remaining proportion based methods use p control amount sparsification; p target proportion density retain eliminating values (calculated) threshold. different proprtional methods thresholds calculated applied either whole model (model)  repeatedly components (conditional, marginal). state State based sparsification eliminates states (time space) zero training, ebirdst, distributions, marginals marginal rows zeroed correspond zeroes preceding timestep's distribution columns zeroed correspond zeroes following timestep's distribution.  Thus cells marginal represent joint probability involving state zero either distributions zeroed , essentially dropping states model. model model sparsification values marginals pooled threshold chosen entire model zeroing values threshold results target proportion, p, model's density remaining. marginal threshold chosen applied separately marginal model.  Ultimately, p achieved model whole threshold cells set zero varies across marginals. conditional method targets (1 - p) forward backward conditional probabilities zeroed . Conditional probability calculating dividing cells row column row columns total. method thresholds chosen independently row column marginal prior zeroing cells fall either row column thresholds set zero. likely results marginal model whole retaining less p density. Theoretically somewhere p - 1 2 * (p - 1) density lost. higher value achieved row column methods overlap cells select; lower value complete agreement. practice dropped proportion likely near middle range. Ultimately proportional methods p tuned based performance sparsified model, even though method hit target precisely still work tuning parameter. possible combine proportional methods state based method passing two methods vector. done state based sparsification done second affected values marginal.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sparsify BirdFlow models — sparsify","text":"","code":"if (FALSE) { # Full models are huge so we don't distribute them. # Assuming you have an hdf5 file wit a full model you could run: bf <- import_birdflow(hdf5_path) sbf <- sparsify(bf, method = \"marginal+state\", p = 0.99) }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve species information from a BirdFlow model — species_info","title":"retrieve species information from a BirdFlow model — species_info","text":"species_info() species() return species data stored BirdFlow model. differ species() returns common name default provides succinct way get species name.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve species information from a BirdFlow model — species_info","text":"","code":"species_info(x, what)  species(x, what)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve species information from a BirdFlow model — species_info","text":"x BirdFlow model \"\" information (list) name (see details) desired information. omitted species() defaults \"common_name\" species_info() defaults \"\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve species information from a BirdFlow model — species_info","text":"element named , unless \"\" case list species information.  omitted species() return common name species, species_info() return complete list.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"retrieve species information from a BirdFlow model — species_info","text":"argument takes column names used ebirdst::ebirdst_runs input (descriptions ebirdst): convenience following short versions also accepted:","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"dropped-items","dir":"Reference","previous_headings":"","what":"Dropped items","title":"retrieve species information from a BirdFlow model — species_info","text":"8 variables ebirdst::ebirdst_runs dropped BirdFlow model thus can retrieved species_info(). Four variables track whether full range covered eBird must TRUE BirdFlow model fit dropped: resident verified FALSE model fit. three related variables dropped:","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":null,"dir":"Reference","previous_headings":"","what":"convert a marginal into a transition matrix — transition_from_marginal","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"internal function generate transition matrix marginal","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"","code":"transition_from_marginal(m, direction)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"m marginal direction desired transition direction, either \"forward\" \"backward\"","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"transition matrix formulated multiply matrix distribution project distribution.  See get_transition() details.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"called get_transition(). point decide store transitions rather marginals also called import_birdflow().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate the timespan of a BirdFlow model — truncate_birdflow","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"truncate_birdflow() Eliminates marginals /transitions BirdFlow model adjusts aspects model covers part year.  intent reduce object size processing time part year interest.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"","code":"truncate_birdflow(bf, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"bf BirdFlow object ... Arguments passed lookup_timestep_sequence season season name, season alias, \"\".  See lookup_season_timesteps() options. start starting point time specified timestep, character date, date object. end ending point time date timestep. direction Either \"forward\" \"backward\" defaults \"forward\" processing dates.  using date input direction optional used verify direction implicit dates. season_buffer used season input. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n_steps Alternative end  end n_steps away start direction; resulting sequence n_step transitions n_steps + 1  timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"BirdFlow modelthat contains information transitions subset year specified ....","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/truncate_birdflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncate the timespan of a BirdFlow model — truncate_birdflow","text":"model timesteps always numbered 1 n_timesteps() likely consistent weeks year truncated model. Currently possible truncate fitted model model produced preprocess_species() yet create way export preprocessed model truncating (independently preprocess_species()) truncate preprocessing. currently utility limited reducing size fitted models. possible truncate model year boundary routes generated model plot correctly recommended; see issue #120.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ts_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to determine timestep sequence direction and whether\nit crosses year boundary — ts_info","title":"Internal function to determine timestep sequence direction and whether\nit crosses year boundary — ts_info","text":"assumes lags adjacent steps cross year boundary either -1 1.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ts_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to determine timestep sequence direction and whether\nit crosses year boundary — ts_info","text":"","code":"ts_info(ts)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ts_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to determine timestep sequence direction and whether\nit crosses year boundary — ts_info","text":"ts sequence timesteps","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/ts_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to determine timestep sequence direction and whether\nit crosses year boundary — ts_info","text":"list : direction Either \"forward\" \"backward\" loops TRUE sequence crosses year boudary, FALSE .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to validate a BirdFlow object — validate_BirdFlow","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"Throw error BirdFlow object malformed incomplete.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"","code":"validate_BirdFlow(x, error = TRUE, allow_incomplete = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"x BirdFlow object error TRUE throw error problems FALSE return problems data.frame. allow_incomplete TRUE allow BirdFlow object missing marginals transitions (components). allows checking output preprocess_species().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"error = FALSE function returns data.frame describing errors columns: problem character description problems type problem type, either \"error\" \"incomplete\" Otherwise, problems similar data.frame rows returned invisibly.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"preprocess_species() creates BirdFlow object lacks marginals transitions thus used make projections. validate_BirdFlow() tags absence type \"incomplete\". missing malformed components tagged \"error\". Since marginals can used calculate distributions transition matrices, BirdFlow object can complete marginals; transitions distributions. redundancy three considered error. Currently metadata species information checked completeness. Currently dead end transitions permitted.  See find_dead_ends() checking .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109030","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9030","title":"BirdFlowR 0.1.0.9030","text":"2023-07-27","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"preprocess_species-0-1-0-9030","dir":"Changelog","previous_headings":"","what":"preprocess_species()","title":"BirdFlowR 0.1.0.9030","text":"update major overhaul preprocess_species() two primary goals. Adding support preprocessing truncated models - models cover part year. Cleaning simplifying code dropping outdated parameters breaking function several functions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"dropped-arguments-breaking-change-0-1-0-9030","dir":"Changelog","previous_headings":"preprocess_species()","what":"Dropped arguments Breaking change","title":"BirdFlowR 0.1.0.9030","text":"tiff - Prior default FALSE now always used TIFF export abundance data longer option. treat_na_as_zero prior default TRUE now always used. dummy_dynamic_mask prior default FALSE now always used. three little anachronistic. TIFF output original used place including abundance data hdf5. two arguments added updates allow simulating older behavior testing update, cases ’ve decided like newer behavior. Although breaking changes previously supported arguments dropped, new behavior mimics old default behavior expect cases values set differently default. Note: Although TIFF output abundances longer directly supported preprocess species model’s abundance can exported TIFF :","code":"r <- rast(bf) terra::writeRaster(r, \"abundance.tif\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"refactoring-0-1-0-9030","dir":"Changelog","previous_headings":"preprocess_species()","what":"Refactoring","title":"BirdFlowR 0.1.0.9030","text":"shouldn’t effect users. preprocess_species() broken four functions. three new functions internal helper functions. : determine_resolution() surprisingly tricky work figuring resolution yields desired number fitted parameters model. process_rasters() genarates resampled aggregated rasters used model ebird S&T rasters. export_birdflow() exports BirdFlow model hdf5 (optionally .Rds)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"truncation-new-0-1-0-9030","dir":"Changelog","previous_headings":"preprocess_species()","what":"Truncation New","title":"BirdFlowR 0.1.0.9030","text":"preprocess_species() gains ... argument used determine model truncation, combination parameters supported lookup_timestep_sequence() works (eg season = prebreeding start = 5, end = 10). result non-cyclical preprocessed mode covers transitions given time period. Truncation affect resolution determination - resolution selected full model meets desired number parameters GPU RAM. means resolution isn’t dependent truncation - facilitating possible later stitching back together several truncated models species.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109029","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9029","title":"BirdFlowR 0.1.0.9029","text":"2023-07-25 Minor edits vignettes collection index.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109028","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9028","title":"BirdFlowR 0.1.0.9028","text":"2023-07-18 Added BirdFlowOverview vignette @dsheldon. Minor updates BirdFlowR vignette.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109027","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9027","title":"BirdFlowR 0.1.0.9027","text":"2023-07-17 Added size column collection index. Made model download explicitly binary (windows). load_model() related functions now work without trailing slash collection URL. build_collection_url() re-uses metadata .Rds file hasn’t changed thus retains release date.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109026","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9026","title":"BirdFlowR 0.1.0.9026","text":"2023-07-14 Fixed bug ‘make_cache_readme()’","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109025","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9025","title":"BirdFlowR 0.1.0.9025","text":"2023-07-11 Added support model collections New Functions: load_model() User facing function load model cache - downloading first necessary. build_collection_index() Run directory model files add index files convert directory collection. cache_path() helper function. Returns path (local) cache directory model files saved. specific c_ollection_url. make_cache_readme() helper function make readme files collection specific cache directory ’s parent BirdFlowR cache directory. writes date last cache update well run anytime new files saved cache. Updated: collection_url: base url collection. cache: URL BirdFlowR cache directory holds collection specific cache directories.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109024","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9024","title":"BirdFlowR 0.1.0.9024","text":"2023-07-03 update focused allowing partial year models (#39). bulk work required goal done, however, integrated preprocess_species(), practice ’s useful yet. ’ve also split internal code additional helper functions makes package code little cleaner doesn’t affect users. one change might affect users ability subset fitted model date range truncate_birdflow(). New function truncate_birdflow() truncates dates BirdFlow model covers. works fitted preprocessed models, yet integrated preprocessing, logistically currently useful fitted models. New function as_transitions() converts ordered sequence timesteps names transitions connect . Used predict(), route(), lookup_transitions(), truncate_birdflow() New public,get_dates() returns $dates component BirdFlow object, replacing old private function longer used. Fixes #121. New metadata item timestep_padding tracks much timesteps padded transition marginal names. preprocess_species() new_BirdFlow() updated produce . New internal function get_timestep_padding() retrieves , older models figures model structure. New internal function make_marginal_index() derived code previously import_birdflow() used import_birdflow() truncate_birdflow() New internal function ts_info() determines timestep sequence forward backwards whether crosses year boundary.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109023","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9023","title":"BirdFlowR 0.1.0.9023","text":"2023-06-20","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"overview-0-1-0-9023","dir":"Changelog","previous_headings":"","what":"Overview","title":"BirdFlowR 0.1.0.9023","text":"update shouldn’t break anything change default behaviors functions: 1. preprocess_species() Models preprocessed update different older models. lookup_timestep_sequence() now allows looking cyclical sequence represents full year transitions season = returns one timestep used c(1:52, 1)). code distribution_performance() unchanged default behavior affected change lookup_timestep_sequence(). now includes transition last first timesteps calculations default time arguments.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"details-0-1-0-9023","dir":"Changelog","previous_headings":"","what":"Details","title":"BirdFlowR 0.1.0.9023","text":"Fixed bug preprocess_species() caused sometimes create BirdFlow models pixels didn’t align origin. ’s nothing wrong previous behavior modelling standpoint always aligning origin logistical benefits original intent. Fixed bug reformat_distribution_labels() 3 dimensional input erroneously change second dimension name \"time\". caused predict() produce confusing dimension labels called multiple distributions . lookup_timestep_sequence() now allows full cycle sequence returns full cycle sequences season = \"\". means including timesteps repeating first timestep. also allows setting start end timestep well (loop whole year). change results distr_performance() whole year models. preprocess_species() gains new argument default behavior. now replaces NA values distributions zero prior transforming changing resolution, uses bilinear interpolation place nearest neighbor. Set treat_na_as_zero FALSE old behavior. new way seems better though. See detailed explanation Issue #12.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109022","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9022","title":"BirdFlowR 0.1.0.9022","text":"2023-06-15","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"overview-0-1-0-9022","dir":"Changelog","previous_headings":"","what":"Overview","title":"BirdFlowR 0.1.0.9022","text":"update merges route_migration() route() can now everything either functions previously least one thing couldn’t (#88). returned object route() also changed: $lines dropped $points now returned new S3 class BirdFlowRoutes. plot_routes() don’t think returning lines useful . lines can recreated sf:st_as_sf(rts). closes #103 #88 Details follow.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"breaking-changes-to-route-0-1-0-9022","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES to route()","title":"BirdFlowR 0.1.0.9022","text":"Dropped row col arguments. x_coord y_coord sufficient think preferred users. Renamed n_each argument n. Renamed x argument bf. Changed order arguments. Added from_marginals = TRUE argument controls distributions used sampling starting locations; expect users use argument. Specifying starting locations (via x_coord y_coord) now optional. arguments NULL (default) n starting positions sampled species distribution starting timestep. sampling previously done route_migration(). route() now returns aBirdFlowRoutes object, extension data frame almost always behaves like data frame. $lines component previously returned list dropped, modified version $points returned. Use new st_as_sf() method theBirdFlowRoutes object produce sf lines. old points$route column renamedroute_id Experimental returned BirdFlowRoutes object attributes contain much ancillary data parent BirdFlow object: geom, species, metadata, dates. Additionally, new item added metadata: route_type = \"synthetic\". may useful also create BirdFlowRoute objects tracking data. want insulate experimental aspects call .data.frame() returned routes.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"non-breaking-changes-0-1-0-9022","dir":"Changelog","previous_headings":"","what":"Non-breaking changes","title":"BirdFlowR 0.1.0.9022","text":"Edits vignettes readme. route_migration() deprecated. arguments unchanged work now throws warning. Please transition using route() season argument. returned object changed - see changes route() . new method st_as_sf() convert BirdFlowRoutes objects sf objects either points lines. Use st_as_sf(rts) lines st_as_sf(rts, type = \"point\") convert sf points object. New plot() method BirdFlowRoutes objects dispatches plot_routes(). Experimental: plot_route() plot(BirdFlowRoutes) now require BirdFlow object - long attributes added route() present. bf argument used supersedes route attributes including make code less likely break change BirdFlowRoutes class. kind nice though: route(bf, 5, season = \"prebreeding\") |> plot() new print method BirdFlowRoutes mostly hide attributes printing - also new header line states species object . plot_routes() gains additional arguments control line widths dot sizing. animate_routes() access via ....","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"a-note-about-the-new-birdflowroutes-class-0-1-0-9022","dir":"Changelog","previous_headings":"","what":"A note about the new BirdFlowRoutes class.","title":"BirdFlowR 0.1.0.9022","text":"class much work progress. ’s stand. ’m committed route() returning data frame like object contains data formerly inrts$points think columns fairly stable point. ’m fairly committed making S3 “BirdFlowRoutes” object , minimum, including CRS somewhere attributes. ’m less committed including additional attributes. @slager working making BirdFlowRoutes like objects tracking data hope together can figure data object look like. Right now extra information class used three places: plot_routes() related plot(BirdFlowRoutes) st_as_sf(BirdFlowRoutes) print(BirdFlowRoutes) ways behave like data frame. data frame manipulations preserve attributes class. Many result standard data.frame.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109021","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9021","title":"BirdFlowR 0.1.0.9021","text":"Added logo","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109020","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9020","title":"BirdFlowR 0.1.0.9020","text":"update fixes bugs cleans things . shouldn’t break existing code. Fixed bug distribution_performance() caused error metrics = \"md_traverse_cor\" added tests. Removed tests/testthat/Rplots.pdf version control added .gitignore. Added gifski imports, moved rnaturalearthdata suggests imports. make installation smoother prevent gganimate::animate writing lots image files working directory. Closes #102. interval_log_likelihood() now returns zero row data.frame intervals observations zero rows. Care taken return column names data types returned data. Previously zero row input resulted unhelpful error. Closes #95.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109019","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9019","title":"BirdFlowR 0.1.0.9019","text":"2023-06-07","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"breaking-changes-to-timstep-sequence-arguments-0-1-0-9019","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES to timstep sequence arguments","title":"BirdFlowR 0.1.0.9019","text":"lookup_timestep_sequence() gains new season parameter second argument. Previously season specified via start confusing, especially called via ... functions. lookup_timestep_sequence() n argument renamed n_steps. functions allow specifying sequence timesteps (date range) now use ... passed lookup_timestep_sequence() . Previously predict() route() explicit arguments passed individually lookup_timestep_sequence() Affected functions impacts calls functions pass arguments lookup_timestep_sequence(): lookup_timestep_sequence() (directly) lookup_transitions() predict() route() distribution_performance() animate_movement_vectors() Broken usage Code passed season names explicitly start broken: lookup_timestep_sequence(bf, start = \"prebreeding\") . Code relied position start end pass dates timesteps also fail: lookup_timestep_sequence(bf, 1, 5). Use n argument, need updated n_steps Unaffected usage Passing dates timesteps start end name unaffected: lookup_timestep_sequence(bf, start = 1, end = 5). Passing season position works changes: lookup_timestep_sequence(bf, \"prebreeding\") general rule going forward use argument names beyond first two arguments (x season). Default values Default values lookup_timestep_sequence() switched missing NULL - similar changes made preprocess_species() BirdFlowR 0.1.0.9009. shouldn’t affect users make setting arguments programatically slightly easier. arguments BirdFlow object passed lookup_timestep_sequence() return timesteps. consistent change BirdFlowR 0.1.0.9017. default now inherited affected functions listed . affected functions change prior behavior throwing error time sequence specified. unlikely affect existing code.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109018","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9018","title":"BirdFlowR 0.1.0.9018","text":"2023-06-06 sample_distr() new argument format allows specifying distr, xy, latlon, (location index) output format. default distr mimics previous behavior. response comment issue #88, \"xy\" return format greatly simplifies calling route() sample distribution. BirdFlow vignette updated use sample_distr(format = \"xy\") use plot_routes(). Bug fixed xy_to_latlong() column order returned object backwards. Index conversion functions previously returned two column matrix now return two column data.frame: xy_to_latlon(), latlon_to_xy(), i_to_rc(), i_to_xy(). found often wanted refer columns name making data.frame format easier.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109017","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9017","title":"BirdFlowR 0.1.0.9017","text":"2023-06-05","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"revamping-performance-metrics-0-1-0-9017","dir":"Changelog","previous_headings":"","what":"Revamping performance metrics","title":"BirdFlowR 0.1.0.9017","text":"DEPRECATED evaluate_performance() now deprecated. Use distribution_performance() instead. traverse_coris replaced two similar metrics st_traverse_cor md_traverse_cor. first bug free version old traverse_cor(). second identical except makes predictions starting marginal rather status trends distribution. *_traverse_cor metrics now utilize dynamic mask filter cells used correlation calculation. ... arguments passed lookup_timestep_sequence() allow calculating metrics just part year. sparsify() (still isn’t updated dynamic masking) now uses distribution_performance() instead evaluate_performance(). lookup_transitions() (private function) now one formal argument (x) arguments now passed lookup_timestep_sequence() via ... arguments unchanged though calling shouldn’t change. lookup_timestep_sequence() now default value start = \"\" previously default. mostly make use functions via ... easier common default calling functions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109016","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9016","title":"BirdFlowR 0.1.0.9016","text":"2023-06-03 Edited Contributing guide preprocess_species() now throws better errors problems species argument (NA, NULL, unresolvable species names). Additional tests forpreprocess_species() error conditions test file output.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109015","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9015","title":"BirdFlowR 0.1.0.9015","text":"2023-06-02 * Added tests add_dynamic_mask() #101 * Added RMarkdown README. #104 * Now README.md file generated README.Rmd file (edit .Rmd) * Added example plots README. * Added contributing guide. #97","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109014","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9014","title":"BirdFlowR 0.1.0.9014","text":"2023-05-25 Works year boundary Color bar shows used date range. Additional arguments control appearance: use_seasonal_colors, pal, barheight Updated animate_routes() added … argument passed onto plot_routes() control appearance.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109013","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9013","title":"BirdFlowR 0.1.0.9013","text":"2023-05-22 New animate_routes() #93 Added dot stay = 1 segment end points visibly marked. Subtle changes code support animation. Updated documentation [route()] [route_migration()] full describe additional columns added 0.1.0.9012","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109012","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9012","title":"BirdFlowR 0.1.0.9012","text":"2023-05-17 Fixed bug route() route_migration() prevented routing year boundary. plot_routes() plotting routes ggplot2. compareGeom() methods BirdFlow objects, possibly mixed terra::SpatRaster objects. See terra::compareGeom() proportion_of_year() (internal function) converts date number 0 1. flatten_raster() supports multiple input formats #23 rasterize_distr() supports multiple output formats #23 route() route_migration() output return additional columns points item. expand_distr() now internal function. Users can use rasterize_distr( format = \"numeric\") instead.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109011","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9011","title":"BirdFlowR 0.1.0.9011","text":"2023-05-11 Minor change interval_log_likelihood() clearer code avoid warning tibbles used.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109010","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9010","title":"BirdFlowR 0.1.0.9010","text":"2023-05-09 Dockerfile: Bump rocker image R 4.3.0 error build package installation failure","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109009","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9009","title":"BirdFlowR 0.1.0.9009","text":"2023-05-09 preprocess_species() now defaults res parameter NULL, making easier script around preprocess_species() Tweaked tests better run across different development environments","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109008","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9008","title":"BirdFlowR 0.1.0.9008","text":"2023-05-09 import_birdflow() now converts logical hyperparameters masquerading factors logical. Addresses #81. Dropped legacy import functions: import_birdflow_v1() models predate R Package, import required first converting pickle file hdf5 importing .tif file distributions. import_prototype() models includes prototype shiny app.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109007","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9007","title":"BirdFlowR 0.1.0.9007","text":"Fixed URL.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109006","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9006","title":"BirdFlowR 0.1.0.9006","text":"Cleaned bad formatting _pkgdown.yml.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109005","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9005","title":"BirdFlowR 0.1.0.9005","text":"Added argument n lookup_timestep_sequence(), alternative end, n indicates many transitions resulting sequence. route(), lookup_transitions(), predict(), animate_movement_vectors() gained either explicit n parameter access via .... Breaking change: pre-existing n parameter route() renamed n_each avoid conflict new n parameter passed lookup_timestep_sequence(). Closes #76.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109004","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9004","title":"BirdFlowR 0.1.0.9004","text":"Made changes support pkgdown. Added links .yml Added BugReports field DESCRIPTION file Added second link URL field DESCRIPTION file linking github repo Switched development mode .yml unreleased. auto wasn’t working version 0.0.1.x. first formal release switched back auto.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109003","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.1.0.9003","title":"BirdFlowR 0.1.0.9003","text":"evaluate_performance() now exported. evaluate_performance() now uses dynamic mask calculating correlations (excluding masked cells). means bunch cells essentially forced zero sides correlation aren’t included calculation. Correlations get lower effect pronounced lower correlations.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"added-movment-vector-visualizations-0-1-0-9002","dir":"Changelog","previous_headings":"","what":"Added movment vector visualizations","title":"BirdFlowR 0.1.0.9002","text":"functions calculate visualize average movement cell BirdFlow model particular transition. New Functions calc_movement_vectors() returns data frame information average movement cell model given timestep. plot_movement_vectors() plots movement vectors directly BirdFlow model given timestep. Returns ggplot object. animate_movement_vectors() creates animation vectors series timesteps. Returns gganim object.","code":""},{"path":[]},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"summary-0-1-0-9001","dir":"Changelog","previous_headings":"Switch to Dynamic masking","what":"Summary","title":"BirdFlowR 0.1.0.9001","text":"Dynamic masking major overhaul package cells model acts change time limited cells non-zero value eBird S&T distributions. means marginal dimensions vary time, often square. intent isolate user changes. particular output input distribution objects still contain active cells public function arguments unchanged. Functions interact marginals now convert internally standard distributions covering active cells, dynamicly masked distributions conform marginal dimensions. predict(), route(), import_birdflow() substantial updates. BirdFlow objects gained great circle distance dynamic mask, created preprocessing, variable marginals transitions dimensions. great circle distance used python dropped (python) fitted model, ’s fairly large easy recalculate great_circle_distances().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"detailed-changes-0-1-0-9001","dir":"Changelog","previous_headings":"Switch to Dynamic masking","what":"Detailed changes","title":"BirdFlowR 0.1.0.9001","text":"New /distances/ constains values distance matrix great circle distances km pair locations - converted vector non duplicated values shorten_distance_matrix() full matrix can recreated expand_distance_matrix() added export HDF5 preprocess_species() retained fitted models, distances can recreated great_circle_distances(). New /geom/dynamic_mask matrix row active cell model (see n_active()) column timestep. cells one one relationship cells `/distr’ TRUE cell included model timestep FALSE otherwise. /metadata/birdflow_version now 3. New /metdata/birdflowr_version stores package version preprocess_species() /called. New metadata/hyperparameters metadata/loss_values contain information generated python model fitting. get_dynamic_mask() similar get_distr() dynamic mask data. add_dynamic_mask() updates old BirdFlow object (R session) adding dynamic mask. mainly facilitate transition allow testing package old models. has_dynamic_mask() returns logical. import_birdflow_v3() internal function called import_birdflow() version 3 BirdFlow HDF5 files. great_circle_distances() creates great circle distance matrix encoding distance (km) every pair cells BirdFlow object. now works version 2 3 BirdFlow HDF5 files (added version 3, dropped version 1) reads dynamic mask reads metadata/hyperparameters read metadata/loss_values get_distr() from_marginals = TRUE now expand truncated distribution calculated marginal full distribution. predict() route() map full distributions, truncated distributions applying transition , expand back full output. validate_birdflow() now checks dimensions marginals transition matrices dynamic mask cell counts timestep. now calls great_circle_distances() shorten_distance_matrix()create “/distances” component HDF5 adds “geom/dynamic_mask” logical matrix indicating cells “/distr” non-zero timestep. updated heuristic set resolution based number parameters given dynamic masking. new argument dummy_dynamic_mask() adds dynamic mask TRUE force fitting prior style birdflow object. sparsify() updated work dynamic masks, now throw error telling try use BirdFlow object dynamic mask.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009075","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9075","title":"BirdFlowR 0.0.0.9075","text":"2023-04-18 Added BirdFlow methods generics defined sf * st_crs() returns object class crs used sf define coordinate reference sytems (CRS). * st_bbox() returns object class bbox containing extent crs BirdFlow object. Can passed st_as_sfc() convert polygon.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009074","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9074","title":"BirdFlowR 0.0.0.9074","text":"2023-04-13 get_naturalearth() related functions now default crop buffer transforming Natural Earth data returned object extent matches extent x. Whether cropping occurs now controlled keep_buffer defaults FALSE. Previously controlled match_extent.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009073","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9073","title":"BirdFlowR 0.0.0.9073","text":"2023-04-11 lookup_timestep() timestep lookup throughout package now consistent ebirdst::date_to_st_week() wasn’t previously true. dates near edges week breaks end classified different timestep previously. preprocess_species() now saves breakpoints ebirdst::ebirdst_weeks start end instead week_start week_end. lookup_timestep_sequence() workhorse function processing date range input functions. Generate forward backward sequences timesteps, dates, season name input, possibly season buffer. lookup_season_timesteps() narrowly focused helper, returns forward timestep sequences associated season possibly buffer (timesteps) beyond edge season. lookup_transitions() route() route_migration() predict() get_distr() Fixes bug #66 date lookup forward across year boundary failed. Addresses #68 providing function lookup timestep series based season names (adds buffer ability). Closes #56 time now processed mostly lookup_timestep() points time, lookup_timestep_sequence() date ranges. Point lookup now uses findInterval breaks derived ebirdst::ebirdst_weeks rather .min() difference center nominal day week. also make time lookup compatible partial year BirdFlow models.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009072","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9072","title":"BirdFlowR 0.0.0.9072","text":"2023-04-11 Fixed bug introduced ebirdst 2.2021.1 converted coljumns ebirdst_runs character. preprocess_species() now defensively forces columns () logical logical, numeric numeric.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009071","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9071","title":"BirdFlowR 0.0.0.9071","text":"2023-04-06 Added functions latlon_to_xy() xy_to_latlon() convert WGS84 (EPSG:4326) x y coordinates BirdFlow objects CRS. Fixes #64. CHANGED behavior bunch index conversion functions, previously, many threw errors NA input values range. now return NA situations. made sense context #61.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009070","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9070","title":"BirdFlowR 0.0.0.9070","text":"2023-04-06 Switching development version number scheme. now increment development version one every change main branch (merged pull request). Previously version issue number. Fixed #61 (added test). Now interval_log_likelihood() sets exclude not_active columns TRUE either involved observations entirely outside extent BirdFlow object. Previously locations outside extent resulted error.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009054","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9054","title":"BirdFlowR 0.0.0.9054","text":"2023-03-30 New interval_loglikelihood() calculates log likelihood banding tracking data given BirdFlow model. new supporting functions: drop_transitions() is_location_valid(), is_distr_valid() test whether locations distributions valid inputs predict() route() lookup_timestep()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009022","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9022","title":"BirdFlowR 0.0.0.9022","text":"2023-03-27 get_naturalearth() related functions now throw helpful warning extent empty, , , return empty sf object. get_naturalearth() improved, robust way processing vector data works specific projections. Currently used Mollweide (“moll”) Lambert equal area (“laea”) based CRSs. get_naturalearth() new argument match_extent set TRUE causes result clipped precise extent input object (x). Use TRUE plotting ggplot2 Natural Earth data doesn’t result expanded plot extent. default, FALSE appropriate base R plotting Natural Earth Data runs beyond edge plot regardless whether aspect ratio x matches plot window’s. get_naturalearth() new argument use_old_method , TRUE forces less robust method regardless projection. testing function left default uses.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009044","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9044","title":"BirdFlowR 0.0.0.9044","text":"new function build_transitions(x) populate x$transitions forward backwards transitions. recommended repeated forecast() predict calls avoids repeatedly making transitions fly. triple memory usage BirdFlow object probably done sparse BirdFlow models. currently work throws warning BirdFlow model sparse. previously transitions_from_marginal() produced standard matrix. Now, mariginal sparse conversion done preserves sparse matrix. Similarly, transition matrix sparse predict() route() calculate sparse objects. speed two functions significantly.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009036","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9036","title":"BirdFlowR 0.0.0.9036","text":"replaced forecast() BirdFlow method predict().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009033","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9033","title":"BirdFlowR 0.0.0.9033","text":"end result time stuff enumerated (1) can set time format, (2) possible time associated distribution stored dim names, (3) ’s single distribution thus possible store time dim names new \"time\" attribute added object store time associated distribution. new birdflow_options() allows setting global options persist session. Currently two options verbose time_format. time_format option controls labeling distributions either column names 1 distribution via “time” attribute (See ) ’s single distribution. affects get_distr(), predict(), rast(). get_distr() now adds attribute \"time\" returning single distribution vector. Multiple distributions already used matrix column names record time associated distribution. Similarly, expand_distr() called single distribution preserve \"time\" attribute output matrix, flatten_raster() called single distribution’s raster (matrix) also preserve “time” attribute output vector. rasterize_distr() thus also rast() now convert \"time\" attribute layer name output raster single distribution. previously still distribution column names multiple distributions. names column dimension distribution matrices changed “timestep” “time” internal, stored object returned objects get_distr() forecast(). fix_dead_ends(), preprocess_species(), sparsify() now honor birdflow_options(\"verbose\") - printing progress information TRUE.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009034","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9034","title":"BirdFlowR 0.0.0.9034","text":"Changed preprocess_species() gb argument gpu_ram.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009035","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9035","title":"BirdFlowR 0.0.0.9035","text":"sparsify() longer throws confusing warning (#35) First argument sparsify() changed bf x (consistent #19)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009038","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9038","title":"BirdFlowR 0.0.0.9038","text":"Updated docker file work Apple silicon use cached github repos. (commit #37) Updated installation instructions Docker (commit #37) Route output snapshot testing longer depends print(lines) check novel points points component return value. fix issue currently failing CRAN check sf:: changed slightly prints summary SF object screen also make snapshot test little less hair trigger.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009028","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9028","title":"BirdFlowR 0.0.0.9028","text":"2023-03-08 New vignette(\"Preprocess\") covers preprocessing, importing, sparsification New vignette(\"Installation\") covers R, RStudio, package installation; installing Docker container. Updated installation instructions everywhere use remotes instead devtools re-install packages unnecessarily. Expanded “Learn ”” section README.md link vignettes well BirdFlow paper.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009021-2023-03-03","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9021 2023-03-03","title":"BirdFlowR 0.0.0.9021 2023-03-03","text":"Now downloads files needs #21 Slight adjustment resolution heuristic, take fewer steps find right resolution. Added additional tests cover error conditions clipping","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009019-2023-03-01","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9019 2023-03-01","title":"BirdFlowR 0.0.0.9019 2023-03-01","text":"collapse_distr(x, bf) -> collapse_raster(raster, bf) evaluate_perfomance(bf) -> evaluate_performance(x) expand_distr(x, bf) -> expand_distr(distr, bf) get_distr(, bf, from_marginals) -> get_distr(x, , from_marginals) get_transition(x, bf) -> get_transition(x, transition) lookup_transitions(start, end, bf, direction) -> lookup_transition(x, start, end, direction) sample_distr(x, bf) -> sample_distr(distr, bf) evaluate_performance() find_dead_ends() find_threshold() fix_dead_ends() import_prototype() lookup_transitions() new_BirdFlow() transition_from_marginal() Added “@keyword internal” documentation non-exported functions. removes documentation package manual index, ’s still accessible ?function_name.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009016-2023-02-27","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9016 2023-02-27","title":"BirdFlowR 0.0.0.9016 2023-02-27","text":"Added package . Starting use semantic versioning.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009017-2023-02-27","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9017 2023-02-27","title":"BirdFlowR 0.0.0.9017 2023-02-27","text":"Fix bug introduced ebirdst 2.2021.0 (switch raster terra) #17.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009003-2023-02-27","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9003 2023-02-27","title":"BirdFlowR 0.0.0.9003 2023-02-27","text":"Updated installation instructions. Closing #11. Added docker file. Usage instructions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009002-2023-02-23","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9002 2023-02-23","title":"BirdFlowR 0.0.0.9002 2023-02-23","text":"Added “biocViews:” “Imports:” DESCRIPTION devtools can find install rhdf5 (Bioconductor) installing packages BirdFlowR needs. #13 Vignette now attempts load rnaturalearthdata utils::install.packages() instead devtools::install_cran() attempt fix #11 Updated get_naturalearth() handles cases previously failed. particular extents span 180 deg longitude, extents cross 180 deg. meridian defines edge WGS84 projection now work. function still doesn’t handle polar projections global extents projections. Fixes #14","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009001-2023-02-21","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9001 2023-02-21","title":"BirdFlowR 0.0.0.9001 2023-02-21","text":"Switched order package installation readme added installation rnaturalearthdata vignette #11 Added NEWS.md file track changes package.","code":""}]
