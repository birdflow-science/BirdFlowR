[{"path":"https://birdflow-science.github.io/BirdFlowR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 BirdFlowR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"BirdFlowR","text":"Install packages Load libraries define local BirdFlow model (bf)","code":"installed <- rownames(installed.packages()) if(!\"remotes\" %in% installed)   install.packages(\"remotes\") if(!\"rnaturalearthdata\" %in% installed)   install.packages(\"rnaturalearthdata\") remotes::install_github(\"birdflow-science/BirdFlowModels\") remotes::install_github(\"birdflow-science/BirdFlowR\", build_vignettes = TRUE) library(BirdFlowModels) library(BirdFlowR) library(terra) #> terra 1.7.29  bf <- amewoo  # from BirdFlowModels"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"access-basic-information","dir":"Articles","previous_headings":"","what":"Access basic information","title":"BirdFlowR","text":"dim(), nrow(), ncol() report raster dimensions associated model. n_active total number cells BirdFlow model can route birds subset cells raster.n_transitions() n_distr() report temporal dimensions. model circular equal, temporally linear models n_distr() one n_transitions().","code":"# Methods for base R functions: dim(bf) #> [1] 45 51 c( nrow(bf), ncol(bf) ) #> [1] 45 51 bf # print(bf)  #> American Woodcock BirdFlow model #>   dimensions   : 45, 51, 52  (nrow, ncol, ntimesteps) #>   resolution   : 79995.7798343748, 79995.8424586389  (x, y) #>   active cells : 1706 #>   size         : 19 Mb  # BirdFlowR functions n_active(bf) #> [1] 1706 n_transitions(bf) #> [1] 51 n_timesteps(bf) #> [1] 52  # Contents has_marginals(bf) #> [1] TRUE has_distr(bf) #> [1] TRUE has_transitions(bf) #> [1] FALSE"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"species-information-and-metadata","dir":"Articles","previous_headings":"","what":"Species information and metadata","title":"BirdFlowR","text":"species_info() get_metadata() take BirdFlow object first argument. optional second argument allows specifying specific item, omitted list returned available information. species(bf) shortcut species_info(bf, \"common_name\") Use ?species_info() see descriptions available information. Dates associated migration resident seasons likely useful.","code":"species(bf)   #> [1] \"American Woodcock\" species(bf, \"scientific\") #> [1] \"Scolopax minor\" species_info(bf, \"prebreeding_migration_start\") #> [1] \"2021-01-18\" si <-  species_info(bf) # list with all species information md <- get_metadata(bf)  # list with all metadata get_metadata(bf, \"birdflow_model_date\") # date model was exported from python #> [1] \"2023-01-02 10:03:05.256454\"  validate_BirdFlow(bf)  # throws error if there are problems"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"spatial-aspects","dir":"Articles","previous_headings":"","what":"Spatial aspects","title":"BirdFlowR","text":"BirdFlow models based raster representation time series species distributions contain spatial information necessary recreate distributions define raster positioned space. BirdFlowR uses terra package import raster data provides BirdFlow methods functions defined terra package - can use functions BirdFlow objects. crs() returns coordinate reference system - useful need project data match BirdFlow object. res(), xres(), yres() describe dimensions individual cells model. ext() returns terra extent object.","code":"# Methods for terra functions: a <- crs(bf) # well known text (long) crs(bf, proj = TRUE)  # proj4 string #> [1] \"+proj=moll +lon_0=-90 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs\" res(bf) #> [1] 79995.78 79995.84 c( xres(bf), yres(bf) ) # same as res(bf) #> [1] 79995.78 79995.84 ext(bf) #> SpatExtent : -1564958.2138293, 2514826.55772382, 2822153.67510416, 6421966.58574292 (xmin, xmax, ymin, ymax) c(xmin(bf), xmax(bf), ymin(bf), ymax(bf)) # same as ext(bf) #> [1] -1564958  2514827  2822154  6421967"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"retrieve-and-plot-distributions","dir":"Articles","previous_headings":"","what":"Retrieve and plot distributions","title":"BirdFlowR","text":"distribution BirdFlow stored vector values correspond active cells (n_active()) model. Multiple distributions stored matrices n_active() rows (column distribution). can retreive distributions format get_distr(). Use timestep, character dates, date objects, “” specify distributions retrieve. Retrieve first distribution compare length number active cells. Get 5 distributions, result matrix column distribution row active cell. can also specify distributions dates, use “” retrieve distributions. Use rasterize_distr() convert distribution SpatRaster defined terra package. second argument, BirdFlow model, needed spatial information contains. Alternatively convert directly BirdFlow SpatRast rast() second, optional, argument accepts inputs get_distr().  BirdFlowR provides convenience wrappers functions rnaturalearth load vector data crop reproject make suitable plotting BirdFlow output.","code":"d <- get_distr(bf, 1) # get first timestep distribution  length(d)  # 1 distribution so d is a vector #> [1] 1706 n_active(bf)  # its length is the the number of active cells in the model #> [1] 1706 d <- get_distr(bf, 26:30)  dim(d) #> [1] 1706    5 head(d, 3) #>       time #> i      June 28 July 5 July 12 July 19 July 26 #>   [1,]       0      0       0       0       0 #>   [2,]       0      0       0       0       0 #>   [3,]       0      0       0       0       0 d <- get_distr(bf, \"2022-12-15\") # from character date d <- get_distr(bf, \"all\")  # all distributions d <- get_distr(bf, Sys.Date())  # Using a Date object d <- get_distr(bf, c(1, 26)) # winter and summer r <- rasterize_distr(d, bf) # convert to SpatRaster r <- rast(bf) # all distributions r <- rast(bf, c(1, 26))  # 1st, and 26th timesteps. plot(r) r <- rast(bf, species_info(bf, \"prebreeding_migration_start\")) plot(r) coast <- get_coastline(bf)  # lines plot(coast, add = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"forecasting","dir":"Articles","previous_headings":"","what":"Forecasting","title":"BirdFlowR","text":"section sample single starting location winter distribution project forward generate distribution predicted breeding grounds birds wintered starting location. Set predict parameters.","code":"start <- 1     #  winter      end <-  26     # summer"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"sample-starting-distribution","dir":"Articles","previous_headings":"Forecasting","what":"Sample starting distribution","title":"BirdFlowR","text":"sample_distr() sample one input distribution select single location per distribution. result one moe distributions ones selected location(s) zero elsewhere.","code":"set.seed(0) d <- get_distr(bf, start) location <- sample_distr(d)  print( i_to_xy( which( as.logical(location) ), bf) )  # starting coordinates #>              x       y #> [1,] -5040.507 3982093"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"project-forward-from-this-location-to-summer","dir":"Articles","previous_headings":"Forecasting","what":"Project forward from this location to summer","title":"BirdFlowR","text":"predict() returns distribution time matrix one column per timestep. plot shows birds winter particular location likely year progresses ultimately might spend summer. probability density spreads weeks progress.  Alternatively can calculate difference projected distribution bird’s wintering particular location distribution species whole timestep.","code":"f <- predict(bf, distr = location, start = start, end = end,               direction = \"forward\")  r <- rasterize_distr(f[, c(1, 7, 14, 19)], bf) plot(r) projected <- f[ , ncol(f)]  # last projected distribution diff <-  projected - get_distr(bf, end)  plot(rasterize_distr(diff, bf))"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"generate-synthetic-routes","dir":"Articles","previous_headings":"","what":"Generate synthetic routes","title":"BirdFlowR","text":"section sample locations American Woodcock winter distribution generate routes summer grounds. Set route parameters.","code":"n_positions <-  15 # number of starting positions n_each <- 1        # how many birds to start at each start <- 1         # starting timestep (winter) end <- 26          # ending timestep (summer)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"generate-starting-locations","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Generate starting locations","title":"BirdFlowR","text":"First extract winter distribution, use sample_locations() n = n_positions sample input distribution repeatedly resulting matrix column single 1 representing sampled location. Collapse locations vector index non-zero value convert x y coordinates. Plot starting (winter) distribution sampled locations","code":"d <- get_distr(bf, start) locations  <- sample_distr(d, n = n_positions) ind <- apply(locations, 2, function(x) which( as.logical(x) ) ) x <- i_to_x(ind, bf) y <- i_to_y(ind, bf) winter <- rasterize_distr(d, bf) plot(winter) points(x, y)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"generate-routes","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Generate routes","title":"BirdFlowR","text":"route() generate synthetic routes starting position. Currently route() returns list two items (may change): points data.frame row timestep route lines sf object containing line route","code":"rts <- route(bf, x_coord = x, y_coord = y, start = start,              end = end, n_each = n_each) head(rts$points, 4) #>          x       y route timestep       date #> 1 714921.5 4222081     1        1 2019-01-04 #> 2 714921.5 4222081     1        2 2019-01-11 #> 3 714921.5 4222081     1        3 2019-01-18 #> 4 714921.5 4222081     1        4 2019-01-25"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/BirdFlowR.html","id":"plot-routes","dir":"Articles","previous_headings":"Generate synthetic routes","what":"Plot routes","title":"BirdFlowR","text":"Plot route lines summer distribution along points starting ending positions.","code":"d <- get_distr(bf, end) summer <- rasterize_distr(d, bf)  line_col <- rgb(0, 0, 0, .2) pt_col <- rgb(0, 0, 0, .5 )  plot(summer)  points( x, y, cex = .4, col = pt_col, pch = 16) # starting points plot(rts$lines, add = TRUE, col = line_col)  # routes end_pts <- rts$points[rts$points$timestep == end, ]  # end points points(x = end_pts$x, y = end_pts$y,        cex = 0.4, pch = 12, col = pt_col )  title(main = species(bf))"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"standard-install","dir":"Articles","previous_headings":"","what":"Standard install","title":"Detailed installation instructions","text":"uses R RStudio installed directly system installed skip step 3. Install R CRAN - follow links system upper right. ’m currently using R version 4.3.0 (2023-04-21) think 4.2.x work. Install RStudio IDE isn’t strictly necessary, RStudio significant upgrade R’s standard GUI. Install required R packages. Open RStudio run following console. Package dependencies can pain. doesn’t work can also try alternative method , also executed RStudio console. neither methods work last option try specific troublesome packages use RStudio’s “Install Packages” top “Tools” menu.","code":"installed <- rownames(installed.packages()) if(!\"remotes\" %in% installed)   install.packages(\"remotes\") if(!\"rnaturalearthdata\" %in% installed)   install.packages(\"rnaturalearthdata\") remotes::install_github(\"birdflow-science/BirdFlowModels\")   remotes::install_github(\"birdflow-science/BirdFlowR\", build_vignettes = TRUE) installed <- rownames(installed.packages()) if(!\"pak\" %in% installed)   install.packages(\"pak\")  pak::pkg_install(\"rnaturalearthdata\", ask = FALSE) pak::pkg_install(\"birdflow-science/BirdFlowModels\", ask = FALSE, ) pak::pkg_install(\"birdflow-science/BirdFlowR\", ask = FALSE,                   dependencies = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"docker","dir":"Articles","previous_headings":"","what":"Docker","title":"Detailed installation instructions","text":"Alternatively can install Dockerfile ’s one can use Dockerfile Linux/MacOS (Windows similar). Download install Docker Desktop. computer Apple Silicon chip (e.g., M1 M2), Docker Desktop go Settings > General ensure “Use Virtualization Framework” checked, go Features Development > check “Use Rosetta x86/amd64 emulation Apple Silcon”. Apply settings restart Docker Desktop needed. Ensure Docker Desktop running. Clone BirdFlowR package GitHub. Go top level BirdFlowR directory, build image Dockerfile, tag image ‘birdflow’. take long time first time need download rocker/geospatial:4.2.2 image Docker Hub, starting point install custom packages via Dockerfile. future builds machine, rocker/geospatial already cached Docker, needs re-install custom packages. build step really needs happen want use newer version BirdFlowR repo. See also: https://rocker-project.org/images/versioned/rstudio.html Launch Docker container image, launch RStudio Server instance container. ’re locally computer, can use version skip password. Specifying IP address way make accessible computer, according Rocker page. ’re computers, make sure include ports, require authentication: see message saying services started, point web browser localhost:8787/ use RStudio image. ’re done, go back terminal window started docker services, hit Control-C. send kill signal container supporting RStudio server process. Rocker webpage shows ways persist directories settings container host well, don’t lose Rstudio settings local work time launch/close container.","code":"cd ~/BirdFlowR docker build -t birdflow . --no-cache docker run --platform linux/amd64 --rm -ti -e DISABLE_AUTH=true -p 127.0.0.1:8787:8787 birdflow docker run --platform linux/amd64 --rm -ti -e PASSWORD=yourpassword -p 8787:8787 birdflow"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"ebirdst","dir":"Articles","previous_headings":"","what":"ebirdst","title":"Detailed installation instructions","text":"want preprocess species model fitting need ebirdst access code must request via online form. code run (R RStudio console): “XXXXX” access key. restart R.","code":"library(ebirdst) set_ebirdst_access_key(\"XXXXX\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Installation.html","id":"test","dir":"Articles","previous_headings":"","what":"Test","title":"Detailed installation instructions","text":"Run lines see see ’ve installed two BirdFlow packages dependencies.","code":"library(BirdFlowModels) library(BirdFlowR) library(terra) bf <- BirdFlowModels::amewoo print(bf) plot(rast(bf, 1)) #> American Woodcock BirdFlow model #>   dimensions   : 45, 51, 52  (nrow, ncol, ntimesteps) #>   resolution   : 79995.7798343748, 79995.8424586389  (x, y) #>   active cells : 1706 #>   size         : 19 Mb"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"load-r-packages-and-set-species-","dir":"Articles","previous_headings":"","what":"Load R packages and set species.","title":"Preprocess and sparsify","text":"“example_data” allows processing ebirdst example data, doesn’t require access code. plan preprocessing species sure setup ebirdst access code. ’ll also setup destination folder purpose vignette ’m going use temporary folder. optionally set directory choice somewhere permanent accessible. code add BirdFlowModels directory home directory, use model output. block run building vignette.","code":"library(BirdFlowR) library(ebirdst) library(terra) species <- \"example_data\"  # optionally, set species here dir <- tempdir() dir <- \"~/BirdFlowModels\" dir.create(dir, showWarnings = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"preprocess","dir":"Articles","previous_headings":"","what":"Preprocess","title":"Preprocess and sparsify","text":"Now can preprocess species. gb parameter one way setting resolution; specifies amount ram available machine intend fit BirdFlow model - python Jax, probably cluster. , set gb small value keep file size memory requirements small.","code":"# Note: #   amewoo 100km resolution is equivalent to gpu_ram = 1 #   amewoo 75 km resolution is equivalent to gpu_ram = 2.9  bf <- preprocess_species(species, dir, gpu_ram = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"fit-models","dir":"Articles","previous_headings":"","what":"Fit models","title":"Preprocess and sparsify","text":"python. Come back ’re done.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"import","dir":"Articles","previous_headings":"","what":"Import","title":"Preprocess and sparsify","text":"rest vignette predicated .hdf5 file fitted model. Set path file import .","code":"model_file <- file.path(dir, \"fitted.hdf5\") bf <- import_birdflow(model_file)"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"sparsify","dir":"Articles","previous_headings":"","what":"Sparsify","title":"Preprocess and sparsify","text":"’s good idea sparsify immediately importing reduce memory usage processing time models. state method eliminates transitions model states (locations space time) ebirdst distribution zero. states thus removed model. can read sparsification methods help sparasify().","code":"bf <- sparsify(bf, method = \"state\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/articles/Preprocess.html","id":"save-sparse-model","dir":"Articles","previous_headings":"","what":"Save sparse model","title":"Preprocess and sparsify","text":"Saving sparse model save time disk space want use later. write serialized R object fast efficient portable software. later session read . See vignette('BirdFlowR') examples routing forecasting BirdFlow objects.","code":"sparse_file <- file.path(dir, \"sparse.Rds\")  # change  saveRDS(bf, file = sparse_file) bf <- readRDS(sparse_file)"},{"path":"https://birdflow-science.github.io/BirdFlowR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Plunkett. Author, maintainer. Daniel Sheldon. Author.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Plunkett E, Sheldon D (2023). BirdFlowR: Predict Visualize Bird Movement. https://birdflow-science.github.io/BirdFlowR/, https://github.com/birdflow-science/BirdFlowR.","code":"@Manual{,   title = {BirdFlowR: Predict and Visualize Bird Movement},   author = {Ethan Plunkett and Daniel Sheldon},   year = {2023},   note = {https://birdflow-science.github.io/BirdFlowR/, https://github.com/birdflow-science/BirdFlowR}, }"},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"birdflowr","dir":"","previous_headings":"","what":"Predict and Visualize Bird Movement","title":"Predict and Visualize Bird Movement","text":"R package predict changes distributions generate synthetic migration routes based BirdFlow models. package development yet formally released. Function names arguments may change.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Predict and Visualize Bird Movement","text":"Install just package: install example data vignette: See vignette(\"Installation\") troubleshooting installation options.","code":"if(!require(\"remotes\"))   install.packages(\"remotes\")  remotes::install_github(\"birdflow-science/BirdFlowR\") installed <- rownames(installed.packages()) if(!\"remotes\" %in% installed)   install.packages(\"remotes\") if(!\"rnaturalearthdata\" %in% installed)   install.packages(\"rnaturalearthdata\") remotes::install_github(\"birdflow-science/BirdFlowModels\") remotes::install_github(\"birdflow-science/BirdFlowR\", build_vignettes = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Predict and Visualize Bird Movement","text":"two primary functions predict() project distributions route() generate synthetic routes. route_migration() wrapper route() automates sampling locations distribution start migration setting start end dates route migration window. can use create synthetic routes species.","code":"library(BirdFlowR) library(BirdFlowModels) library(terra)  bf <- amewoo   species(bf)  # start migration at end of the nonbreeding season start <- species_info(bf, \"nonbreeding_end\")  # Retreive starting distribution as a SpatRaster and plot r <- rast(bf, start) plot(r)  # Generate migration routes rts <- route_migration(bf, 10, \"prebreeding\")  # Add lines to plot plot(rts$lines, add = TRUE, col = rgb(0, 0, 0, .25))"},{"path":"https://birdflow-science.github.io/BirdFlowR/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Predict and Visualize Bird Movement","text":"vignette(\"BirdFlowR\") longer introduction package, use predict() route() project bird distributions movement. vignette(\"Installation\") detailed installation instructions. vignette(\"Preprocess\") covers downloading formatting data model fitting preprocess_species(), importing fitted models import_birdflow(), reducing model size sparsify(). BirdFlow: Learning Seasonal Bird Movements Citizen Science Data Miguel Fuentes, Benjamin M. Van Doren, Daniel Fink, Daniel Sheldon bioRxiv 2022.04.12.488057; doi: https://doi.org/10.1101/2022.04.12.488057","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"dynamic mask logical matrix dimensions distr matrix bf holding TRUE cells corresponding location (row) time (column) included model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"","code":"add_dynamic_mask(bf, dummy_mask = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"bf BirdFlow object dummy_mask TRUE mask addded object, mask TRUE every cell. yields BirdFlow object works current mask dependent version package mimics old BirdFlow model.  Note old model included state based sparsification predictions identical even dummy_mask = FALSE (default).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"BirdFlow object dynamic_mask component marginals includes transitions cells dynamically masked.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/add_dynamic_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a BirdFlow object without a dynamic mask into one with a dynamic mask — add_dynamic_mask","text":"","code":"bf <- add_dynamic_mask(BirdFlowModels::amewoo)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate movement vectors — animate_movement_vectors","title":"Animate movement vectors — animate_movement_vectors","text":"animate_movement_vectors() produces gganim object frame map vectors showing average modeled movement birds cell landscape given timestep. analogous series images created plot_movement_vectors().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate movement vectors — animate_movement_vectors","text":"","code":"animate_movement_vectors(bf, start = \"all\", ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate movement vectors — animate_movement_vectors","text":"bf BirdFlow object start starting points time specified timesteps, character dates, date objects;  may set \"\" season name interpreted lookup_season_timesteps(). ... Arguments passed lookup_timestep_sequence end start timestep date end timestep date indicating ending point time. direction Either \"forward\" \"backward\". start end represent dates direction used error thrown direction consistent direction indicated dates. start end dates, direction defaults \"forward\" start end either timesteps (numeric); end omitted start \"\" season name. start timestep date, end omitted, n integer direction defaults \"forward\". season_buffer used start season. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n Alternative end specifying sequence end. n indicates many transitions sequence direction defaults \"forward\" n used.  sequence n + 1 timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate movement vectors — animate_movement_vectors","text":"gganim object. print() plot default options, use animate() set options. See example recommended settings.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Animate movement vectors — animate_movement_vectors","text":"arrow represents average transitions single cell. tail arrow center cell, head average location following timestep birds start cell. timestep /date label starting timestep transition displayed format depends birdflow_options(\"time_format\") Thicker lines less transparency (darker shading) indicate higher density eBird S&T distribution beginning timestep displayed transition. undecided whether gganimate() call example part function, making return \"gif_image\" object instead. make easier use hard adjust rendering parameters. output object might change future revision.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/animate_movement_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate movement vectors — animate_movement_vectors","text":"","code":"bf <- BirdFlowModels::amewoo a <- animate_movement_vectors(bf) #> Creating vector fields #> \t...................................................  if (FALSE) {  # Animate, display, and save #   Note: \"ragg_png\" is considerably faster and produces cleaner output than #         the default device. gif <- gganimate::animate(a, fps = 1, device = \"ragg_png\",                           width = 6, height = 5,                           res = 150, units = \"in\") print(gif) path <- tempfile(fileext = \".gif\") # set to desired output location gganimate::anim_save(gif) }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"birdflow_crs — birdflow_crs","title":"birdflow_crs — birdflow_crs","text":"defines coordinate reference system (crs, AKA projection) used default BirdFlow models. customized Mollweide projection, longitude origin set -90 deg. centering western hemisphere.  St Louis, Missouri close longitude -90 deg. Mollweide projection preserves area, shapes distortion increases distance longitude origin.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"birdflow_crs — birdflow_crs","text":"","code":"birdflow_crs"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"birdflow_crs — birdflow_crs","text":"string defining custom mollweide projection centered western hemisphere well known text","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"birdflow_crs — birdflow_crs","text":"projection similar : https://spatialreference.org/ref/sr-org/7399/ crs(\"ESRI:54009) longitude origin 0, centered Greenwich, England.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"birdflow_crs — birdflow_crs","text":"https://epsg.io/54009","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_crs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"birdflow_crs — birdflow_crs","text":"","code":"cat(birdflow_crs) #> PROJCRS[\"Western Mollweide\", #>     BASEGEOGCRS[\"WGS 84\", #>         DATUM[\"World Geodetic System 1984\", #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"Western Mollweide\", #>         METHOD[\"Mollweide\"], #>         PARAMETER[\"Longitude of natural origin\",-90, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Not known.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]]] crs(birdflow_crs, proj = TRUE) #> [1] \"+proj=moll +lon_0=-90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and retrieve BirdFlowR options — birdflow_options","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"arguments BirdFlowR options returned list. Use single character value retreive value single option. Use one named arguments set options.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"","code":"birdflow_options(...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"... One : (1) one named arguments name option value new settting e.g. verbose = FALSE ; (2) single unnamed argument stating option retrieve e.g. \"verbose\" option retrieve; (3) arguments, indicating options current settings returned list.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"arguments used options returned list. single, unnamed argument character value indicating option value option returned. Otherwise, arguments indicate new option settings nothing returned.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"time_format Indicates time format use label dimensions distribution tables layers raster objects returned get_distr(), rast(), rasterize_distr(), predict().  affect internally stored distribution column labels (always t1, t2, etc.). Default \"month_day\". Valid values : \"timestep\" uses timestep integer appended \"t\" e.g. \"t1\");  \"date\" uses date format year-month-day (numbers) e.g. \"2022-11-23; \"month_day\" uses name month followed day month e.g. \"November 23\" verbose Defaults TRUE printing progress information process functions.  Set FALSE turn printing.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/birdflow_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and retrieve BirdFlowR options — birdflow_options","text":"","code":"bf <- BirdFlowModels::amewoo birdflow_options() # print current settings #> $max_param_per_gpu_gb #> [1] 23224801 #>  #> $time_format #> [1] \"month_day\" #>  #> $verbose #> [1] TRUE #>  original_format <- birdflow_options(\"time_format\") birdflow_options(time_format = \"date\") head(get_distr(bf, 1:3)) #>       time #> i      2019-01-04 2019-01-11 2019-01-18 #>   [1,]          0          0          0 #>   [2,]          0          0          0 #>   [3,]          0          0          0 #>   [4,]          0          0          0 #>   [5,]          0          0          0 #>   [6,]          0          0          0 birdflow_options(time_format = original_format)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"add or drop transition matrices — build_transitions","title":"add or drop transition matrices — build_transitions","text":"Given BirdFlow object marginals without transitions build_transitions() return BirdFlow object marginals transitions, drop_tansitions() reverse process.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add or drop transition matrices — build_transitions","text":"","code":"build_transitions(x, rebuild = FALSE)  drop_transitions(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add or drop transition matrices — build_transitions","text":"x BirdFlow object rebuild set TRUE rebuild transitions already present.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add or drop transition matrices — build_transitions","text":"BirdFlow object transition matrices","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/build_transitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add or drop transition matrices — build_transitions","text":"","code":"if (FALSE) { bf1 <- BirdFlowModels::amewoo bf2 <- build_transitions(bf) bf2  bf3 <- drop_transitions(bf2) bf3 }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"Calculate total number parameters occupied area timestep abundance raster.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"","code":"calc_abundance_stats(x, circular = TRUE, dummy_dynamic_mask = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"x multilayer spatRaster relative abundances timestep circular TRUE (default) use first timestep abundance ending abundance.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"list n_params number parameters model fit x count vector number cells occupied timestep area vector area (sq m) included cells timestep res resolution raster km","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_abundance_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate stats from a spatRaster with abundances for each timestep — calc_abundance_stats","text":"helper preprocess_species()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"calc_movement_vectors() calculates average modeled movement birds location single transition BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"","code":"calc_movement_vectors(bf, start, direction = \"forward\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"bf BirdFlow model start starting timestep transition modeled direction \"forward\" default. Set \"backward\" calculate vectors transition backwards time.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"data frame columns: location index starting location.  row distribution matrix corresponds location. start starting timestep transition. end ending timestep transition. start_x x coordinate starting cell transition. start_y y coordinate starting cell transition. end_x weighted average destination x coordinate transitions starting cell, weights set transition probability destination. end_y weighted average destination y coordinate. weight proportion population starting cell eBird S&T distribution starting timestep. width range rescaling weight used plot_movement_vectors(), animate_movement_vectors() set line width arrows.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"practice row transition matrix represents single starting location (start_x start_y) values row represent transition probability number destination cells. probabilities used weights calculate average destination x y coordinates (end_x, end_y).  ending coordinates arrow represented expected average destination birds start cell.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/calc_movement_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the average movement for cells in a BirdFlow model — calc_movement_vectors","text":"","code":"bf <- BirdFlowModels::amewoo mv <- calc_movement_vectors(bf, 7)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":null,"dir":"Reference","previous_headings":"","what":"compare names of two nested lists — compare_list_item_names","title":"compare names of two nested lists — compare_list_item_names","text":"Look difference list item names nested level. Used internally verify BirdFlow object structure","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare names of two nested lists — compare_list_item_names","text":"","code":"compare_list_item_names(x, y, map = \"x\", differences)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare names of two nested lists — compare_list_item_names","text":"x list y reference list map used recursion tracking x differences found differences used recursion collecting differences","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/compare_list_item_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare names of two nested lists — compare_list_item_names","text":"data frame difference columns 0 rows differences found.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensions of a BirdFlow object — BirdFlow dimensions","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"Functions return BirdFlow model dimensions basic information","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"","code":"# S3 method for BirdFlow nrow(x)  # S3 method for BirdFlow ncol(x)  # S3 method for BirdFlow dim(x)  n_timesteps(x)  n_distr(x)  n_transitions(x)  n_active(x)  # S4 method for BirdFlow crs(x, proj = FALSE, describe = FALSE, parse = FALSE)  # S4 method for BirdFlow ext(x)  # S4 method for BirdFlow res(x)  # S4 method for BirdFlow xres(x)  # S4 method for BirdFlow yres(x)  # S4 method for BirdFlow xmin(x)  # S4 method for BirdFlow ymin(x)  # S4 method for BirdFlow xmax(x)  # S4 method for BirdFlow ymax(x)  is_cyclical(x)  n_parameters(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"x BirdFlow object proj logical. TRUE crs returned PROJ-string notation describe logical. TRUE name, EPSG code, name extent area use returned known parse logical. TRUE, wkt parts parsed vector (line becomes element)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensions of a BirdFlow object — BirdFlow dimensions","text":"nrow() returns number rows raster extent BirdFlow model ncol() number columns raster extent dim() number rows columns raster extent. n_timesteps() number timesteps distributions. n_distr() number distributions n_transitions() number transitions, model circular time equal n_timesteps(). n_active() number active cells (locations). crs() coordinate reference system, character well known text (wkt) default, see arguments. ext() SpatExtent object, contains xmin, xmax, ymin, ymax extent. res() two numbers, cell width height (x y resolution). xres() width cells (x resolution). yres() height cells (y resolution). xmin() minimum x coordinate extent. ymin() minimum y coordinate extent. xmax() maximum x coordinate extent. ymax() maximum y coordinate extent. is_cyclical() returns TRUE BirdFlow model transition last timestep first FALSE otherwise. n_parameters() number parameters BirdFlow model contains contain. number cells marginal matrices + sum dynamic mask first timestep (number un masked cells first timestep).  model dynamically masked equivalent n_active(x)^2 * n_transitons(x) + n_active(x)","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate BirdFlow model performance — evaluate_performance","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"Calculate several correlation projected distributions ebirdst distributions used train BirdFlow model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"","code":"evaluate_performance(x, distr_only = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"x BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"mean_step_cor Indicates average well model project single timestep. mean correlation, across timesteps, training (ebirdst) distribution projected forward one timestep, training distribution projected timestep. min_step_cor Indicates quality worst single step projection. minimum correlation (across timesteps) single step projection training distribution training distribution projected timestep. traverse_cor Indicates well model project timesteps. correlation last distribution projected iteratively fist training distribution; last training distribution. mean_distr_cor Indicates average well marginal preserves training distributions. mean correlation training distributions distributions calculated marginals. min_distr_cor Indicates well poorest marginal preserves training distribution. minium observed coorlation marginal training distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"\"Training distribution\" used describe ebirdst distributions used train BirdFlow models.  \"Marginal distribution\" describes distribution calculated row column sums marginal, joint probability matrix. \"Projected distribution\" used describe training distribution multiplied transition matrix (derived marginal distribution) project forward one timestep; multiplied repeatedly transition matrices project forward multiple timesteps. Correlations calculated non-dynamically masked cells.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/evaluate_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate BirdFlow model performance — evaluate_performance","text":"","code":"bf <- BirdFlowModels::amewoo evaluate_performance(bf) #> $mean_step_cor #> [1] 0.9918336 #>  #> $min_step_cor #> [1] 0.9726291 #>  #> $traverse_cor #> [1] 0.9464339 #>  #> $mean_distr_cor #> [1] 0.9890949 #>  #> $min_distr_cor #> [1] 0.9478764 #>"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"function converts collapsed distribution first (possibly ) dimension represents locations model expanded, raster state first two dimensions represent locations cell physical space (row, col) thus suitable plotting conversion spatial objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"","code":"expand_distr(distr, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"distr Either vector representing single distribution one value per location model matrix column vector. Higher dimensions allowed (unlikely); cases first dimension locations model. bf BirdFlow model geom component one.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"expanded version distr one additional dimension, first two dimensions rows columns space (raster) replace first dimension input.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/expand_distr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a collapsed distribution into a expanded, raster equivalent — expand_distr","text":"collapsed form single distribution stored vector. value can interpreted relative abundance probability finding bird corresponding location. special case vector mostly 0's single 1 case represents single position bird group birds, concentrated distribution. Additional dimensions can represent multiple timesteps /multiple individual birds, model runs etc. location information collapsed distribution easily accessible position vector ordered based row-major ordered unmasked cells extent, R uses column-major order.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","title":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","text":"function determine threshold values preserves given proportion value.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","text":"","code":"find_threshold(x, p)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","text":"x vector values p proportion x wish retain","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/find_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to determine the threshold in values that preserves a given\nproportion of the value. — find_threshold","text":"threshold values x dropping everything smaller threshold retains least proportion p total x","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix the dead ends currently present in the model — fix_current_dead_ends","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"internal function fix_current_dead_ends() zeros row column marginal leads current dead ends, eliminating transitions existing dead end states.  tends create new dead ends process called iteratively fix_dead_ends().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"","code":"fix_current_dead_ends(bf, de)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"bf BirdFlow model de (optional) output find_dead_ends()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_current_dead_ends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix the dead ends currently present in the model — fix_current_dead_ends","text":"BirdFlow model selected marginal rows columns zeroed .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":null,"dir":"Reference","previous_headings":"","what":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"sparsification (sparsify()) possible create models dead ends -  states can entered exited. occurs one marginal encodes transitions state next marginal transitions . functions find fix states.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"","code":"find_dead_ends(x)  fix_dead_ends(bf, max_attempts = 100)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"x BirdFlow model bf BirdFlow model max_attempts maximum number iterations try giving ","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"`find_dead_ends() returns data.frame columns: row dead end state, dead ends found empty (zero row) data.frame returned. fix_dead_ends() returns BirdFlow model additional marginal row columns zeroed . successful dead ends. also adds data.frame  fix_stats bf$metadata$sparse.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/fix_dead_ends.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find and fix inconsistencies in sparse BirdFlow models — find_dead_ends","text":"Consider two adjacent marginals; rows second columns first correspond species distribution timestep . every location model timestep four possibilities (1) first marginal's column non-zero values second marginal's row zero: forward transition state forward transition forward dead end; (2) situation reversed first marginals column zeros second marginal's corresponding row non-zero values, backward dead end (encountered projecting backwards time); (3) zeros: model fine state dropped; (4) non-zero values corresponding state valid can reached exited projecting forward backwards. Dead ends result lost density predict() errors entered route(). Based initial testing transitions dead end often low probability routing may work time occasionally fail. error occur subsequent iteration attempting sample bunch zero probability states.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"function converts raster representation data rows columns indicate position space vector representation contains active (masked) cells row major order - starting top left proceeding left right along row.  collapsed form used projecting flow model expanded form used export, import, visualize data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"","code":"flatten_raster(raster, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"raster Either matrix representing single bird distribution array representing multiple distributions dimensions: row, col, distribution. bf BirdFlow model geom component one.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"Either vector representing single distribution collapsed form , x represents multiple distributions,  matrix one distribution per column.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/flatten_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a raster bird distribution into its flattened, vector equivalent — flatten_raster","text":"","code":"bf <- BirdFlowModels::amewoo d <- get_distr( bf, 1) r <- expand_distr(d, bf) # convert to raster f <- flatten_raster(r, bf) # convert back to distribution stopifnot(all(d == f))"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"internal function to calculate the date of each BirdFlow timestep. — get_dates","title":"internal function to calculate the date of each BirdFlow timestep. — get_dates","text":"`get_dates() mostly copied st_week_dates() BirdFlowForescast Shiny application, generalized work various interval lengths, now intervals weeks n = 52.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"internal function to calculate the date of each BirdFlow timestep. — get_dates","text":"","code":"get_dates(year, n = 52)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"internal function to calculate the date of each BirdFlow timestep. — get_dates","text":"year year dates calculated n year broken many even intervals.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"internal function to calculate the date of each BirdFlow timestep. — get_dates","text":"data.frame doy day year associated midpoint interval. interval interval ID; range 1 n. date date associated interval's midpoint","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"internal function to calculate the date of each BirdFlow timestep. — get_dates","text":"necessity one week ends longer - 52 weeks = 264 days.  Ultimately, like retain date information eBird status trends data rather regenerate fitting model.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"extract distributions from BirdFlow models — get_distr","title":"extract distributions from BirdFlow models — get_distr","text":"get_distr return one distributions flattened form. single distribution returned vector; multiple columns matrix.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract distributions from BirdFlow models — get_distr","text":"","code":"get_distr(x, which = \"all\", from_marginals = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract distributions from BirdFlow models — get_distr","text":"x BirdFlow model indicates timesteps return. Can one integers indicating timesteps; character dates format year-month-day e.g. \"2019-02-25\"; Date objects;    \"\" return distributions timesteps. from_marginals TRUE x marginals distribution marginals even x also distributions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract distributions from BirdFlow models — get_distr","text":"either vector distribution single timestep matrix column distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_distr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"extract distributions from BirdFlow models — get_distr","text":"BirdFlow object stored distributions training distributions returned default unless from_marginals = TRUE case distributions calculated marginal returned. training distributions distributions calculated marginal similar.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"BirdFlow object dynamic mask controls subset active cells model active given timestep.  derived eBird Status Trends (S&T) distributions; cells zero S&T data timestep excluded model timestep, tracked dynamic mask.  dynamic mask dimensions distributions (see get_distr()) either vector n_active() single timestep matrix n_active() rows one timestep. values logical TRUE corresponding cells part model (given timestep).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"","code":"get_dynamic_mask(x, which = \"all\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"x BirdFlow object indicates timesteps return. Can one integers indicating timesteps; character dates format year-month-day e.g. \"2019-02-25\"; Date objects;    \"\" return distributions timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"vector matrix elements rows corresponding active cells model indicating whether cell included model given timestep.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_dynamic_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the dynamic mask from a BirdFlow object — get_dynamic_mask","text":"","code":"library(terra) # For plotting of spatRaster #> terra 1.7.29 bf <- BirdFlowModels::amewoo |> add_dynamic_mask() dm <- get_dynamic_mask(bf, c(1,  10, 21, 31, 42, 52)) r <- rasterize_distr(dm, bf) plot(r, legend = FALSE, mar = c(1.3, 1.3, 1.3, .3)  )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve BirdFlow metadata — get_metadata","title":"retrieve BirdFlow metadata — get_metadata","text":"get_metadata retreives information BirdFlow model: created, version eBird Status & Trends data used, whether sparsified,  etc.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve BirdFlow metadata — get_metadata","text":"","code":"get_metadata(x, what)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve BirdFlow metadata — get_metadata","text":"x BirdFlow model Indicates metadata return. defualt \"\" returns complete list. Options described details.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve BirdFlow metadata — get_metadata","text":"Metadata BirdFlow model. Potentially list.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"retrieve BirdFlow metadata — get_metadata","text":"may used options:","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve BirdFlow metadata — get_metadata","text":"","code":"library(BirdFlowModels) get_metadata(amewoo) #> $has_marginals #> [1] TRUE #>  #> $has_transitions #> [1] FALSE #>  #> $has_distr #> [1] TRUE #>  #> $n_transitions #> [1] 51 #>  #> $n_active #> [1] 1706 #>  #> $n_timesteps #> [1] 52 #>  #> $ebird_version_year #> [1] NA #>  #> $ebird_release_year #> [1] NA #>  #> $ebird_access_end_date #> [1] NA #>  #> $birdflow_preprocess_date #> [1] NA #>  #> $birdflow_model_date #> [1] \"2023-01-02 10:03:05.256454\" #>  #> $birdflow_version #> [1] 2 #>  #> $is_sparse #> [1] TRUE #>  #> $sparse #> $sparse$fix_stats #>   step pct_lost n_dead_ends #> 1    0 6.354389         172 #> 2    1 6.376854          83 #> 3    2 6.383977          37 #> 4    3 6.385986           9 #> 5    4 6.386376           1 #> 6    5 6.386384           0 #>  #> $sparse$method #> [1] \"conditional\" \"state\"       #>  #> $sparse$arguments #> $sparse$arguments$p #> [1] 0.99 #>  #>  #> $sparse$stats #>    model pct_zero pct_density_lost mean_step_cor min_step_cor traverse_cor #> 1   full  0.00000         0.000000     0.9947801    0.9831586    0.9484126 #> 2 sparse 98.94806         6.354389     0.9945607    0.9823753    0.9465323 #> 3  fixed 98.95086         6.386384     0.9945142    0.9823376    0.9464339 #>   mean_distr_cor min_distr_cor #> 1      0.9919662     0.9689286 #> 2      0.9927087     0.9685167 #> 3      0.9927038     0.9684455 #>  #> $sparse$pct_zero #> [1] 98.95086 #>  #> $sparse$pct_density_lost #> [1] 6.386384 #>  #>  get_metadata(amewoo, \"is_sparse\") #> [1] TRUE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve, crop, and transform Natural Earth data — get_naturalearth","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"convenience wrappers rnaturalearth functions. retrieve, crop, format, project Natural Earth data facilitate plotting BirdFlow spatial objects. output desired data coordinate reference system (CRS) extent x.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"","code":"get_naturalearth(   x,   type,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   country,   keep_buffer = FALSE,   force_old_method = FALSE,   ... )  get_states(   x,   country,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   keep_buffer = FALSE )  get_coastline(   x,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   keep_buffer = FALSE )  get_countries(   x,   scale = \"medium\",   buffer = 15,   keep_attributes = FALSE,   keep_buffer = FALSE )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"x BirdFlow, terra::SpatRaster, sf::sf, object can call terra::ext() terra::crs(). type type data retrieve. One \"coastline\", \"country\", \"states\" data included rnaturalearth; value accepted ne_download(). scale scale data return. Ignored type \"states\", otherwise passed one ne_download(). ne_coastline(), ne_countries(). Valid values 110, 50, 10, 'small', 'medium', 'large'. buffer buffer degrees (latitude longitude) add extent x prior cropping Natural Earth data WGS84. needed transformation CRS x data cover extent x. keep_attributes FALSE, default, attribute columns dropped facilitate clean plotting. country retrieving states get_states() get_naturalearth(type = \"states\") used select country. omitted, states countries returned. keep_buffer FALSE, default, transforming Natural Earth data cropped precise extent x. Set  TRUE keep buffer - useful overlaying Natural Earth data existing base R plot. force_old_method internal testing. default best uses.  TRUE use back transformed bounding box method even projection covered \"new\" cut seam method. ... arguments passed ne_download(). Possibly want use category = \"physical\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"sf object Natural Earth data CRS x.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"get_naturalearth() work called functions. two distinct calculation methods. Mollweid, Lambert Azimuthal Equal Area,  Albers Equal Area, Lambert Conformal Conic projections cut seam: Find longitude projection center (lon_0 proj4 string) determine longitude seam. Clip narrow (1 m) strip Natural Earth data transforming (WGS84) seam. Transform CRS x. now artifact free object containing global data set minus narrow strip seam. Crop destination extent x, keep_buffer = TRUE, extent plus approximate equivalent buffer. work well extent (including global) CRS based covered projections. projections back transform bounding box clip: Convert corners bounds x object WGS84. adds buffer (buffer) converted corners important guarantee still cover extent transform. Check see bounds wrap seam (180 deg meridian) break bounding box two . Crop bounding box boxes. Project cropped section x's CRS. Combine pieces one object. keep_buffer = FALSE crop exact extent x. steps usually prevent artifacts caused polygons lines shifted across bounds CRS. However, work extents projections particular unlikely work polar projections extents cover entire globe. cases fails setting buffer zero may easy solution. many projections method 1 variant work. may eventually cover projections first method. encounter use case work may submit issue; please include output crs(x) ext(x). get_states() requires rnaturalearthhires. Install : install.packages(\"devtools\") # already  devtools::install_github(\"ropensci/rnaturalearthhires\")","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_naturalearth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve, crop, and transform Natural Earth data — get_naturalearth","text":"","code":"bf <- BirdFlowModels::amewoo  coast <- get_coastline(bf)   if (FALSE) {  library(terra)  library(sf)  plot(rast(bf, 1))  plot(coast, add = TRUE)   }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a transition matrix from a BirdFlowR model — get_transition","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"function retrieves transition matrix BirdFlow object, possibly calculating marginal.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"","code":"get_transition(x, transition)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"x BirdFlow object transition transition code, e.g. \"T_01-02\"","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"transition matrix","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/get_transition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a transition matrix from a BirdFlowR model — get_transition","text":"get_transition() construct transition matrix marginals x transitions, return relevant stored transition matrix . format transition code \"T_[]-[]\" [] [] timesteps padded zeros. Direction important; \"T_03-04\" represents transition backward time. transition matrices structured multiply matrix distribution project either forward backwards. one distribution projected stored columns matrix dimensions(n_active(), n_distr()). Given marginal cell [, j] represents probability bird state prior timestep state j next, generate forward transition matrix divide row marginal sum transpose. Backwards transitions matrices generated dividing column sum, without transposing.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"function calculates square, distance matrix n_active() cells side. cell represents distance row index colum index treated locations state space; e.g. cell  [3, 8] represents distance locations 3 8 state space vector.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"","code":"great_circle_distances(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"n x n matrix containing pairwise distances kilometers every active cell BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/great_circle_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate great circle distances among BirdFlow object cells — great_circle_distances","text":"","code":"# Calculate great circle distance matrix library(terra) bf <- BirdFlowModels::rewbla gs <- great_circle_distances(bf)  # The above is all you need to use the function. # The rest of this is an exercise to visualize the error in CRS distances  # Compare to euclidean distances in projected CRS space i <- seq_len(n_active(bf)) xy <- as.data.frame(i_to_xy(i, bf)) eu <- as.matrix(dist(xy)) / 1000  # euclidean in CRS (km)  error_prop <- abs(gs - eu) / gs error_prop[is.nan(error_prop)] <- 0  mean_error <- apply(error_prop, 1, mean) # mean error for cell max_error <-  apply(error_prop, 1, max)  # max error for cell  # Calculate maximum error lines for each cell mel <- data.frame(i1 = 1:n_active(bf), i2 = apply(error_prop, 1, which.max)) xs <- t(cbind(i_to_x(mel$i1, bf), i_to_x(mel$i2, bf))) ys <- t(cbind(i_to_y(mel$i1, bf), i_to_y(mel$i2, bf)))  # Plot maximum error for each cell and a line to the cell where the distance # had that error. plot(rasterize_distr(as.numeric(max_error), bf)) title(main = \"Max proportional error\") matlines(xs, ys, col = rgb(0, 0, 0, .25), lty = 1, lwd = 1) mtext(\"lines connect cells to the cell for there is the greatest proportional error in distance\",      line = 0, cex = 0.7)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a BirdFlow object have certain compoenents — has","title":"Does a BirdFlow object have certain compoenents — has","text":"functions return information contents BirdFlow object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a BirdFlow object have certain compoenents — has","text":"","code":"has_marginals(x)  has_transitions(x)  has_distr(x)  has_dynamic_mask(x)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a BirdFlow object have certain compoenents — has","text":"x BirdFlow model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/has.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a BirdFlow object have certain compoenents — has","text":"logical indicating BirdFlow model relevant element","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Import BirdFlow models from HDF5 files — import_birdflow","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"function imports BirdFlow model HDF5 (Hierarchical Data Format version 5) file. workflow first use preprocess_species() download format data model fitting, producing HDF5 file; use BirdFlow Python software fit model add marginals hyperparameters HDF5 file; , finally import model import_birdflow().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"","code":"import_birdflow(hdf5, ..., version)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"hdf5 Path HDF5 file containing fitted BirdFlow model. ... Arguments passed version specific internal function. Likely used version 1 takes two additional arguments: tiff Path model geotiff species eBird species code.  appear species_code column data.frame returned auk::get_ebird_taxonomy() version (optional) force reading BirdFlow models particular version. Normally, determined metadata HDF5 file.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"importing may want call sparsify() reduce object size.  plan many calls route() predict() call build_transitions() well.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow.html","id":"hdf-file-version","dir":"Reference","previous_headings":"","what":"HDF5 file version","title":"Import BirdFlow models from HDF5 files — import_birdflow","text":"HDF5 BirdFlow model files internal version number incremented major changes HDF5 file structure. file version retained imported object. Version 1 predates BirdFlowR preprocessing contains marginals python objects, importing requires associated TIFF file extent distribution data. version number (1) kept \"/version\" within HDF5 file. Version 2 first version includes preprocessing BirdFlowR. include dynamic masking.  version number (2) stored  \"/metadata/birdflow_version\".  version 2 files include hyper parameters HDF5 read R. Version 3 marks transition dynamic masking, HDF5 created preprocessing gained \"/geom/dynamic_mask\" \"/distances\"  (great circle distance matrix).  version 2 version stored \"/metadata/birdflow_version\" unlike previous versions R package version preprocessing saved character format \"/metdata/birdflowr_version\". version 3 files imported R model fits hyperparameters saved $metadata$hyperparameters (list).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"import BirdFlow model from an hdf5 file — import_birdflow_v2","title":"import BirdFlow model from an hdf5 file — import_birdflow_v2","text":"function imports BirdFlow model data HDF5 file written python. works version 2 hdf5.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import BirdFlow model from an hdf5 file — import_birdflow_v2","text":"","code":"import_birdflow_v2(hdf5)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import BirdFlow model from an hdf5 file — import_birdflow_v2","text":"hdf5 Path hdf5 file","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import BirdFlow model from an hdf5 file — import_birdflow_v2","text":"BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":null,"dir":"Reference","previous_headings":"","what":"import BirdFlow model from an hdf5 file — import_birdflow_v3","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"function imports BirdFlow model data HDF5 file written python. works version 2 hdf5.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"","code":"import_birdflow_v3(hdf5)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"hdf5 Path HDF5 file","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_birdflow_v3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import BirdFlow model from an hdf5 file — import_birdflow_v3","text":"BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_prototype.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to import BirdFlow model from the Shiny App — import_prototype","title":"Function to import BirdFlow model from the Shiny App — import_prototype","text":"function imports BirdfFlow model data prototype Shiny application. stopgap.  Importing models ussually done import_birdflow.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_prototype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to import BirdFlow model from the Shiny App — import_prototype","text":"","code":"import_prototype(base_dir, species)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_prototype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to import BirdFlow model from the Shiny App — import_prototype","text":"base_dir base directory shiny app species ebird species code model","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_prototype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to import BirdFlow model from the Shiny App — import_prototype","text":"BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/import_prototype.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to import BirdFlow model from the Shiny App — import_prototype","text":"Forward transition matrices transposed read transitions can implemented M %*% d.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to convert among spatial indices — index conversions","title":"Functions to convert among spatial indices — index conversions","text":"functions convert among different ways referencing locations BirdFlow models output. convert among spatial coordinates (x y), raster row col indices, index along location vector. latlon_to_xy() xy_to_latlon() convert WGS 1984 latitude longitude x y coordinates BirdFlow object's coordinate reference system (CRS).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to convert among spatial indices — index conversions","text":"","code":"x_to_col(x, bf)  y_to_row(y, bf)  row_to_y(row, bf)  col_to_x(col, bf)  i_to_rc(i, bf)  i_to_row(i, bf)  i_to_col(i, bf)  i_to_x(i, bf)  i_to_y(i, bf)  i_to_xy(i, bf)  rc_to_i(row, col, bf)  xy_to_i(x, y, bf)  latlon_to_xy(lat, lon, bf)  xy_to_latlon(x, y, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to convert among spatial indices — index conversions","text":"x, y x y coordinates BirdFlow model's CRS. typically represents easting northing meters. functions require x y two column matrix containing x y columns order can passed x case y omitted. bf BirdFlow model row, col row column index cell BirdFlow model associated raster data. Alternatively, two column matrix containing row column indices columns 1 2 respectively can passed row case col argument omitted. index along state vector contains data unmasked cells. lat, lon latitude longitude WGS 1984 (EPSG:4326). two column matrix data frame can also passed lat.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to convert among spatial indices — index conversions","text":"x_to_col(x, bf) y_to_row(y, bf) return column row index x y coordinate falls within. row_to_y(row, bf) col_to_x(col, bf) return y x coordinate center row column. i_to_row(, bf) i_to_col(, bf) return row column index corresponding vector state index, . i_to_rc(, bf) returns two column matrix row column index raster corresponding index, vector state. i_to_x(, bf) i_to_y(, bf) return x y coordinate vector state index, . i_to_xy(, bf) returns two column matrix x y coordinates corresponding index, vector state space. rc_to_i(row, col, bf) xy_to_i(x, y, bf) return state space index corresponding x y coordinates row column indices. latlon_to_xy(lat, lon, bf) returns two column matrix x y coordinates corresponding supplied latitude longitude. output CRS bf (crs(bf)). xy_to_latlon(x, y, bf) returns two column matrix latitude longitude points WGS84 given coordinates BirdFlow object's CRS.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/index_conversions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to convert among spatial indices — index conversions","text":"general made functions mirror NA input output; functions return rows, columns, index () return NA input within extent; () within active cells. CRSs longitude translates x coordinate latitude y coordinate. traditional order coordinates lat lon; row col, x y consistent, still used , .e. lat, row, y generally correlated, first, first, second argument order.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate log likelihoods of observed bird movements — interval_log_likelihood","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"function calculates log likelihoods inferred bird movement based two observation points (time space). second point must different timestep (week) first, location can remain .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"","code":"interval_log_likelihood(intervals, observations, bf, one_at_a_time = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"intervals data.frame describes intervals (movements stationary periods) log likelihood calculated referencing id column observations. observation id starting location date observation id ending location date ... additional columns included returned object used function. probably include interval ID. observations data.frame describing observations birds row individual bird, location, date. id Unique observation identifier lon , lat longitude latitude observation WGS84 (EPSG:4326) date date associated observation. See lookup_timestep() valid formats. ... columns allowed, ignored. bf BirdFlow object one_at_a_time Mainly debugging. FALSE, default, intervals start timestep processed together, otherwise interval processed separately. Results identical, TRUE uses less memory slower.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"intervals table returned  along new columns: log_likelihood model derived log likelihood interval null_ll log likelihood interval based null model assumes eBird S&T distribution species end point lag number timesteps (likely weeks) start end interval exclude TRUE log likelihood calculated interval, case also TRUE one remaining columns indicating . not_active TRUE start end point within model mask dynamic_mask TRUE ebirds S&T assigned zero probability start end point associated date therefore excluded dynamic mask state based sparsification sparse TRUE model assigned zero probability interval due reasons. likely due sparsification eliminating possible routes start end point. same_timestep TRUE start end timesteps , lag zero bad_date TRUE date parsed, bf partial model date falls uncovered portion year returned table rows 1:1 correspondence input intervals table.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"core function calling predict() distribution starting location hot (value 1) locations zero extracting probability ending week location. log probability returned log_likelihood column. null model assumes ebird S&T distribution thus null_ll column contains log probability density S&T distribution ending week location. observations intervals separated two tables allow flexibility assigning evaluating intervals.  tracking data frequency observations much greater weekly S&T data lot choices made function leaves decisions user.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/interval_log_likelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate log likelihoods of observed bird movements — interval_log_likelihood","text":"","code":"bf <- BirdFlowModels::rewbla observations <- BirdFlowModels::rewbla_observations intervals <- BirdFlowModels::rewbla_intervals intervals <- intervals[1:20, ] # toy example intervals  <- interval_log_likelihood(intervals, observations, bf) head(intervals, 3) #>           bird_id  from    to interval_id log_likelihood   null_ll lag exclude #> 1017 B19221769152  2223  2224        1017      -3.157935 -4.453952  47   FALSE #> 4775 B77724064244 10149 10150        4775      -3.429942 -4.870969  50   FALSE #> 2177 B29252852992  4625  4626        2177      -5.135462 -5.816720  21   FALSE #>      not_active dynamic_mask sparse same_timestep bad_date #> 1017      FALSE        FALSE  FALSE         FALSE    FALSE #> 4775      FALSE        FALSE  FALSE         FALSE    FALSE #> 2177      FALSE        FALSE  FALSE         FALSE    FALSE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Are locations and distributions covered by the model for the given time — is_location_valid","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"location time valid model non zero probability  movement location time. invalid state either zero probability movement , covered model . Similarly distributions valid probability cells movement modeled.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"","code":"is_location_valid(bf, i, x, y, timestep, date)  is_distr_valid(bf, distr, timestep, date, return_mask = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"bf BirdFlow object state space index (location) x x coordinates bf's CRS (crs(bf)) y y coordinate timestep timestep date date format accepted lookup_timestep() distr one distributions vector matrix form representing probability active cell model. return_mask TRUE return mask dimensions distr TRUE cells can valid non-zero values. conditioned timestep associated distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"logical vector, 'TRUEif validFALSEotherwise values input location distribution. Seereturn_mask` exception.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"is_location_valid() 2 ways inputting locations. one used: either vector location indices (see xy_to_i()), x y. functions time shold input either timestep date. number timesteps dates either 1 match number locations distributions; singular applied . location invalid following apply: location model extent location correspond active cell model; masked static mask. location valid state given timestep date; excluded dynamic mask state sparsification see sparsify(). timestep valid, date associated timestep. second applies BirdFlow models cover whole year. distribution invalid similar reasons applied locations non-zero values.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/is_location_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are locations and distributions covered by the model for the given time — is_location_valid","text":"","code":"bf <- BirdFlowModels::amewoo timestep  <- 3  # Sample two valid locations from a distribution distr <- get_distr(bf, timestep, from_marginals = TRUE) locs <- sample_distr(distr, n = 2) i <- apply(locs, 2, function(x) which(as.logical(x))) is_location_valid(bf, i, timestep = timestep) #> [1] TRUE TRUE  # Sample a few invalid locations i <- sample(which(distr == 0), 2) is_location_valid(bf, i, timestep = timestep) #> [1] FALSE FALSE"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"Retrieve timesteps associated season species modeled BirdFlow object, possibly buffer (timesteps) added .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"","code":"lookup_season_timesteps(x, season, season_buffer = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"x BirdFlow object season season lookup timesteps one four seasons returned species_info(); one alternative  names listed  details; \"\" timesteps model. season_buffer number extra timesteps add beginning end season.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"series integers indicating timesteps correspond (possibly buffered) season.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"season '' one four seasons alternate names listed .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_season_timesteps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup breeding, non-breeding, or migration season timesteps — lookup_season_timesteps","text":"","code":"bf <- BirdFlowModels::rewbla lookup_season_timesteps(bf, \"breeding\", season_buffer = 0) #>  [1] 18 19 20 21 22 23 24 25 26 27 28 29 30 31"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":null,"dir":"Reference","previous_headings":"","what":"lookup timestep — lookup_timestep","title":"lookup timestep — lookup_timestep","text":"function returns timestep timesteps associated x particular BirdFlow model, x represents dates timesteps various formats.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lookup timestep — lookup_timestep","text":"","code":"lookup_timestep(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lookup timestep — lookup_timestep","text":"x character object representing date year-month-day e.g. \"2023-03-29\", date object (Date, POSIXct, POSIXlt), numeric timestep, character representing timestep e.g. \"t1\", \"\" timesteps model. bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lookup timestep — lookup_timestep","text":"vector timesteps corresponding elements x","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"lookup timestep — lookup_timestep","text":"far BirdFlow objects timesteps corresponding weeks year matching S&T timesteps. However, likely add ability make BirdFlow objects model part year. timestep values necessarily match weeks. example model covers Week 6, 20  timesteps 1 15. x numeric assumed already timestep. useful using function internally resolve arguments functions like route(), predict(), get_distr().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"lookup timestep — lookup_timestep","text":"","code":"bf <- BirdFlowModels::amewoo lookup_timestep(c(\"2001-3-23\", \"2022-12-05\"), bf) #> [1] 12 49"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup a sequence of timesteps — lookup_timestep_sequence","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"lookup_timestep_sequence() returns ordered vector timesteps possibly crossing year boundary.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"","code":"lookup_timestep_sequence(x, start, end, direction, season_buffer, n)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"x BirdFlow object start starting points time specified timesteps, character dates, date objects;  may set \"\" season name interpreted lookup_season_timesteps(). end start timestep date end timestep date indicating ending point time. direction Either \"forward\" \"backward\". start end represent dates direction used error thrown direction consistent direction indicated dates. start end dates, direction defaults \"forward\" start end either timesteps (numeric); end omitted start \"\" season name. start timestep date, end omitted, n integer direction defaults \"forward\". season_buffer used start season. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n Alternative end specifying sequence end. n indicates many transitions sequence direction defaults \"forward\" n used.  sequence n + 1 timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"integer sequence timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"start end fall one four categories treated differently: start end numeric treated timesteps direction used route either forward (default) backwards , possibly passing year boundary. start end date objects characters treated dates, direction determined dates:\"forward\" chronological order, \"backwards\" otherwise.  direction argument used along date input consistent implicit direction dates, error thrown. start character end missing assumed start key word either \"\" timesteps, season name. Season names passed lookup_season_timesteps() along season_buffer. direction followed default \"forward\". start timestep date, end missing, n missing n transitions start added sequence direction defaults \"forward\". results n + 1 timesteps sequence.  sequence wrap around year boundary appropriate x cyclical.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_timestep_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup a sequence of timesteps — lookup_timestep_sequence","text":"","code":"bf <- BirdFlowModels::rewbla  # Using timesteps - direction defaults to \"forward\" lookup_timestep_sequence(bf, 50, 3)  # c(50:52, 1:3) #> [1] 50 51 52  1  2  3 lookup_timestep_sequence(bf, 50, 3, direction = \"backward\") # 50:3 #>  [1] 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 #> [26] 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  # Using dates - order of dates determines direction lookup_timestep_sequence(bf, \"2023-12-1\", \"2024-01-20\") #> [1] 48 49 50 51 52  1  2  3 lookup_timestep_sequence(bf, \"2024-01-20\", \"2023-12-1\") #> [1]  3  2  1 52 51 50 49 48  # \"all\" - direction defaults to \"forward\" lookup_timestep_sequence(bf, \"all\") #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #> [51] 51 52 lookup_timestep_sequence(bf, \"all\", direction = \"backward\") #>  [1] 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 #> [26] 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3 #> [51]  2  1  # Season - direction defaults to \"forward\", season_buffer defaults to 1 lookup_timestep_sequence(bf, \"prebreeding_migration\") #>  [1]  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 lookup_timestep_sequence(bf, \"prebreeding_migration\", season_buffer = 0,                          direction = \"backward\") #>  [1] 17 16 15 14 13 12 11 10  9  8  7  6  5"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"lookup_transitions() returns ordered vector transition names connect start end. start end dates order determines whether transitions flow forward backward time.  timesteps direction argument used indicate whether project \"forward\" \"backward\" time possibly passing year boundary.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"","code":"lookup_transitions(x, start, end, direction, season_buffer, n)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"x BirdFlow object start starting points time specified timesteps, character dates, date objects;  may set \"\" season name interpreted lookup_season_timesteps(). end start timestep date end timestep date indicating ending point time. direction Either \"forward\" \"backward\". start end represent dates direction used error thrown direction consistent direction indicated dates. start end dates, direction defaults \"forward\" start end either timesteps (numeric); end omitted start \"\" season name. start timestep date, end omitted, n integer direction defaults \"forward\". season_buffer used start season. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n Alternative end specifying sequence end. n indicates many transitions sequence direction defaults \"forward\" n used.  sequence n + 1 timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"character vector named transitions required get start  end","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/lookup_transitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup a series of transitions connecting two dates or timesteps — lookup_transitions","text":"Transitions named \"T_[]-[]\" [] [] timesteps padded zeros. Direction important; \"T_03-04\" represents transition backward time.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"function to determine the extent of a SpatRaster — make_mask","title":"function to determine the extent of a SpatRaster — make_mask","text":"function returns logical single layer SpatRaster TRUE x non-zero values layer. NA count non-zero.  result cropped extent data x. used Birdflow preprocess data.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to determine the extent of a SpatRaster — make_mask","text":"","code":"make_mask(x, count = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to determine the extent of a SpatRaster — make_mask","text":"x SpatRaster, typically multilayered containins distribution species time. count = FALSE","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to determine the extent of a SpatRaster — make_mask","text":"single layer SpatRaster CRS, alignment, resolution x; cropped extent data x.  count = FALSE result logical TRUE non-zero cells layer x FALSE otherwise.  count = TRUE result integer count number timesteps cell appears (0 52 given weekly steps).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/make_mask.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"function to determine the extent of a SpatRaster — make_mask","text":"get_data_mask currently public function may made private future versions package.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"marginal statistics — marginal_stats","title":"marginal statistics — marginal_stats","text":"Internal functions calculate sum marginals percent marginal values zero.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"marginal statistics — marginal_stats","text":"","code":"marginal_stats(bf)  sum_marginals(bf)  calc_pct_zero(bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"marginal statistics — marginal_stats","text":"bf BirdFlowModel","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"marginal statistics — marginal_stats","text":"marginal_stats() returns list sum sum marginals pct_zero percent values across marginals zero. sum_marginals() returns sum marginals. calc_pct_zero() returns percent marginal values zero","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/marginal_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"marginal statistics — marginal_stats","text":"used sparsify fix_dead_ends.  marginal_stats slightly efficient calling two functions independently.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/new_BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","title":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","text":"Private function create empty shell BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/new_BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","text":"","code":"new_BirdFlow()"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/new_BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Private function to create the empty shell of a BirdFlow object — new_BirdFlow","text":"empty BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bird movement vectors — plot_movement_vectors","title":"Plot bird movement vectors — plot_movement_vectors","text":"plots mean movement every cell BirdFlow model given starting time, based transition probabilities following transition.  arrow starts cell center ends average location projected Birds cell. line width alpha (transparency) set arrows visual weight higher probability bird starting location time.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bird movement vectors — plot_movement_vectors","text":"","code":"plot_movement_vectors(bf, start = 1, direction = \"forward\", mv)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bird movement vectors — plot_movement_vectors","text":"bf BirdFlow object start starting timestep transition modeled direction \"forward\" default. Set \"backward\" calculate vectors transition backwards time. mv optional primarily internal use animate_movement_vectors() allows explicitly providing movement vectors data frame, case start direction ignored.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bird movement vectors — plot_movement_vectors","text":"object inherits classes gg ggplot can plotted print().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot bird movement vectors — plot_movement_vectors","text":"Importantly, visual representation transitions encoded model, average movement bird given cell given point time, involve birds starting cell birds passing starting locations.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/plot_movement_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bird movement vectors — plot_movement_vectors","text":"","code":"bf <- BirdFlowModels::amewoo plot_movement_vectors(bf, start = 7)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict bird distributions — predict.BirdFlow","title":"Predict bird distributions — predict.BirdFlow","text":"predict() projects bird distributions future past. Given initial distribution, start end timestep date, predict() generates probability distributions timestep start end.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict bird distributions — predict.BirdFlow","text":"","code":"# S3 method for BirdFlow predict(object, distr, start, end, direction, season_buffer, n, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict bird distributions — predict.BirdFlow","text":"object BirdFlow model object distr starting distribution start starting points time specified timesteps, character dates, date objects;  may set \"\" season name interpreted lookup_season_timesteps(). end start timestep date end timestep date indicating ending point time. direction Either \"forward\" \"backward\". start end represent dates direction used error thrown direction consistent direction indicated dates. start end dates, direction defaults \"forward\" start end either timesteps (numeric); end omitted start \"\" season name. start timestep date, end omitted, n integer direction defaults \"forward\". season_buffer used start season. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n Alternative end specifying sequence end. n indicates many transitions sequence direction defaults \"forward\" n used.  sequence n + 1 timesteps. ... required consistency generic method, used.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict.BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict bird distributions — predict.BirdFlow","text":"multiple starting distributions input matrix result array dimensions: location, distribution, time. one input distribution result matrix dimensions: location time.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":null,"dir":"Reference","previous_headings":"","what":"predict the number of parameters based on resolution — predict_params","title":"predict the number of parameters based on resolution — predict_params","text":"function called preprocess_species() predicts many parameters model likely different resolution given set stats number cells area timestep current resolution, calculated calc_abundance_stats()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predict the number of parameters based on resolution — predict_params","text":"","code":"predict_params(a_stats, res, adjustment = 0.4)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predict the number of parameters based on resolution — predict_params","text":"a_stats output calc_abundance_stats() used component area vector area square meters unmasked cells timestep. res cell (presumed square) resolution km. adjustment used","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predict the number of parameters based on resolution — predict_params","text":"estimated number parameters given resolution res","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/predict_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"predict the number of parameters based on resolution — predict_params","text":"predict_params() calculates preliminary estimate based inaccurate assumption area covered cells two resolutions. However, changing resolution fine cells underlying occupied coarse cells occupied thus increasing resolution number cells underestimated decreasing resolution overestimated. amount bias depends configuration occupied cells fragmented occupied areas resulting greater bias. adjustment allows compensating bias. adjustment multiplied proportional change resolution: (res2 - res1)/res1 initial area based estimate (possibly negative) result added area based estimate. example doubling resolution proportional change 1  adjustment 0.35 end adding 35% initial estimate. Conversely halving resolution proportional change -.5 end subtracting 17.5% estimate.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"Write template BirdFlow object hdf5 file based distribution data downloaded ebirdst. object complete except marginals transitions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"","code":"preprocess_species(   species,   out_dir,   res,   hdf5 = TRUE,   tiff = FALSE,   overwrite = TRUE,   crs,   clip,   max_params,   gpu_ram = 12,   skip_quality_checks = FALSE,   dummy_dynamic_mask = FALSE )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"species species format accepted ebirdst::get_species() out_dir output directory, files written . Required unless tiff hdf5 TRUE.  File names created incorporate species code, resolution, eBird version year. res target resolution BirdFlow model kilometers. res omitted resolution results less thanmax_params parameters used, also minimizing resolution limiting number significant digits. hdf5 TRUE (default) hdf5 file exported. tiff set TRUE export geoTIFF files. needed fit BirdFlow model. overwrite TRUE (default) pre-existing output files overwritten. FALSE pre-existing files result error. crs coordinate reference system (CRS) use.  Defaults custom projection eBird assigned species - see ebirdst::load_fac_map_parameters()). interpreted terra::crs() generate well known text representation CRS. clip polygon path file containing polygon. must CRS either SpatVector() object produce one called vect(clip) max_params maximum number fitted parameters BirdFlow model contain. Ignored res set.  Otherwise resolution chosen yields many fitted parameters. See gpu_ram default way setting max_params res. gpu_ram Gigabytes ram GPU machine fit models. res max_params missing used estimate max_paramswhich , turn, used determine resolution. Ignored either res max_params set. skip_quality_checks TRUE preprocess species even four ranges modeled (based ebirdst_runs()). dummy_dynamic_mask set TRUE force cells dynamic mask TRUE. creates BirdFlow object dynamic mask component compatible current BirdFlowR package mimics older  predynamic mask BirdFlow models.  fit resulting object transitions every timestep among active cells.  reason set TRUE comparsion testing quality control transition, parameter may eventually dropped.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"returns BirdFlow model object lacks marginals, otherwise complete.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"maximum-number-of-parameters","dir":"Reference","previous_headings":"","what":"Maximum number of parameters","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"maximum number parameters can fit machine dependent. 2023-02-10 tested different resolutions \"amewoo\" identified bounds maximum. number parameters number unmasked cells first timestep + total number cells marginals calculated dynamic mask. gpu_ram used (res max_parameters ) max_parameters set 23,224,801 * gpu_ram (lower two values table ). heuristic determine resolution given maximum number parameters must estimate number cells covered data different resolution, noisy process, iteratively tries find smallest resolution exceed max_params rounds slightly larger resolution (fewer parameters).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/preprocess_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prepare eBird Status and Trends data for BirdFlow model fitting — preprocess_species","text":"","code":"if (FALSE) {   bf <- preprocess_species(\"amewoo\", tiff = FALSE, hdf5 = FALSE )  plot(rasterize_distr(get_distr( bf, c(1, 26)), bf))  # Create clip polgyon as an sf object # Use the extent rectangle but with western edge moved in # The clip can be anything that terra::vect will process into a polygon e <- ext(bf) e[1] <- -1500000 coords <- matrix(c(e[1], e[3],                    e[1], e[4],                    e[2], e[4],                    e[2], e[3],                    e[1], e[3]), ncol = 2, byrow = TRUE) sfc <- st_sfc(st_polygon(list(coords)), crs = crs(bf)) clip <- st_sf(data.frame(id = 1, geom = sfc))  bfc <- preprocess_species(\"amewoo\", tiff = FALSE,                          hdf5 = FALSE, clip = clip ) # clipped bird flow   plot(rasterize_distr(get_distr(bfc, 1), bfc))   }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Print BirdFlow models — print.BirdFlow","title":"Print BirdFlow models — print.BirdFlow","text":"print method BirdFlow objects.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print BirdFlow models — print.BirdFlow","text":"","code":"# S3 method for BirdFlow print(x, ...)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print BirdFlow models — print.BirdFlow","text":"x BirdFlow object ... arguments passed methods","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/print.BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print BirdFlow models — print.BirdFlow","text":"x returned invisibly unchanged","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to convert a BirdFlow object or distribution into a SpatRaster — rasterize","title":"Functions to convert a BirdFlow object or distribution into a SpatRaster — rasterize","text":"rasterize_distr() creates SpatRaster similar created terra::rast() one distributions compact vector form. rast() converts BirdFlow object directly SpatRaster.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to convert a BirdFlow object or distribution into a SpatRaster — rasterize","text":"","code":"rasterize_distr(distr, bf)  # S4 method for BirdFlow rast(x, which = \"all\")"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to convert a BirdFlow object or distribution into a SpatRaster — rasterize","text":"distr distribution vector form matrix column represents different distribution. bf BirdFlow object. x BirdFlow object indicates timesteps return. Can one integers indicating timesteps; character dates format year-month-day e.g. \"2019-02-25\"; Date objects;    \"\" return distributions timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/rasterize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to convert a BirdFlow object or distribution into a SpatRaster — rasterize","text":"terra::SpatRaster object.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"reformatt distr time labels based on birdflow_options(","title":"reformatt distr time labels based on birdflow_options(","text":"internal function change labels object containing distributions match time format user specified global options. Internally distributions stored generated labels based timestep (\"t1\"  etc.).","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reformatt distr time labels based on birdflow_options(","text":"","code":"reformat_distr_labels(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reformatt distr time labels based on birdflow_options(","text":"x object containing bird distributions bf BirdFlow object (used date information)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reformatt distr time labels based on birdflow_options(","text":"x (potentially) new labels","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_distr_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reformatt distr time labels based on birdflow_options(","text":"March 15, 2023 experimenting adding attribute \"time\" vector distribution keep track time label. one distribution stored matrix colnames store time associated distribution. function currently returns input object resolve labels unlabled expected label format.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":null,"dir":"Reference","previous_headings":"","what":"reformat timestep labels — reformat_timestep","title":"reformat timestep labels — reformat_timestep","text":"given vector timestep labels provide vector formatted labels based value birdflow_options(\"time_format\") (see function options.)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reformat timestep labels — reformat_timestep","text":"","code":"reformat_timestep(x, bf)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reformat timestep labels — reformat_timestep","text":"x one (vector) (matrix) distributions, column lablels consisting \"t\" timestep. bf BirdFlow object","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reformat timestep labels — reformat_timestep","text":"x update column labels, dictated birdflow_options(\"time_format\")","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/reformat_timestep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reformat timestep labels — reformat_timestep","text":"Internally distributions labled \"t\" timestep integer. returning user reformat_distr_labels() called change format turn calls function.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate BirdFlow routes — route","title":"Generate BirdFlow routes — route","text":"route() projects bird positions time based probabilities embedded BirdFlow model. output linear, stochastic routes.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate BirdFlow routes — route","text":"","code":"route(   x,   x_coord,   y_coord,   n_each,   row,   col,   start,   end,   direction,   season_buffer,   n )"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate BirdFlow routes — route","text":"x BirdFlow object x_coord, y_coord One sets coordinates identifying starting positions. n_each Optional, provided starting position duplicated many times. n_each can single integer vector one integer per starting position. row, col One row column indices begin routing . alternative x_coord y_coord sets parameters used time. start starting points time specified timesteps, character dates, date objects;  may set \"\" season name interpreted lookup_season_timesteps(). end start timestep date end timestep date indicating ending point time. direction Either \"forward\" \"backward\". start end represent dates direction used error thrown direction consistent direction indicated dates. start end dates, direction defaults \"forward\" start end either timesteps (numeric); end omitted start \"\" season name. start timestep date, end omitted, n integer direction defaults \"forward\". season_buffer used start season. season_buffer passed lookup_season_timesteps() defaults 1; number timesteps extend season end. n Alternative end specifying sequence end. n indicates many transitions sequence direction defaults \"forward\" n used.  sequence n + 1 timesteps.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate BirdFlow routes — route","text":"likely change. Currently returns list : points data.frame coordinates, date, route id lines sf object containing one line per route.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":null,"dir":"Reference","previous_headings":"","what":"generate migration routes from a BirdFlow model — route_migration","title":"generate migration routes from a BirdFlow model — route_migration","text":"create stochastic migration routes species sampling appropriate starting locations routing duration migration window.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate migration routes from a BirdFlow model — route_migration","text":"","code":"route_migration(bf, n, migration = \"prebreeding\", season_buffer = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate migration routes from a BirdFlow model — route_migration","text":"bf BirdFlow model n number routes generate migration \"prebreeding\", \"pre\", \"spring\" prebreeding migration; \"postbreeding\", \"post\", \"fall\" postbreeding migration. season_buffer buffer timesteps (likely weeks) add beginning end season. default 1 means start week metadata suggests season starts continue one week past end.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate migration routes from a BirdFlow model — route_migration","text":"likely change. Currently returns list : points data.frame coordinates, date, route id lines sf object containing one line per route.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"generate migration routes from a BirdFlow model — route_migration","text":"two migration periods defined based species information BirdFlow model: prebreeding migration starts species_info(\"nonbreeding_end\") ends species_info(\"breeding_start\") postbreeding migration starts species_info(\"breeding_end\") ends species_info(\"nonbreeding_start\")","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/route_migration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate migration routes from a BirdFlow model — route_migration","text":"","code":"bf <-  BirdFlowModels::amewoo   rts <- route_migration(bf, 2)   plot(rts$lines)    head(rts$points) #>          x       y route timestep       date #> 1 474934.2 3982093     1        2 2019-01-11 #> 2 474934.2 3982093     1        3 2019-01-18 #> 3 474934.2 3982093     1        4 2019-01-25 #> 4 794917.3 4782052     1        5 2019-02-01 #> 5 794917.3 4782052     1        6 2019-02-08 #> 6 794917.3 4782052     1        7 2019-02-15"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample locations from a distribution — sample_distr","title":"Sample locations from a distribution — sample_distr","text":"function treats distr one probability distributions converts single location assigning 1 one value converting rest 0.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample locations from a distribution — sample_distr","text":"","code":"sample_distr(distr, n = 1)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample locations from a distribution — sample_distr","text":"distr vector representing single distribution; matrix respresenting one distribution per column, (unlikely)  array first dimension represents model states. values distr treated relative probability species position. n used distr vector representing single model state, case model state sampled n times generate matrix representing n sampled locations distribution.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample locations from a distribution — sample_distr","text":"object ussually dimensions distr (see n) single location (containing 1) remaining locations 0's.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sample_distr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample locations from a distribution — sample_distr","text":"","code":"# Generate a hypothetical state space vector # representing the probability of finding a bird in each location. # This is based on a normal distribution with higher probabilities in the # center of the vector. s <- dnorm(seq(-2, 2, by = .25)) s <- s / sum(s)  # sample it once loc <- sample_distr(s)  # sample it 200 times locations <- sample_distr(s, 200)  if (FALSE) { # Plot the probability of each location plot(1:length(s), s, xlab = \"location\", ylab = \"prob\") # Plot the number of times each location was selected plot(1:length(s), apply(locations, 1, sum),      xlab = \"location\", ylab = \"times sampled\") }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"shorten and expand distance matrices — shorten_distance_matrix","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"functions facilitate storing just non-duplicated elements distace matrix vector hdf5 file. Since distance matrix symetrical zero's diagonal distances can stored vector contains fewer half values full matrix.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"","code":"shorten_distance_matrix(dm)  expand_distance_matrix(vals)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"dm distance matrix, symetrical n x n, matrix contains distances among n locations. values values lower triangle distance matrix row major order.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"shorten_distance_matrix() returns vector values. expand_distance_matrix() returns full matrix given vector.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"shorten_distance_matrix() extracts lower triangle column major order distance matrix. expand_distance_matrix() reassemble full distance matrix purpose halve number values stored hdf5 file. 5 x 5 distance matrix values corresponding numbered cells . Due symmetry distance matrix equivalent upper triangle row major order - probably treated python.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/shorten_distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"shorten and expand distance matrices — shorten_distance_matrix","text":"","code":"if (FALSE) { x <- runif(5, 1, 100) y <- runif(5, 1, 100) dm <- as.matrix(dist(cbind(x, y))) a <- shorten_distance_matrix(dm) dm2 <- expand_distance_matrix(a) all.equal(dm, dm2, check.attributes = FALSE) }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":null,"dir":"Reference","previous_headings":"","what":"sparsify BirdFlow models — sparsify","title":"sparsify BirdFlow models — sparsify","text":"Set low values zero BirdFlow model marginals reduce object size.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sparsify BirdFlow models — sparsify","text":"","code":"sparsify(x, method, p, fix = TRUE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sparsify BirdFlow models — sparsify","text":"x BirdFlow model method One \"state\", \"conditional\", \"marginal\", \"model\"; \"state\" paired one methods character vector (c(\"state\", \"marginal\")) single string (\"state+conditional\"). See \"Methods\" section details. p Required unless method = \"state\" control proportion probability density retained sparsification process. See \"Methods\" . fix TRUE call fix_dead_ends() eliminate dead ends sparse model. Defaults TRUE, unless method \"state\" case forced FALSE state method create dead ends.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sparsify BirdFlow models — sparsify","text":"BirdFlow object many values marginals set zero. metadata also updated sparsification statistics. marginals standardized sum 1.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sparsify BirdFlow models — sparsify","text":"BirdFlow model fitting algorithm predict complete zero, however many marginal values close zero little impact model predictions. sparsify() forces small values zero goal saving memory, reducing file size, decreasing run time. Marginals stored sparse matrices (Matrix::Matrix(x , sparse = TRUE) ) non-zero values consume memory.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"sparsify BirdFlow models — sparsify","text":"four sparsification methods. first \"state\" use parameters eliminates model states entirely. three remaining proportion based methods use p control amount sparsification; p target proportion density retain eliminating values (calculated) threshold. different proprtional methods thresholds calculated applied either whole model (model)  repeatedly components (conditional, marginal). state State based sparsification eliminates states (time space) zero training, ebirdst, distributions, marginals marginal rows zeroed correspond zeroes preceding timestep's distribution columns zeroed correspond zeroes following timestep's distribution.  Thus cells marginal represent joint probability involving state zero either distributions zeroed , essentially dropping states model. model model sparsification values marginals pooled threshold chosen entire model zeroing values threshold results target proportion, p, model's density remaining. marginal threshold chosen applied separately marginal model.  Ultimately, p achieved model whole threshold cells set zero varies across marginals. conditional method targets (1 - p) forward backward conditional probabilities zeroed . Conditional probability calculating dividing cells row column row columns total. method thresholds chosen independently row column marginal prior zeroing cells fall either row column thresholds set zero. likely results marginal model whole retaining less p density. Theoretically somewhere p - 1 2 * (p - 1) density lost. higher value achieved row column methods overlap cells select; lower value complete agreement. practice dropped proportion likely near middle range. Ultimately proportional methods p tuned based performance sparsified model, even though method hit target precisely still work tuning parameter. possible combine proportional methods state based method passing two methods vector. done state based sparsification done second affected values marginal.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/sparsify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sparsify BirdFlow models — sparsify","text":"","code":"if (FALSE) { # Full models are huge so we don't distribute them. # Assuming you have an hdf5 file wit a full model you could run: bf <- import_birdflow(hdf5_path) sbf <- sparsify(bf, method = \"marginal+state\", p = 0.99) }"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve species information from a BirdFlow model — species_info","title":"retrieve species information from a BirdFlow model — species_info","text":"species_info() species() return species data stored BirdFlow model. differ species() returns common name default provides succinct way get species name.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve species information from a BirdFlow model — species_info","text":"","code":"species_info(x, what)  species(x, what)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve species information from a BirdFlow model — species_info","text":"x BirdFlow model \"\" information (list) name (see details) desired information. omitted species() defaults \"common_name\" species_info() defaults \"\".","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve species information from a BirdFlow model — species_info","text":"element named , unless \"\" case list species information.  omitted species() return common name species, species_info() return complete list.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"retrieve species information from a BirdFlow model — species_info","text":"argument takes column names used ebirdst::ebirdst_runs input (descriptions ebirdst): convenience following short versions also accepted:","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/species_info.html","id":"dropped-items","dir":"Reference","previous_headings":"","what":"Dropped items","title":"retrieve species information from a BirdFlow model — species_info","text":"8 variables ebirdst::ebirdst_runs dropped BirdFlow model thus can retrieved species_info(). Four variables track whether full range covered eBird must TRUE BirdFlow model fit dropped: resident verified FALSE model fit. three related variables dropped:","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":null,"dir":"Reference","previous_headings":"","what":"convert a marginal into a transition matrix — transition_from_marginal","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"internal function generate transition matrix marginal","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"","code":"transition_from_marginal(m, direction)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"m marginal direction desired transition direction, either \"forward\" \"backward\"","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"transition matrix formulated multiply matrix distribution project distribution.  See get_transition() details.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/transition_from_marginal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert a marginal into a transition matrix — transition_from_marginal","text":"called get_transition(). point decide store transitions rather marginals also called import_birdflow().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to validate a BirdFlow object — validate_BirdFlow","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"Throw error BirdFlow object malformed incomplete.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"","code":"validate_BirdFlow(x, error = TRUE, allow_incomplete = FALSE)"},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"x BirdFlow object error TRUE throw error problems FALSE return problems data.frame. allow_incomplete TRUE allow BirdFlow object missing marginals transitions (components). allows checking output preprocess_species().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"error = FALSE function returns data.frame describing errors columns: problem character description problems type problem type, either \"error\" \"incomplete\" Otherwise, problems similar data.frame rows returned invisibly.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/reference/validate_BirdFlow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to validate a BirdFlow object — validate_BirdFlow","text":"preprocess_species() creates BirdFlow object lacks marginals transitions thus used make projections. validate_BirdFlow() tags absence type \"incomplete\". missing malformed components tagged \"error\". Since marginals can used calculate distributions transition matrices, BirdFlow object can complete marginals; transitions distributions. redundancy three considered error. Currently metadata species information checked completeness. Currently dead end transitions permitted.  See find_dead_ends() checking .","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109007","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.1.0.9007","title":"BirdflowR 0.1.0.9007","text":"Fixed URL.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109006","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.1.0.9006","title":"BirdflowR 0.1.0.9006","text":"Cleaned bad formatting _pkgdown.yml.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109005","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.1.0.9005","title":"BirdflowR 0.1.0.9005","text":"Added argument n lookup_timestep_sequence(), alternative end, n indicates many transitions resulting sequence. route(), lookup_transitions(), predict(), animate_movement_vectors() gained either explicit n parameter access via .... Breaking change: pre-existing n parameter route() renamed n_each avoid conflict new n parameter passed lookup_timestep_sequence(). Closes #76.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109004","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.1.0.9004","title":"BirdflowR 0.1.0.9004","text":"Made changes support pkgdown. Added links .yml Added BugReports field DESCRIPTION file Added second link URL field DESCRIPTION file linking github repo Switched development mode .yml unreleased. auto wasn’t working version 0.0.1.x. first formal release switched back auto.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0109003","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.1.0.9003","title":"BirdflowR 0.1.0.9003","text":"evaluate_performance() now exported. evaluate_performance() now uses dynamic mask calculating correlations (excluding masked cells). means bunch cells essentially forced zero sides correlation aren’t included calculation. Correlations get lower effect pronounced lower correlations.","code":""},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"added-movment-vector-visualizations-0-1-0-9002","dir":"Changelog","previous_headings":"","what":"Added movment vector visualizations","title":"BirdflowR 0.1.0.9002","text":"functions calculate visualize average movement cell BirdFlow model particular transition. New Functions calc_movement_vectors() returns data frame information average movement cell model given timestep. plot_movement_vectors() plots movement vectors directly BirdFlow model given timestep. Returns ggplot object. animate_movement_vectors() creates animation vectors series timesteps. Returns gganim object.","code":""},{"path":[]},{"path":[]},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"summary-0-1-0-9001","dir":"Changelog","previous_headings":"Switch to Dynamic masking","what":"Summary","title":"BirdflowR 0.1.0.9001","text":"Dynamic masking major overhaul package cells model acts change time limited cells non-zero value eBird S&T distributions. means marginal dimensions vary time, often square. intent isolate user changes. particular output input distribution objects still contain active cells public function arguments unchanged. Functions interact marginals now convert internally standard distributions covering active cells, dynamicly masked distributions conform marginal dimensions. predict(), route(), import_birdflow() substantial updates. BirdFlow objects gained great circle distance dynamic mask, created preprocessing, variable marginals transitions dimensions. great circle distance used python dropped (python) fitted model, ’s fairly large easy recalculate great_circle_distances().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"detailed-changes-0-1-0-9001","dir":"Changelog","previous_headings":"Switch to Dynamic masking","what":"Detailed changes","title":"BirdflowR 0.1.0.9001","text":"New /distances/ constains values distance matrix great circle distances km pair locations - converted vector non duplicated values shorten_distance_matrix() full matrix can recreated expand_distance_matrix() added export HDF5 preprocess_species() retained fitted models, distances can recreated great_circle_distances(). New /geom/dynamic_mask matrix row active cell model (see n_active()) column timestep. cells one one relationship cells `/distr’ TRUE cell included model timestep FALSE otherwise. /metadata/birdflow_version now 3. New /metdata/birdflowr_version stores package version preprocess_species() /called. New metadata/hyperparameters metadata/loss_values contain information generated python model fitting. get_dynamic_mask() similar get_distr() dynamic mask data. add_dynamic_mask() updates old BirdFlow object (R session) adding dynamic mask. mainly facilitate transition allow testing package old models. has_dynamic_mask() returns logical. import_birdflow_v3() internal function called import_birdflow() version 3 BirdFlow HDF5 files. great_circle_distances() creates great circle distance matrix encoding distance (km) every pair cells BirdFlow object. now works version 2 3 BirdFlow HDF5 files (added version 3, dropped version 1) reads dynamic mask reads metadata/hyperparameters read metadata/loss_values get_distr() from_marginals = TRUE now expand truncated distribution calculated marginal full distribution. predict() route() map full distributions, truncated distributions applying transition , expand back full output. validate_birdflow() now checks dimensions marginals transition matrices dynamic mask cell counts timestep. now calls great_circle_distances() shorten_distance_matrix()create “/distances” component HDF5 adds “geom/dynamic_mask” logical matrix indicating cells “/distr” non-zero timestep. updated heuristic set resolution based number parameters given dynamic masking. new argument dummy_dynamic_mask() adds dynamic mask TRUE force fitting prior style birdflow object. sparsify() updated work dynamic masks, now throw error telling try use BirdFlow object dynamic mask.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009075","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.0.0.9075","title":"BirdflowR 0.0.0.9075","text":"2023-04-18 Added BirdFlow methods generics defined sf * st_crs() returns object class crs used sf define coordinate reference sytems (CRS). * st_bbox() returns object class bbox containing extent crs BirdFlow object. Can passed st_as_sfc() convert polygon.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009074","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.0.0.9074","title":"BirdflowR 0.0.0.9074","text":"2023-04-13 get_naturalearth() related functions now default crop buffer transforming Natural Earth data returned object extent matches extent x. Whether cropping occurs now controlled keep_buffer defaults FALSE. Previously controlled match_extent.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009073","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.0.0.9073","title":"BirdflowR 0.0.0.9073","text":"2023-04-11 lookup_timestep() timestep lookup throughout package now consistent ebirdst::date_to_st_week() wasn’t previously true. dates near edges week breaks end classified different timestep previously. preprocess_species() now saves breakpoints ebirdst::ebirdst_weeks start end instead week_start week_end. lookup_timestep_sequence() workhorse function processing date range input functions. Generate forward backward sequences timesteps, dates, season name input, possibly season buffer. lookup_season_timesteps() narrowly focused helper, returns forward timestep sequences associated season possibly buffer (timesteps) beyond edge season. lookup_transitions() route() route_migration() predict() get_distr() Fixes bug #66 date lookup forward across year boundary failed. Addresses #68 providing function lookup timestep series based season names (adds buffer ability). Closes #56 time now processed mostly lookup_timestep() points time, lookup_timestep_sequence() date ranges. Point lookup now uses findInterval breaks derived ebirdst::ebirdst_weeks rather .min() difference center nominal day week. also make time lookup compatible partial year BirdFlow models.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009072","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.0.0.9072","title":"BirdflowR 0.0.0.9072","text":"2023-04-11 Fixed bug introduced ebirdst 2.2021.1 converted coljumns ebirdst_runs character. preprocess_species() now defensively forces columns () logical logical, numeric numeric.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009071","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9071","title":"BirdFlowR 0.0.0.9071","text":"2023-04-06 Added functions latlon_to_xy() xy_to_latlon() convert WGS84 (EPSG:4326) x y coordinates BirdFlow objects CRS. Fixes #64. CHANGED behavior bunch index conversion functions, previously, many threw errors NA input values range. now return NA situations. made sense context #61.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009070","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9070","title":"BirdFlowR 0.0.0.9070","text":"2023-04-06 Switching development version number scheme. now increment development version one every change main branch (merged pull request). Previously version issue number. Fixed #61 (added test). Now interval_log_likelihood() sets exclude not_active columns TRUE either involved observations entirely outside extent BirdFlow object. Previously locations outside extent resulted error.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009054","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9054","title":"BirdFlowR 0.0.0.9054","text":"2023-03-30 New interval_loglikelihood() calculates log likelihood banding tracking data given BirdFlow model. new supporting functions: drop_transitions() is_location_valid(), is_distr_valid() test whether locations distributions valid inputs predict() route() lookup_timestep()","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009022","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9022","title":"BirdFlowR 0.0.0.9022","text":"2023-03-27 get_naturalearth() related functions now throw helpful warning extent empty, , , return empty sf object. get_naturalearth() improved, robust way processing vector data works specific projections. Currently used Mollweide (“moll”) Lambert equal area (“laea”) based CRSs. get_naturalearth() new argument match_extent set TRUE causes result clipped precise extent input object (x). Use TRUE plotting ggplot2 Natural Earth data doesn’t result expanded plot extent. default, FALSE appropriate base R plotting Natural Earth Data runs beyond edge plot regardless whether aspect ratio x matches plot window’s. get_naturalearth() new argument use_old_method , TRUE forces less robust method regardless projection. testing function left default uses.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009044","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9044","title":"BirdFlowR 0.0.0.9044","text":"new function build_transitions(x) populate x$transitions forward backwards transitions. recommended repeated forecast() predict calls avoids repeatedly making transitions fly. triple memory usage BirdFlow object probably done sparse BirdFlow models. currently work throws warning BirdFlow model sparse. previously transitions_from_marginal() produced standard matrix. Now, mariginal sparse conversion done preserves sparse matrix. Similarly, transition matrix sparse predict() route() calculate sparse objects. speed two functions significantly.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009036","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9036","title":"BirdFlowR 0.0.0.9036","text":"replaced forecast() BirdFlow method predict().","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009033","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9033","title":"BirdFlowR 0.0.0.9033","text":"end result time stuff enumerated (1) can set time format, (2) possible time associated distribution stored dim names, (3) ’s single distribution thus possible store time dim names new \"time\" attribute added object store time associated distribution. new birdflow_options() allows setting global options persist session. Currently two options verbose time_format. time_format option controls labeling distributions either column names 1 distribution via “time” attribute (See ) ’s single distribution. affects get_distr(), predict(), rast(). get_distr() now adds attribute \"time\" returning single distribution vector. Multiple distributions already used matrix column names record time associated distribution. Similarly, expand_distr() called single distribution preserve \"time\" attribute output matrix, flatten_raster() called single distribution’s raster (matrix) also preserve “time” attribute output vector. rasterize_distr() thus also rast() now convert \"time\" attribute layer name output raster single distribution. previously still distribution column names multiple distributions. names column dimension distribution matrices changed “timestep” “time” internal, stored object returned objects get_distr() forecast(). fix_dead_ends(), preprocess_species(), sparsify() now honor birdflow_options(\"verbose\") - printing progress information TRUE.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009034","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9034","title":"BirdFlowR 0.0.0.9034","text":"Changed preprocess_species() gb argument gpu_ram.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009035","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9035","title":"BirdFlowR 0.0.0.9035","text":"sparsify() longer throws confusing warning (#35) First argument sparsify() changed bf x (consistent #19)","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009038","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9038","title":"BirdFlowR 0.0.0.9038","text":"Updated docker file work Apple silicon use cached github repos. (commit #37) Updated installation instructions Docker (commit #37) Route output snapshot testing longer depends print(lines) check novel points points component return value. fix issue currently failing CRAN check sf:: changed slightly prints summary SF object screen also make snapshot test little less hair trigger.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009028","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9028","title":"BirdFlowR 0.0.0.9028","text":"2023-03-08 New vignette(\"Preprocess\") covers preprocessing, importing, sparsification New vignette(\"Installation\") covers R, RStudio, package installation; installing Docker container. Updated installation instructions everywhere use remotes instead devtools re-install packages unnecessarily. Expanded “Learn ”” section README.md link vignettes well BirdFlow paper.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009021-2023-03-03","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9021 2023-03-03","title":"BirdFlowR 0.0.0.9021 2023-03-03","text":"Now downloads files needs #21 Slight adjustment resolution heuristic, take fewer steps find right resolution. Added additional tests cover error conditions clipping","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009019-2023-03-01","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9019 2023-03-01","title":"BirdFlowR 0.0.0.9019 2023-03-01","text":"collapse_distr(x, bf) -> collapse_raster(raster, bf) evaluate_perfomance(bf) -> evaluate_performance(x) expand_distr(x, bf) -> expand_distr(distr, bf) get_distr(, bf, from_marginals) -> get_distr(x, , from_marginals) get_transition(x, bf) -> get_transition(x, transition) lookup_transitions(start, end, bf, direction) -> lookup_transition(x, start, end, direction) sample_distr(x, bf) -> sample_distr(distr, bf) evaluate_performance() find_dead_ends() find_threshold() fix_dead_ends() import_prototype() lookup_transitions() new_BirdFlow() transition_from_marginal() Added “@keyword internal” documentation non-exported functions. removes documentation package manual index, ’s still accessible ?function_name.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009016-2023-02-27","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9016 2023-02-27","title":"BirdFlowR 0.0.0.9016 2023-02-27","text":"Added package . Starting use semantic versioning.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009017-2023-02-27","dir":"Changelog","previous_headings":"","what":"BirdflowR 0.0.0.9017 2023-02-27","title":"BirdflowR 0.0.0.9017 2023-02-27","text":"Fix bug introduced ebirdst 2.2021.0 (switch raster terra) #17.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009003-2023-02-27","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9003 2023-02-27","title":"BirdFlowR 0.0.0.9003 2023-02-27","text":"Updated installation instructions. Closing #11. Added docker file. Usage instructions.","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009002-2023-02-23","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9002 2023-02-23","title":"BirdFlowR 0.0.0.9002 2023-02-23","text":"Added “biocViews:” “Imports:” DESCRIPTION devtools can find install rhdf5 (Bioconductor) installing packages BirdFlowR needs. #13 Vignette now attempts load rnaturalearthdata utils::install.packages() instead devtools::install_cran() attempt fix #11 Updated get_naturalearth() handles cases previously failed. particular extents span 180 deg longitude, extents cross 180 deg. meridian defines edge WGS84 projection now work. function still doesn’t handle polar projections global extents projections. Fixes #14","code":""},{"path":"https://birdflow-science.github.io/BirdFlowR/news/index.html","id":"birdflowr-0009001-2023-02-21","dir":"Changelog","previous_headings":"","what":"BirdFlowR 0.0.0.9001 2023-02-21","title":"BirdFlowR 0.0.0.9001 2023-02-21","text":"Switched order package installation readme added installation rnaturalearthdata vignette #11 Added NEWS.md file track changes package.","code":""}]
